{"version":3,"sources":["webpack:///publication.js","webpack:///./publication.js","webpack:////projects/rede_gsti/resources/~/fg-loadcss/src/loadCSS.js"],"names":["webpackJsonp","0","module","exports","__webpack_require__","99","$","_fgLoadcss","ADITIONAL_CSS","data","loadCSS","call","219","global","w","href","before","media","ready","cb","doc","body","setTimeout","loadCB","ss","addEventListener","removeEventListener","ref","document","createElement","refs","getElementsByTagName","childNodes","length","sheets","styleSheets","rel","parentNode","insertBefore","nextSibling","onloadcssdefined","resolvedHref","i","this","220"],"mappings":"AAAAA,cAAc,IAERC,EACA,SAASC,EAAQC,EAASC,GAE/BF,EAAOC,QAAUC,EAAoB,KAKhCC,GACA,SAASH,EAAQC,EAASC,ICXhC,SAAAE,GAAA,YDeC,IAAIC,GAAaH,ECbM,IDevBA,GCdM,IAEP,IAAMI,GAAgBF,EAAG,QAASG,KAAM,eAExC,EAAAF,EAAAG,SAAQF,EAAeF,EAAG,QAAS,MDeLK,KAAKR,EAASC,EAAoB,KAI1DQ,IACA,SAASV,EAAQC,EAASC,IE3BhC,SAAAS;CACA,SAAAC,GACA,YAEA,IAAAJ,GAAA,SAAAK,EAAAC,EAAAC,GAwBA,QAAAC,GAAAC,GACA,MAAAC,GAAAC,KACAF,QAEAG,YAAA,WACAJ,EAAAC,KAuBA,QAAAI,KACAC,EAAAC,kBACAD,EAAAE,oBAAA,OAAAH,GAEAC,EAAAP,SAAA,MAlDA,GAEAU,GAFAP,EAAAN,EAAAc,SACAJ,EAAAJ,EAAAS,cAAA,OAEA,IAAAb,EACAW,EAAAX,MAEA,CACA,GAAAc,IAAAV,EAAAC,MAAAD,EAAAW,qBAAA,YAAAC,UACAL,GAAAG,IAAAG,OAAA,GAGA,GAAAC,GAAAd,EAAAe,WACAX,GAAAY,IAAA,aACAZ,EAAAT,OAEAS,EAAAP,MAAA,SAcAC,EAAA,WACAS,EAAAU,WAAAC,aAAAd,EAAAR,EAAAW,IAAAY,cAGA,IAAAC,GAAA,SAAArB,GAGA,IAFA,GAAAsB,GAAAjB,EAAAT,KACA2B,EAAAR,EAAAD,OACAS,KACA,GAAAR,EAAAQ,GAAA3B,OAAA0B,EACA,MAAAtB,IAGAG,YAAA,WACAkB,EAAArB,KAiBA,OALAK,GAAAC,kBACAD,EAAAC,iBAAA,OAAAF,GAEAC,EAAAgB,mBACAA,EAAAjB,GACAC,EAIArB,GAAAO,WAKC,mBAAAG,KAAA8B,QF+B6BhC,KAAKR,EAAU,WAAa,MAAOwC,WAI3DC,IACA,SAAS1C,EAAQC","file":"publication.js","sourcesContent":["webpackJsonp([3],{\n\n/***/ 0:\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(99);\n\n\n/***/ },\n\n/***/ 99:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function($) {'use strict';\n\t\n\tvar _fgLoadcss = __webpack_require__(219);\n\t\n\t__webpack_require__(220);\n\t\n\tvar ADITIONAL_CSS = $('main').data('asyncstyle');\n\t\n\t(0, _fgLoadcss.loadCSS)(ADITIONAL_CSS, $('link')[0]);\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))\n\n/***/ },\n\n/***/ 219:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {/*! loadCSS: load a CSS file asynchronously. [c]2016 @scottjehl, Filament Group, Inc. Licensed MIT */\n\t(function(w){\n\t\t\"use strict\";\n\t\t/* exported loadCSS */\n\t\tvar loadCSS = function( href, before, media ){\n\t\t\t// Arguments explained:\n\t\t\t// `href` [REQUIRED] is the URL for your CSS file.\n\t\t\t// `before` [OPTIONAL] is the element the script should use as a reference for injecting our stylesheet <link> before\n\t\t\t\t// By default, loadCSS attempts to inject the link after the last stylesheet or script in the DOM. However, you might desire a more specific location in your document.\n\t\t\t// `media` [OPTIONAL] is the media type or query of the stylesheet. By default it will be 'all'\n\t\t\tvar doc = w.document;\n\t\t\tvar ss = doc.createElement( \"link\" );\n\t\t\tvar ref;\n\t\t\tif( before ){\n\t\t\t\tref = before;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvar refs = ( doc.body || doc.getElementsByTagName( \"head\" )[ 0 ] ).childNodes;\n\t\t\t\tref = refs[ refs.length - 1];\n\t\t\t}\n\t\n\t\t\tvar sheets = doc.styleSheets;\n\t\t\tss.rel = \"stylesheet\";\n\t\t\tss.href = href;\n\t\t\t// temporarily set media to something inapplicable to ensure it'll fetch without blocking render\n\t\t\tss.media = \"only x\";\n\t\n\t\t\t// wait until body is defined before injecting link. This ensures a non-blocking load in IE11.\n\t\t\tfunction ready( cb ){\n\t\t\t\tif( doc.body ){\n\t\t\t\t\treturn cb();\n\t\t\t\t}\n\t\t\t\tsetTimeout(function(){\n\t\t\t\t\tready( cb );\n\t\t\t\t});\n\t\t\t}\n\t\t\t// Inject link\n\t\t\t\t// Note: the ternary preserves the existing behavior of \"before\" argument, but we could choose to change the argument to \"after\" in a later release and standardize on ref.nextSibling for all refs\n\t\t\t\t// Note: `insertBefore` is used instead of `appendChild`, for safety re: http://www.paulirish.com/2011/surefire-dom-element-insertion/\n\t\t\tready( function(){\n\t\t\t\tref.parentNode.insertBefore( ss, ( before ? ref : ref.nextSibling ) );\n\t\t\t});\n\t\t\t// A method (exposed on return object for external use) that mimics onload by polling document.styleSheets until it includes the new sheet.\n\t\t\tvar onloadcssdefined = function( cb ){\n\t\t\t\tvar resolvedHref = ss.href;\n\t\t\t\tvar i = sheets.length;\n\t\t\t\twhile( i-- ){\n\t\t\t\t\tif( sheets[ i ].href === resolvedHref ){\n\t\t\t\t\t\treturn cb();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\tonloadcssdefined( cb );\n\t\t\t\t});\n\t\t\t};\n\t\n\t\t\tfunction loadCB(){\n\t\t\t\tif( ss.addEventListener ){\n\t\t\t\t\tss.removeEventListener( \"load\", loadCB );\n\t\t\t\t}\n\t\t\t\tss.media = media || \"all\";\n\t\t\t}\n\t\n\t\t\t// once loaded, set link's media back to `all` so that the stylesheet applies once it loads\n\t\t\tif( ss.addEventListener ){\n\t\t\t\tss.addEventListener( \"load\", loadCB);\n\t\t\t}\n\t\t\tss.onloadcssdefined = onloadcssdefined;\n\t\t\tonloadcssdefined( loadCB );\n\t\t\treturn ss;\n\t\t};\n\t\t// commonjs\n\t\tif( true ){\n\t\t\texports.loadCSS = loadCSS;\n\t\t}\n\t\telse {\n\t\t\tw.loadCSS = loadCSS;\n\t\t}\n\t}( typeof global !== \"undefined\" ? global : this ));\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n\n/***/ 220:\n/***/ function(module, exports) {\n\n\t/*! onloadCSS: adds onload support for asynchronous stylesheets loaded with loadCSS. [c]2016 @zachleat, Filament Group, Inc. Licensed MIT */\n\t/* global navigator */\n\t/* exported onloadCSS */\n\tfunction onloadCSS( ss, callback ) {\n\t\tvar called;\n\t\tfunction newcb(){\n\t\t\t\tif( !called && callback ){\n\t\t\t\t\tcalled = true;\n\t\t\t\t\tcallback.call( ss );\n\t\t\t\t}\n\t\t}\n\t\tif( ss.addEventListener ){\n\t\t\tss.addEventListener( \"load\", newcb );\n\t\t}\n\t\tif( ss.attachEvent ){\n\t\t\tss.attachEvent( \"onload\", newcb );\n\t\t}\n\t\n\t\t// This code is for browsers that donâ€™t support onload\n\t\t// No support for onload (it'll bind but never fire):\n\t\t//\t* Android 4.3 (Samsung Galaxy S4, Browserstack)\n\t\t//\t* Android 4.2 Browser (Samsung Galaxy SIII Mini GT-I8200L)\n\t\t//\t* Android 2.3 (Pantech Burst P9070)\n\t\n\t\t// Weak inference targets Android < 4.4\n\t \tif( \"isApplicationInstalled\" in navigator && \"onloadcssdefined\" in ss ) {\n\t\t\tss.onloadcssdefined( newcb );\n\t\t}\n\t}\n\n\n/***/ }\n\n});\n\n\n// WEBPACK FOOTER //\n// publication.js","'use strict';\n\nimport { loadCSS } from 'fg-loadcss'\nimport '../../node_modules/fg-loadcss/src/onloadCSS'\n\nconst ADITIONAL_CSS = $( 'main' ).data( 'asyncstyle' )\n\nloadCSS(ADITIONAL_CSS, $( 'link' )[0] )\n\n\n\n// WEBPACK FOOTER //\n// ./publication.js","/*! loadCSS: load a CSS file asynchronously. [c]2016 @scottjehl, Filament Group, Inc. Licensed MIT */\n(function(w){\n\t\"use strict\";\n\t/* exported loadCSS */\n\tvar loadCSS = function( href, before, media ){\n\t\t// Arguments explained:\n\t\t// `href` [REQUIRED] is the URL for your CSS file.\n\t\t// `before` [OPTIONAL] is the element the script should use as a reference for injecting our stylesheet <link> before\n\t\t\t// By default, loadCSS attempts to inject the link after the last stylesheet or script in the DOM. However, you might desire a more specific location in your document.\n\t\t// `media` [OPTIONAL] is the media type or query of the stylesheet. By default it will be 'all'\n\t\tvar doc = w.document;\n\t\tvar ss = doc.createElement( \"link\" );\n\t\tvar ref;\n\t\tif( before ){\n\t\t\tref = before;\n\t\t}\n\t\telse {\n\t\t\tvar refs = ( doc.body || doc.getElementsByTagName( \"head\" )[ 0 ] ).childNodes;\n\t\t\tref = refs[ refs.length - 1];\n\t\t}\n\n\t\tvar sheets = doc.styleSheets;\n\t\tss.rel = \"stylesheet\";\n\t\tss.href = href;\n\t\t// temporarily set media to something inapplicable to ensure it'll fetch without blocking render\n\t\tss.media = \"only x\";\n\n\t\t// wait until body is defined before injecting link. This ensures a non-blocking load in IE11.\n\t\tfunction ready( cb ){\n\t\t\tif( doc.body ){\n\t\t\t\treturn cb();\n\t\t\t}\n\t\t\tsetTimeout(function(){\n\t\t\t\tready( cb );\n\t\t\t});\n\t\t}\n\t\t// Inject link\n\t\t\t// Note: the ternary preserves the existing behavior of \"before\" argument, but we could choose to change the argument to \"after\" in a later release and standardize on ref.nextSibling for all refs\n\t\t\t// Note: `insertBefore` is used instead of `appendChild`, for safety re: http://www.paulirish.com/2011/surefire-dom-element-insertion/\n\t\tready( function(){\n\t\t\tref.parentNode.insertBefore( ss, ( before ? ref : ref.nextSibling ) );\n\t\t});\n\t\t// A method (exposed on return object for external use) that mimics onload by polling document.styleSheets until it includes the new sheet.\n\t\tvar onloadcssdefined = function( cb ){\n\t\t\tvar resolvedHref = ss.href;\n\t\t\tvar i = sheets.length;\n\t\t\twhile( i-- ){\n\t\t\t\tif( sheets[ i ].href === resolvedHref ){\n\t\t\t\t\treturn cb();\n\t\t\t\t}\n\t\t\t}\n\t\t\tsetTimeout(function() {\n\t\t\t\tonloadcssdefined( cb );\n\t\t\t});\n\t\t};\n\n\t\tfunction loadCB(){\n\t\t\tif( ss.addEventListener ){\n\t\t\t\tss.removeEventListener( \"load\", loadCB );\n\t\t\t}\n\t\t\tss.media = media || \"all\";\n\t\t}\n\n\t\t// once loaded, set link's media back to `all` so that the stylesheet applies once it loads\n\t\tif( ss.addEventListener ){\n\t\t\tss.addEventListener( \"load\", loadCB);\n\t\t}\n\t\tss.onloadcssdefined = onloadcssdefined;\n\t\tonloadcssdefined( loadCB );\n\t\treturn ss;\n\t};\n\t// commonjs\n\tif( typeof exports !== \"undefined\" ){\n\t\texports.loadCSS = loadCSS;\n\t}\n\telse {\n\t\tw.loadCSS = loadCSS;\n\t}\n}( typeof global !== \"undefined\" ? global : this ));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /projects/rede_gsti/resources/~/fg-loadcss/src/loadCSS.js\n// module id = 219\n// module chunks = 3"],"sourceRoot":""}