{"version":3,"sources":["webpack:///1.1.js","webpack:///./asyncModules ^\\.\\/.*$","webpack:///./asyncModules/dropzoneUploader.js","webpack:///./asyncModules/tagger.js","webpack:////projects/rede_gsti/resources/~/selectize/dist/js/selectize.js","webpack:////projects/rede_gsti/resources/~/selectize/~/sifter/sifter.js","webpack:////projects/rede_gsti/resources/~/selectize/~/microplugin/src/microplugin.js"],"names":["webpackJsonp","module","exports","__webpack_require__","webpackContext","req","webpackContextResolve","map","Error","./dropzoneUploader","./dropzoneUploader.js","./index","./index.js","./tagger","./tagger.js","keys","Object","resolve","id","defineProperty","value","$","_module","element","cbDragOver","event","console","log","dropZone","addClass","cbDragLeave","removeClass","cbDrop","file","originalEvent","dataTransfer","files","stopPropagation","preventDefault","readFile","$input","val","cbChangeFile","this","cbTriggerFile","trigger","find","$altInput","on","dragover","dragleave","drop","change","click","reader","FileReader","onload","e","load","createPreview","getCanvasImage","attr","target","result","readAsDataURL","image","imgWidth","imgHeight","canvas","document","createElement","width","height","ctx","getContext","drawImage","toDataURL","newURL","fileName","name","substr","lastIndexOf","filePath","html","show","hide","_interopRequireDefault","obj","__esModule","default","templateItem","item","escape","templateOption","img","loadUsers","query","callback","options","$wrapper","prev","data","length","_jquery2","ajax","url","type","criteria","error","success","res","users","_jquery","suggest","plugins","maxItems","valueField","labelField","searchField","create","render","option","tagger","selectize","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","root","factory","apply","undefined","Sifter","MicroPlugin","highlight","$element","pattern","regex","RegExp","node","skip","nodeType","pos","search","match","spannode","className","middlebit","splitText","middleclone","cloneNode","appendChild","parentNode","replaceChild","childNodes","test","tagName","i","each","MicroEvent","prototype","fct","_events","push","off","n","arguments","splice","indexOf","Array","slice","call","mixin","destObject","props","IS_MAC","navigator","userAgent","KEY_A","KEY_RETURN","KEY_ESC","KEY_LEFT","KEY_UP","KEY_P","KEY_RIGHT","KEY_DOWN","KEY_N","KEY_BACKSPACE","KEY_DELETE","KEY_SHIFT","KEY_CMD","KEY_CTRL","KEY_TAB","TAG_SELECT","TAG_INPUT","SUPPORTS_VALIDITY_API","window","validity","isset","object","hash_key","escape_html","str","replace","escape_replace","hook","before","self","method","fn","original","after","once","called","debounce","delay","timeout","args","clearTimeout","setTimeout","debounce_events","types","event_args","hasOwnProperty","watchChildEvent","$parent","selector","child","currentTarget","getSelection","input","start","selectionStart","selectionEnd","selection","focus","sel","createRange","selLen","text","moveStart","transferStyles","$from","$to","properties","styles","css","measureString","$test","position","top","left","padding","whiteSpace","appendTo","remove","autoGrow","currentWidth","update","keyCode","printable","placeholder","shift","character","metaKey","altKey","force","toLowerCase","substring","shiftKey","String","fromCharCode","toUpperCase","triggerHandler","Selectize","settings","dir","computedStyle","getComputedStyle","getPropertyValue","currentStyle","direction","parents","extend","order","tabIndex","tagType","rtl","eventNS","count","highlightedValue","isOpen","isDisabled","isRequired","is","isInvalid","isLocked","isFocused","isInputHidden","isSetup","isShiftDown","isCmdDown","isCtrlDown","ignoreFocus","ignoreBlur","ignoreHover","hasOptions","currentResults","lastValue","caretPos","loading","loadedSearches","$activeOption","$activeItems","optgroups","userOptions","items","renderCache","onSearchChange","loadThrottle","sifter","diacritics","registerOption","registerOptionGroup","mode","hideSelected","initializePlugins","setupCallbacks","setupTemplates","setup","$control","$control_input","$dropdown","$dropdown_content","$dropdown_parent","inputMode","classes","classes_plugins","$window","$document","wrapperClass","inputClass","dropdownParent","dropdownClass","dropdownContentClass","copyClassesToDropdown","style","names","join","splitOn","delimiter","delimiterEscaped","onOptionHover","onOptionSelect","onItemSelect","mousedown","onMouseDown","onClick","keydown","onKeyDown","keyup","onKeyUp","keypress","onKeyPress","resize","positionDropdown","blur","onBlur","onFocus","paste","onPaste","has","revertSettings","$children","children","detach","tabindex","isArray","setValue","refreshState","updateOriginalInput","refreshItems","updatePlaceholder","disable","onChange","preload","field_label","field_optgroup","optgroupLabelField","templates","optgroup","optgroup_header","option_create","key","callbacks","initialize","item_add","item_remove","clear","option_add","option_remove","option_clear","optgroup_add","optgroup_remove","optgroup_clear","dropdown_open","dropdown_close","defaultPrevented","isDefaultPrevented","close","open","setActiveItem","isFull","splitInput","trim","split","createItem","which","selectAll","ctrlKey","$next","getAdjacentOption","setActiveOption","$prev","advanceSelection","selectOnTab","deleteSelection","refreshOptions","wasFocused","showInput","openOnFocus","dest","activeElement","deactivate","setTextboxValue","setCaret","body","createOnBlur","$target","hasClass","closeAfterSelect","lastQuery","addItem","getOption","loadingClass","results","Math","max","addOption","changed","getValue","silent","events","addItems","$item","eventName","idx","begin","end","swap","$last","hideInput","$option","scroll","animate","height_menu","height_item","y","scroll_top","scroll_bottom","outerHeight","scrollTop","offset","stop","scrollDuration","opacity","getScoreFunction","getSearchOptions","sort","sortField","field","fields","conjunction","searchConjunction","calculateScore","score","triggerDropdown","j","k","groups","groups_order","option_html","html_children","has_create_option","$active","$active_before","$create","active_before","maxOptions","min","optgroupField","lockOptgroupOrder","a","b","a_order","$order","b_order","tokens","canCreate","prepend","addPrecedence","optgroupValueField","addOptionGroup","removeOptionGroup","clearOptionGroups","updateOption","$item_new","value_new","index_item","cache_items","cache_options","order_old","getItem","replaceWith","removeOption","removeItem","clearOptions","getElementWithValue","$options","index","eq","$els","getAttribute","values","isPending","value_next","wasFull","insertAtCaret","persist","caret","lock","unlock","output","invalid","prop","refreshClasses","toggleClass","isEmptyObject","opts","label","removeAttr","visibility","display","outerWidth","$el","option_select","$option_select","$tail","onDelete","pop","tail","valueLength","cursorAtEdge","advanceCaret","$adj","$child","append","enable","destroy","removeData","templateName","cache","regex_tag","clearCache","filter","createFilter","defaults","allowEmptyOption","dataAttr","settings_user","attr_data","field_value","field_optgroup_label","field_optgroup_value","init_textbox","settings_element","data_raw","JSON","parse","init_select","optionsMap","readData","group","arr","addGroup","$optgroup","instance","tag_name","support","define","sortable","forcePlaceholderSize","disabled","ui","helper","overflow","active","title","headerClass","titleRowClass","labelClass","closeClass","$dropdown_header","equalizeWidth","equalizeHeight","closest","next","getScrollbarWidth","div","doc","innerHTML","firstChild","offsetWidth","clientWidth","removeChild","equalizeSizes","height_max","width_last","width_parent","$optgroups","innerWidth","round","html_container","html_element","render_item","parent","tokenize","letter","words","escape_regex","DIACRITICS","string","iterator","is_array","forEach","token_count","prepareSearch","scoreValue","token","scoreObject","field_count","sum","getSortFunction","fields_count","multiplier","multipliers","get_field","implicit_score","sort_empty","unshift","cmp","option_fields","option_sort","option_sort_empty","total","fn_sort","fn_score","limit","asciifold","toString","c","d","l","o","r","s","t","u","z","chunk","foreignletters","lookup","charAt","regexp","foreignletter","Interface","queue","requested","loaded","utils","require","loadPlugin","plugin","vArg"],"mappings":"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","file":"1.1.js","sourcesContent":["webpackJsonp([1,2],[\n/* 0 */,\n/* 1 */,\n/* 2 */,\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar map = {\n\t\t\"./dropzoneUploader\": 4,\n\t\t\"./dropzoneUploader.js\": 4,\n\t\t\"./index\": 2,\n\t\t\"./index.js\": 2,\n\t\t\"./tagger\": 6,\n\t\t\"./tagger.js\": 6\n\t};\n\tfunction webpackContext(req) {\n\t\treturn __webpack_require__(webpackContextResolve(req));\n\t};\n\tfunction webpackContextResolve(req) {\n\t\treturn map[req] || (function() { throw new Error(\"Cannot find module '\" + req + \"'.\") }());\n\t};\n\twebpackContext.keys = function webpackContextKeys() {\n\t\treturn Object.keys(map);\n\t};\n\twebpackContext.resolve = webpackContextResolve;\n\tmodule.exports = webpackContext;\n\twebpackContext.id = 3;\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t// Dependecies\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\tvar $ = __webpack_require__(5);\n\t\n\tvar _module = function _module(element) {\n\t  var dropZone = $(element);\n\t  var $input = dropZone.find('input'); // TODO: Change this selector name\n\t  var $altInput = dropZone.find('[data-trigger=\"file\"]');\n\t\n\t  dropZone.on({\n\t    dragover: cbDragOver,\n\t    dragleave: cbDragLeave,\n\t    drop: cbDrop\n\t  });\n\t\n\t  $input.on({\n\t    change: cbChangeFile\n\t  });\n\t\n\t  $altInput.on({\n\t    click: cbTriggerFile\n\t  });\n\t\n\t  function cbDragOver(event) {\n\t    console.log('Make some when file is over of element');\n\t    dropZone.addClass('hover');\n\t    return false;\n\t  }\n\t\n\t  function cbDragLeave(event) {\n\t    console.log('Make some when file is leaved of element');\n\t    dropZone.removeClass('hover');\n\t    return false;\n\t  }\n\t\n\t  function cbDrop(event) {\n\t    var file = event.originalEvent.dataTransfer.files[0];\n\t\n\t    event.stopPropagation();\n\t    event.preventDefault();\n\t    dropZone.removeClass('hover');\n\t\n\t    readFile(file);\n\t    $input.files = file;\n\t    $input.val('');\n\t    return false;\n\t  }\n\t\n\t  function cbChangeFile(event) {\n\t    readFile(this.files[0]);\n\t    return false;\n\t  }\n\t\n\t  function cbTriggerFile(event) {\n\t    $input.trigger('click');\n\t  }\n\t};\n\t\n\tvar readFile = function readFile(file) {\n\t  var reader = new FileReader();\n\t\n\t  reader.onload = function (e) {\n\t    var image = $('<img/>').load(function () {\n\t      createPreview(file, getCanvasImage(this));\n\t    }).attr('src', e.target.result);\n\t  };\n\t  reader.readAsDataURL(file);\n\t};\n\t\n\tvar getCanvasImage = function getCanvasImage(image) {\n\t\n\t  var imgWidth = 500,\n\t      imgHeight = 500;\n\t\n\t  var canvas = document.createElement('canvas');\n\t  canvas.width = imgWidth;\n\t  canvas.height = imgHeight;\n\t\n\t  var ctx = canvas.getContext('2d');\n\t  ctx.drawImage(image, 0, 0, imgWidth, imgHeight);\n\t\n\t  return canvas.toDataURL('image/jpeg');\n\t};\n\t\n\tvar createPreview = function createPreview(file, newURL) {\n\t  var fileName = file.name.substr(0, file.name.lastIndexOf('.')); //subtract file extension\n\t  var filePath = newURL;\n\t  var image = '<img src=\"' + filePath + '\" class=\"img-responsive\" alt=\"' + fileName + '\"/>';\n\t  //append new image through jQuery Template\n\t  $('[data-content=\"file\"]').html(image).show();\n\t  $('.custom-file-content').hide();\n\t};\n\t\n\texports['default'] = _module;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 5 */,\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _jquery = __webpack_require__(5);\n\t\n\tvar _jquery2 = _interopRequireDefault(_jquery);\n\t\n\t__webpack_require__(7);\n\t\n\tvar suggest = {\n\t    plugins: ['remove_button'],\n\t    maxItems: 5,\n\t    valueField: 'id',\n\t    labelField: 'name',\n\t    searchField: 'name',\n\t    create: false,\n\t    render: {\n\t        item: templateItem,\n\t        option: templateOption\n\t    },\n\t    load: loadUsers\n\t};\n\t\n\tvar tagger = function tagger(element) {\n\t    var type = (0, _jquery2['default'])(element).data('taggerType');\n\t    switch (type) {\n\t        case 'suggest':\n\t            (0, _jquery2['default'])(element).selectize(suggest);\n\t    }\n\t};\n\t\n\tfunction templateItem(item, escape) {\n\t    var name = item.name ? escape(item.name) : '';\n\t    return '<div>' + name + '</div>';\n\t}\n\tfunction templateOption(item, escape) {\n\t    var name = item.name ? escape(item.name) : '';\n\t    var img = item.img ? escape(item.img) : '';\n\t    return '<div class=\"item-float-notification\">\\n    <span><img src=\"' + img + '\" alt=\"' + name + '\"></span>\\n    <span>' + name + '</span>\\n  </div>';\n\t}\n\t\n\tfunction loadUsers(query, callback) {\n\t    var options = this.$wrapper.prev().data();\n\t    if (!query.length) {\n\t        return callback();\n\t    }\n\t    _jquery2['default'].ajax({\n\t        url: options.url,\n\t        type: 'GET',\n\t        data: {\n\t            criteria: query\n\t        },\n\t        error: function error() {\n\t            callback();\n\t        },\n\t        success: function success(res) {\n\t            callback(res.users);\n\t        }\n\t    });\n\t}\n\t\n\texports['default'] = tagger;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * selectize.js (v0.12.1)\n\t * Copyright (c) 2013–2015 Brian Reavis & contributors\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n\t * file except in compliance with the License. You may obtain a copy of the License at:\n\t * http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software distributed under\n\t * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n\t * ANY KIND, either express or implied. See the License for the specific language\n\t * governing permissions and limitations under the License.\n\t *\n\t * @author Brian Reavis <brian@thirdroute.com>\n\t */\n\t\n\t/*jshint curly:false */\n\t/*jshint browser:true */\n\t\n\t(function(root, factory) {\n\t\tif (true) {\n\t\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(5),__webpack_require__(8),__webpack_require__(9)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\t} else if (typeof exports === 'object') {\n\t\t\tmodule.exports = factory(require('jquery'), require('sifter'), require('microplugin'));\n\t\t} else {\n\t\t\troot.Selectize = factory(root.jQuery, root.Sifter, root.MicroPlugin);\n\t\t}\n\t}(this, function($, Sifter, MicroPlugin) {\n\t\t'use strict';\n\t\n\t\tvar highlight = function($element, pattern) {\n\t\t\tif (typeof pattern === 'string' && !pattern.length) return;\n\t\t\tvar regex = (typeof pattern === 'string') ? new RegExp(pattern, 'i') : pattern;\n\t\t\n\t\t\tvar highlight = function(node) {\n\t\t\t\tvar skip = 0;\n\t\t\t\tif (node.nodeType === 3) {\n\t\t\t\t\tvar pos = node.data.search(regex);\n\t\t\t\t\tif (pos >= 0 && node.data.length > 0) {\n\t\t\t\t\t\tvar match = node.data.match(regex);\n\t\t\t\t\t\tvar spannode = document.createElement('span');\n\t\t\t\t\t\tspannode.className = 'highlight';\n\t\t\t\t\t\tvar middlebit = node.splitText(pos);\n\t\t\t\t\t\tvar endbit = middlebit.splitText(match[0].length);\n\t\t\t\t\t\tvar middleclone = middlebit.cloneNode(true);\n\t\t\t\t\t\tspannode.appendChild(middleclone);\n\t\t\t\t\t\tmiddlebit.parentNode.replaceChild(spannode, middlebit);\n\t\t\t\t\t\tskip = 1;\n\t\t\t\t\t}\n\t\t\t\t} else if (node.nodeType === 1 && node.childNodes && !/(script|style)/i.test(node.tagName)) {\n\t\t\t\t\tfor (var i = 0; i < node.childNodes.length; ++i) {\n\t\t\t\t\t\ti += highlight(node.childNodes[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn skip;\n\t\t\t};\n\t\t\n\t\t\treturn $element.each(function() {\n\t\t\t\thighlight(this);\n\t\t\t});\n\t\t};\n\t\t\n\t\tvar MicroEvent = function() {};\n\t\tMicroEvent.prototype = {\n\t\t\ton: function(event, fct){\n\t\t\t\tthis._events = this._events || {};\n\t\t\t\tthis._events[event] = this._events[event] || [];\n\t\t\t\tthis._events[event].push(fct);\n\t\t\t},\n\t\t\toff: function(event, fct){\n\t\t\t\tvar n = arguments.length;\n\t\t\t\tif (n === 0) return delete this._events;\n\t\t\t\tif (n === 1) return delete this._events[event];\n\t\t\n\t\t\t\tthis._events = this._events || {};\n\t\t\t\tif (event in this._events === false) return;\n\t\t\t\tthis._events[event].splice(this._events[event].indexOf(fct), 1);\n\t\t\t},\n\t\t\ttrigger: function(event /* , args... */){\n\t\t\t\tthis._events = this._events || {};\n\t\t\t\tif (event in this._events === false) return;\n\t\t\t\tfor (var i = 0; i < this._events[event].length; i++){\n\t\t\t\t\tthis._events[event][i].apply(this, Array.prototype.slice.call(arguments, 1));\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t\n\t\t/**\n\t\t * Mixin will delegate all MicroEvent.js function in the destination object.\n\t\t *\n\t\t * - MicroEvent.mixin(Foobar) will make Foobar able to use MicroEvent\n\t\t *\n\t\t * @param {object} the object which will support MicroEvent\n\t\t */\n\t\tMicroEvent.mixin = function(destObject){\n\t\t\tvar props = ['on', 'off', 'trigger'];\n\t\t\tfor (var i = 0; i < props.length; i++){\n\t\t\t\tdestObject.prototype[props[i]] = MicroEvent.prototype[props[i]];\n\t\t\t}\n\t\t};\n\t\t\n\t\tvar IS_MAC        = /Mac/.test(navigator.userAgent);\n\t\t\n\t\tvar KEY_A         = 65;\n\t\tvar KEY_COMMA     = 188;\n\t\tvar KEY_RETURN    = 13;\n\t\tvar KEY_ESC       = 27;\n\t\tvar KEY_LEFT      = 37;\n\t\tvar KEY_UP        = 38;\n\t\tvar KEY_P         = 80;\n\t\tvar KEY_RIGHT     = 39;\n\t\tvar KEY_DOWN      = 40;\n\t\tvar KEY_N         = 78;\n\t\tvar KEY_BACKSPACE = 8;\n\t\tvar KEY_DELETE    = 46;\n\t\tvar KEY_SHIFT     = 16;\n\t\tvar KEY_CMD       = IS_MAC ? 91 : 17;\n\t\tvar KEY_CTRL      = IS_MAC ? 18 : 17;\n\t\tvar KEY_TAB       = 9;\n\t\t\n\t\tvar TAG_SELECT    = 1;\n\t\tvar TAG_INPUT     = 2;\n\t\t\n\t\t// for now, android support in general is too spotty to support validity\n\t\tvar SUPPORTS_VALIDITY_API = !/android/i.test(window.navigator.userAgent) && !!document.createElement('form').validity;\n\t\t\n\t\tvar isset = function(object) {\n\t\t\treturn typeof object !== 'undefined';\n\t\t};\n\t\t\n\t\t/**\n\t\t * Converts a scalar to its best string representation\n\t\t * for hash keys and HTML attribute values.\n\t\t *\n\t\t * Transformations:\n\t\t *   'str'     -> 'str'\n\t\t *   null      -> ''\n\t\t *   undefined -> ''\n\t\t *   true      -> '1'\n\t\t *   false     -> '0'\n\t\t *   0         -> '0'\n\t\t *   1         -> '1'\n\t\t *\n\t\t * @param {string} value\n\t\t * @returns {string|null}\n\t\t */\n\t\tvar hash_key = function(value) {\n\t\t\tif (typeof value === 'undefined' || value === null) return null;\n\t\t\tif (typeof value === 'boolean') return value ? '1' : '0';\n\t\t\treturn value + '';\n\t\t};\n\t\t\n\t\t/**\n\t\t * Escapes a string for use within HTML.\n\t\t *\n\t\t * @param {string} str\n\t\t * @returns {string}\n\t\t */\n\t\tvar escape_html = function(str) {\n\t\t\treturn (str + '')\n\t\t\t\t.replace(/&/g, '&amp;')\n\t\t\t\t.replace(/</g, '&lt;')\n\t\t\t\t.replace(/>/g, '&gt;')\n\t\t\t\t.replace(/\"/g, '&quot;');\n\t\t};\n\t\t\n\t\t/**\n\t\t * Escapes \"$\" characters in replacement strings.\n\t\t *\n\t\t * @param {string} str\n\t\t * @returns {string}\n\t\t */\n\t\tvar escape_replace = function(str) {\n\t\t\treturn (str + '').replace(/\\$/g, '$$$$');\n\t\t};\n\t\t\n\t\tvar hook = {};\n\t\t\n\t\t/**\n\t\t * Wraps `method` on `self` so that `fn`\n\t\t * is invoked before the original method.\n\t\t *\n\t\t * @param {object} self\n\t\t * @param {string} method\n\t\t * @param {function} fn\n\t\t */\n\t\thook.before = function(self, method, fn) {\n\t\t\tvar original = self[method];\n\t\t\tself[method] = function() {\n\t\t\t\tfn.apply(self, arguments);\n\t\t\t\treturn original.apply(self, arguments);\n\t\t\t};\n\t\t};\n\t\t\n\t\t/**\n\t\t * Wraps `method` on `self` so that `fn`\n\t\t * is invoked after the original method.\n\t\t *\n\t\t * @param {object} self\n\t\t * @param {string} method\n\t\t * @param {function} fn\n\t\t */\n\t\thook.after = function(self, method, fn) {\n\t\t\tvar original = self[method];\n\t\t\tself[method] = function() {\n\t\t\t\tvar result = original.apply(self, arguments);\n\t\t\t\tfn.apply(self, arguments);\n\t\t\t\treturn result;\n\t\t\t};\n\t\t};\n\t\t\n\t\t/**\n\t\t * Wraps `fn` so that it can only be invoked once.\n\t\t *\n\t\t * @param {function} fn\n\t\t * @returns {function}\n\t\t */\n\t\tvar once = function(fn) {\n\t\t\tvar called = false;\n\t\t\treturn function() {\n\t\t\t\tif (called) return;\n\t\t\t\tcalled = true;\n\t\t\t\tfn.apply(this, arguments);\n\t\t\t};\n\t\t};\n\t\t\n\t\t/**\n\t\t * Wraps `fn` so that it can only be called once\n\t\t * every `delay` milliseconds (invoked on the falling edge).\n\t\t *\n\t\t * @param {function} fn\n\t\t * @param {int} delay\n\t\t * @returns {function}\n\t\t */\n\t\tvar debounce = function(fn, delay) {\n\t\t\tvar timeout;\n\t\t\treturn function() {\n\t\t\t\tvar self = this;\n\t\t\t\tvar args = arguments;\n\t\t\t\twindow.clearTimeout(timeout);\n\t\t\t\ttimeout = window.setTimeout(function() {\n\t\t\t\t\tfn.apply(self, args);\n\t\t\t\t}, delay);\n\t\t\t};\n\t\t};\n\t\t\n\t\t/**\n\t\t * Debounce all fired events types listed in `types`\n\t\t * while executing the provided `fn`.\n\t\t *\n\t\t * @param {object} self\n\t\t * @param {array} types\n\t\t * @param {function} fn\n\t\t */\n\t\tvar debounce_events = function(self, types, fn) {\n\t\t\tvar type;\n\t\t\tvar trigger = self.trigger;\n\t\t\tvar event_args = {};\n\t\t\n\t\t\t// override trigger method\n\t\t\tself.trigger = function() {\n\t\t\t\tvar type = arguments[0];\n\t\t\t\tif (types.indexOf(type) !== -1) {\n\t\t\t\t\tevent_args[type] = arguments;\n\t\t\t\t} else {\n\t\t\t\t\treturn trigger.apply(self, arguments);\n\t\t\t\t}\n\t\t\t};\n\t\t\n\t\t\t// invoke provided function\n\t\t\tfn.apply(self, []);\n\t\t\tself.trigger = trigger;\n\t\t\n\t\t\t// trigger queued events\n\t\t\tfor (type in event_args) {\n\t\t\t\tif (event_args.hasOwnProperty(type)) {\n\t\t\t\t\ttrigger.apply(self, event_args[type]);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t\n\t\t/**\n\t\t * A workaround for http://bugs.jquery.com/ticket/6696\n\t\t *\n\t\t * @param {object} $parent - Parent element to listen on.\n\t\t * @param {string} event - Event name.\n\t\t * @param {string} selector - Descendant selector to filter by.\n\t\t * @param {function} fn - Event handler.\n\t\t */\n\t\tvar watchChildEvent = function($parent, event, selector, fn) {\n\t\t\t$parent.on(event, selector, function(e) {\n\t\t\t\tvar child = e.target;\n\t\t\t\twhile (child && child.parentNode !== $parent[0]) {\n\t\t\t\t\tchild = child.parentNode;\n\t\t\t\t}\n\t\t\t\te.currentTarget = child;\n\t\t\t\treturn fn.apply(this, [e]);\n\t\t\t});\n\t\t};\n\t\t\n\t\t/**\n\t\t * Determines the current selection within a text input control.\n\t\t * Returns an object containing:\n\t\t *   - start\n\t\t *   - length\n\t\t *\n\t\t * @param {object} input\n\t\t * @returns {object}\n\t\t */\n\t\tvar getSelection = function(input) {\n\t\t\tvar result = {};\n\t\t\tif ('selectionStart' in input) {\n\t\t\t\tresult.start = input.selectionStart;\n\t\t\t\tresult.length = input.selectionEnd - result.start;\n\t\t\t} else if (document.selection) {\n\t\t\t\tinput.focus();\n\t\t\t\tvar sel = document.selection.createRange();\n\t\t\t\tvar selLen = document.selection.createRange().text.length;\n\t\t\t\tsel.moveStart('character', -input.value.length);\n\t\t\t\tresult.start = sel.text.length - selLen;\n\t\t\t\tresult.length = selLen;\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\t\t\n\t\t/**\n\t\t * Copies CSS properties from one element to another.\n\t\t *\n\t\t * @param {object} $from\n\t\t * @param {object} $to\n\t\t * @param {array} properties\n\t\t */\n\t\tvar transferStyles = function($from, $to, properties) {\n\t\t\tvar i, n, styles = {};\n\t\t\tif (properties) {\n\t\t\t\tfor (i = 0, n = properties.length; i < n; i++) {\n\t\t\t\t\tstyles[properties[i]] = $from.css(properties[i]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstyles = $from.css();\n\t\t\t}\n\t\t\t$to.css(styles);\n\t\t};\n\t\t\n\t\t/**\n\t\t * Measures the width of a string within a\n\t\t * parent element (in pixels).\n\t\t *\n\t\t * @param {string} str\n\t\t * @param {object} $parent\n\t\t * @returns {int}\n\t\t */\n\t\tvar measureString = function(str, $parent) {\n\t\t\tif (!str) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\n\t\t\tvar $test = $('<test>').css({\n\t\t\t\tposition: 'absolute',\n\t\t\t\ttop: -99999,\n\t\t\t\tleft: -99999,\n\t\t\t\twidth: 'auto',\n\t\t\t\tpadding: 0,\n\t\t\t\twhiteSpace: 'pre'\n\t\t\t}).text(str).appendTo('body');\n\t\t\n\t\t\ttransferStyles($parent, $test, [\n\t\t\t\t'letterSpacing',\n\t\t\t\t'fontSize',\n\t\t\t\t'fontFamily',\n\t\t\t\t'fontWeight',\n\t\t\t\t'textTransform'\n\t\t\t]);\n\t\t\n\t\t\tvar width = $test.width();\n\t\t\t$test.remove();\n\t\t\n\t\t\treturn width;\n\t\t};\n\t\t\n\t\t/**\n\t\t * Sets up an input to grow horizontally as the user\n\t\t * types. If the value is changed manually, you can\n\t\t * trigger the \"update\" handler to resize:\n\t\t *\n\t\t * $input.trigger('update');\n\t\t *\n\t\t * @param {object} $input\n\t\t */\n\t\tvar autoGrow = function($input) {\n\t\t\tvar currentWidth = null;\n\t\t\n\t\t\tvar update = function(e, options) {\n\t\t\t\tvar value, keyCode, printable, placeholder, width;\n\t\t\t\tvar shift, character, selection;\n\t\t\t\te = e || window.event || {};\n\t\t\t\toptions = options || {};\n\t\t\n\t\t\t\tif (e.metaKey || e.altKey) return;\n\t\t\t\tif (!options.force && $input.data('grow') === false) return;\n\t\t\n\t\t\t\tvalue = $input.val();\n\t\t\t\tif (e.type && e.type.toLowerCase() === 'keydown') {\n\t\t\t\t\tkeyCode = e.keyCode;\n\t\t\t\t\tprintable = (\n\t\t\t\t\t\t(keyCode >= 97 && keyCode <= 122) || // a-z\n\t\t\t\t\t\t(keyCode >= 65 && keyCode <= 90)  || // A-Z\n\t\t\t\t\t\t(keyCode >= 48 && keyCode <= 57)  || // 0-9\n\t\t\t\t\t\tkeyCode === 32 // space\n\t\t\t\t\t);\n\t\t\n\t\t\t\t\tif (keyCode === KEY_DELETE || keyCode === KEY_BACKSPACE) {\n\t\t\t\t\t\tselection = getSelection($input[0]);\n\t\t\t\t\t\tif (selection.length) {\n\t\t\t\t\t\t\tvalue = value.substring(0, selection.start) + value.substring(selection.start + selection.length);\n\t\t\t\t\t\t} else if (keyCode === KEY_BACKSPACE && selection.start) {\n\t\t\t\t\t\t\tvalue = value.substring(0, selection.start - 1) + value.substring(selection.start + 1);\n\t\t\t\t\t\t} else if (keyCode === KEY_DELETE && typeof selection.start !== 'undefined') {\n\t\t\t\t\t\t\tvalue = value.substring(0, selection.start) + value.substring(selection.start + 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (printable) {\n\t\t\t\t\t\tshift = e.shiftKey;\n\t\t\t\t\t\tcharacter = String.fromCharCode(e.keyCode);\n\t\t\t\t\t\tif (shift) character = character.toUpperCase();\n\t\t\t\t\t\telse character = character.toLowerCase();\n\t\t\t\t\t\tvalue += character;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\tplaceholder = $input.attr('placeholder');\n\t\t\t\tif (!value && placeholder) {\n\t\t\t\t\tvalue = placeholder;\n\t\t\t\t}\n\t\t\n\t\t\t\twidth = measureString(value, $input) + 4;\n\t\t\t\tif (width !== currentWidth) {\n\t\t\t\t\tcurrentWidth = width;\n\t\t\t\t\t$input.width(width);\n\t\t\t\t\t$input.triggerHandler('resize');\n\t\t\t\t}\n\t\t\t};\n\t\t\n\t\t\t$input.on('keydown keyup update blur', update);\n\t\t\tupdate();\n\t\t};\n\t\t\n\t\tvar Selectize = function($input, settings) {\n\t\t\tvar key, i, n, dir, input, self = this;\n\t\t\tinput = $input[0];\n\t\t\tinput.selectize = self;\n\t\t\n\t\t\t// detect rtl environment\n\t\t\tvar computedStyle = window.getComputedStyle && window.getComputedStyle(input, null);\n\t\t\tdir = computedStyle ? computedStyle.getPropertyValue('direction') : input.currentStyle && input.currentStyle.direction;\n\t\t\tdir = dir || $input.parents('[dir]:first').attr('dir') || '';\n\t\t\n\t\t\t// setup default state\n\t\t\t$.extend(self, {\n\t\t\t\torder            : 0,\n\t\t\t\tsettings         : settings,\n\t\t\t\t$input           : $input,\n\t\t\t\ttabIndex         : $input.attr('tabindex') || '',\n\t\t\t\ttagType          : input.tagName.toLowerCase() === 'select' ? TAG_SELECT : TAG_INPUT,\n\t\t\t\trtl              : /rtl/i.test(dir),\n\t\t\n\t\t\t\teventNS          : '.selectize' + (++Selectize.count),\n\t\t\t\thighlightedValue : null,\n\t\t\t\tisOpen           : false,\n\t\t\t\tisDisabled       : false,\n\t\t\t\tisRequired       : $input.is('[required]'),\n\t\t\t\tisInvalid        : false,\n\t\t\t\tisLocked         : false,\n\t\t\t\tisFocused        : false,\n\t\t\t\tisInputHidden    : false,\n\t\t\t\tisSetup          : false,\n\t\t\t\tisShiftDown      : false,\n\t\t\t\tisCmdDown        : false,\n\t\t\t\tisCtrlDown       : false,\n\t\t\t\tignoreFocus      : false,\n\t\t\t\tignoreBlur       : false,\n\t\t\t\tignoreHover      : false,\n\t\t\t\thasOptions       : false,\n\t\t\t\tcurrentResults   : null,\n\t\t\t\tlastValue        : '',\n\t\t\t\tcaretPos         : 0,\n\t\t\t\tloading          : 0,\n\t\t\t\tloadedSearches   : {},\n\t\t\n\t\t\t\t$activeOption    : null,\n\t\t\t\t$activeItems     : [],\n\t\t\n\t\t\t\toptgroups        : {},\n\t\t\t\toptions          : {},\n\t\t\t\tuserOptions      : {},\n\t\t\t\titems            : [],\n\t\t\t\trenderCache      : {},\n\t\t\t\tonSearchChange   : settings.loadThrottle === null ? self.onSearchChange : debounce(self.onSearchChange, settings.loadThrottle)\n\t\t\t});\n\t\t\n\t\t\t// search system\n\t\t\tself.sifter = new Sifter(this.options, {diacritics: settings.diacritics});\n\t\t\n\t\t\t// build options table\n\t\t\tif (self.settings.options) {\n\t\t\t\tfor (i = 0, n = self.settings.options.length; i < n; i++) {\n\t\t\t\t\tself.registerOption(self.settings.options[i]);\n\t\t\t\t}\n\t\t\t\tdelete self.settings.options;\n\t\t\t}\n\t\t\n\t\t\t// build optgroup table\n\t\t\tif (self.settings.optgroups) {\n\t\t\t\tfor (i = 0, n = self.settings.optgroups.length; i < n; i++) {\n\t\t\t\t\tself.registerOptionGroup(self.settings.optgroups[i]);\n\t\t\t\t}\n\t\t\t\tdelete self.settings.optgroups;\n\t\t\t}\n\t\t\n\t\t\t// option-dependent defaults\n\t\t\tself.settings.mode = self.settings.mode || (self.settings.maxItems === 1 ? 'single' : 'multi');\n\t\t\tif (typeof self.settings.hideSelected !== 'boolean') {\n\t\t\t\tself.settings.hideSelected = self.settings.mode === 'multi';\n\t\t\t}\n\t\t\n\t\t\tself.initializePlugins(self.settings.plugins);\n\t\t\tself.setupCallbacks();\n\t\t\tself.setupTemplates();\n\t\t\tself.setup();\n\t\t};\n\t\t\n\t\t// mixins\n\t\t// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\t\t\n\t\tMicroEvent.mixin(Selectize);\n\t\tMicroPlugin.mixin(Selectize);\n\t\t\n\t\t// methods\n\t\t// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\t\t\n\t\t$.extend(Selectize.prototype, {\n\t\t\n\t\t\t/**\n\t\t\t * Creates all elements and sets up event bindings.\n\t\t\t */\n\t\t\tsetup: function() {\n\t\t\t\tvar self      = this;\n\t\t\t\tvar settings  = self.settings;\n\t\t\t\tvar eventNS   = self.eventNS;\n\t\t\t\tvar $window   = $(window);\n\t\t\t\tvar $document = $(document);\n\t\t\t\tvar $input    = self.$input;\n\t\t\n\t\t\t\tvar $wrapper;\n\t\t\t\tvar $control;\n\t\t\t\tvar $control_input;\n\t\t\t\tvar $dropdown;\n\t\t\t\tvar $dropdown_content;\n\t\t\t\tvar $dropdown_parent;\n\t\t\t\tvar inputMode;\n\t\t\t\tvar timeout_blur;\n\t\t\t\tvar timeout_focus;\n\t\t\t\tvar classes;\n\t\t\t\tvar classes_plugins;\n\t\t\n\t\t\t\tinputMode         = self.settings.mode;\n\t\t\t\tclasses           = $input.attr('class') || '';\n\t\t\n\t\t\t\t$wrapper          = $('<div>').addClass(settings.wrapperClass).addClass(classes).addClass(inputMode);\n\t\t\t\t$control          = $('<div>').addClass(settings.inputClass).addClass('items').appendTo($wrapper);\n\t\t\t\t$control_input    = $('<input type=\"text\" autocomplete=\"off\" />').appendTo($control).attr('tabindex', $input.is(':disabled') ? '-1' : self.tabIndex);\n\t\t\t\t$dropdown_parent  = $(settings.dropdownParent || $wrapper);\n\t\t\t\t$dropdown         = $('<div>').addClass(settings.dropdownClass).addClass(inputMode).hide().appendTo($dropdown_parent);\n\t\t\t\t$dropdown_content = $('<div>').addClass(settings.dropdownContentClass).appendTo($dropdown);\n\t\t\n\t\t\t\tif(self.settings.copyClassesToDropdown) {\n\t\t\t\t\t$dropdown.addClass(classes);\n\t\t\t\t}\n\t\t\n\t\t\t\t$wrapper.css({\n\t\t\t\t\twidth: $input[0].style.width\n\t\t\t\t});\n\t\t\n\t\t\t\tif (self.plugins.names.length) {\n\t\t\t\t\tclasses_plugins = 'plugin-' + self.plugins.names.join(' plugin-');\n\t\t\t\t\t$wrapper.addClass(classes_plugins);\n\t\t\t\t\t$dropdown.addClass(classes_plugins);\n\t\t\t\t}\n\t\t\n\t\t\t\tif ((settings.maxItems === null || settings.maxItems > 1) && self.tagType === TAG_SELECT) {\n\t\t\t\t\t$input.attr('multiple', 'multiple');\n\t\t\t\t}\n\t\t\n\t\t\t\tif (self.settings.placeholder) {\n\t\t\t\t\t$control_input.attr('placeholder', settings.placeholder);\n\t\t\t\t}\n\t\t\n\t\t\t\t// if splitOn was not passed in, construct it from the delimiter to allow pasting universally\n\t\t\t\tif (!self.settings.splitOn && self.settings.delimiter) {\n\t\t\t\t\tvar delimiterEscaped = self.settings.delimiter.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n\t\t\t\t\tself.settings.splitOn = new RegExp('\\\\s*' + delimiterEscaped + '+\\\\s*');\n\t\t\t\t}\n\t\t\n\t\t\t\tif ($input.attr('autocorrect')) {\n\t\t\t\t\t$control_input.attr('autocorrect', $input.attr('autocorrect'));\n\t\t\t\t}\n\t\t\n\t\t\t\tif ($input.attr('autocapitalize')) {\n\t\t\t\t\t$control_input.attr('autocapitalize', $input.attr('autocapitalize'));\n\t\t\t\t}\n\t\t\n\t\t\t\tself.$wrapper          = $wrapper;\n\t\t\t\tself.$control          = $control;\n\t\t\t\tself.$control_input    = $control_input;\n\t\t\t\tself.$dropdown         = $dropdown;\n\t\t\t\tself.$dropdown_content = $dropdown_content;\n\t\t\n\t\t\t\t$dropdown.on('mouseenter', '[data-selectable]', function() { return self.onOptionHover.apply(self, arguments); });\n\t\t\t\t$dropdown.on('mousedown click', '[data-selectable]', function() { return self.onOptionSelect.apply(self, arguments); });\n\t\t\t\twatchChildEvent($control, 'mousedown', '*:not(input)', function() { return self.onItemSelect.apply(self, arguments); });\n\t\t\t\tautoGrow($control_input);\n\t\t\n\t\t\t\t$control.on({\n\t\t\t\t\tmousedown : function() { return self.onMouseDown.apply(self, arguments); },\n\t\t\t\t\tclick     : function() { return self.onClick.apply(self, arguments); }\n\t\t\t\t});\n\t\t\n\t\t\t\t$control_input.on({\n\t\t\t\t\tmousedown : function(e) { e.stopPropagation(); },\n\t\t\t\t\tkeydown   : function() { return self.onKeyDown.apply(self, arguments); },\n\t\t\t\t\tkeyup     : function() { return self.onKeyUp.apply(self, arguments); },\n\t\t\t\t\tkeypress  : function() { return self.onKeyPress.apply(self, arguments); },\n\t\t\t\t\tresize    : function() { self.positionDropdown.apply(self, []); },\n\t\t\t\t\tblur      : function() { return self.onBlur.apply(self, arguments); },\n\t\t\t\t\tfocus     : function() { self.ignoreBlur = false; return self.onFocus.apply(self, arguments); },\n\t\t\t\t\tpaste     : function() { return self.onPaste.apply(self, arguments); }\n\t\t\t\t});\n\t\t\n\t\t\t\t$document.on('keydown' + eventNS, function(e) {\n\t\t\t\t\tself.isCmdDown = e[IS_MAC ? 'metaKey' : 'ctrlKey'];\n\t\t\t\t\tself.isCtrlDown = e[IS_MAC ? 'altKey' : 'ctrlKey'];\n\t\t\t\t\tself.isShiftDown = e.shiftKey;\n\t\t\t\t});\n\t\t\n\t\t\t\t$document.on('keyup' + eventNS, function(e) {\n\t\t\t\t\tif (e.keyCode === KEY_CTRL) self.isCtrlDown = false;\n\t\t\t\t\tif (e.keyCode === KEY_SHIFT) self.isShiftDown = false;\n\t\t\t\t\tif (e.keyCode === KEY_CMD) self.isCmdDown = false;\n\t\t\t\t});\n\t\t\n\t\t\t\t$document.on('mousedown' + eventNS, function(e) {\n\t\t\t\t\tif (self.isFocused) {\n\t\t\t\t\t\t// prevent events on the dropdown scrollbar from causing the control to blur\n\t\t\t\t\t\tif (e.target === self.$dropdown[0] || e.target.parentNode === self.$dropdown[0]) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// blur on click outside\n\t\t\t\t\t\tif (!self.$control.has(e.target).length && e.target !== self.$control[0]) {\n\t\t\t\t\t\t\tself.blur(e.target);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\n\t\t\t\t$window.on(['scroll' + eventNS, 'resize' + eventNS].join(' '), function() {\n\t\t\t\t\tif (self.isOpen) {\n\t\t\t\t\t\tself.positionDropdown.apply(self, arguments);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t$window.on('mousemove' + eventNS, function() {\n\t\t\t\t\tself.ignoreHover = false;\n\t\t\t\t});\n\t\t\n\t\t\t\t// store original children and tab index so that they can be\n\t\t\t\t// restored when the destroy() method is called.\n\t\t\t\tthis.revertSettings = {\n\t\t\t\t\t$children : $input.children().detach(),\n\t\t\t\t\ttabindex  : $input.attr('tabindex')\n\t\t\t\t};\n\t\t\n\t\t\t\t$input.attr('tabindex', -1).hide().after(self.$wrapper);\n\t\t\n\t\t\t\tif ($.isArray(settings.items)) {\n\t\t\t\t\tself.setValue(settings.items);\n\t\t\t\t\tdelete settings.items;\n\t\t\t\t}\n\t\t\n\t\t\t\t// feature detect for the validation API\n\t\t\t\tif (SUPPORTS_VALIDITY_API) {\n\t\t\t\t\t$input.on('invalid' + eventNS, function(e) {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tself.isInvalid = true;\n\t\t\t\t\t\tself.refreshState();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\n\t\t\t\tself.updateOriginalInput();\n\t\t\t\tself.refreshItems();\n\t\t\t\tself.refreshState();\n\t\t\t\tself.updatePlaceholder();\n\t\t\t\tself.isSetup = true;\n\t\t\n\t\t\t\tif ($input.is(':disabled')) {\n\t\t\t\t\tself.disable();\n\t\t\t\t}\n\t\t\n\t\t\t\tself.on('change', this.onChange);\n\t\t\n\t\t\t\t$input.data('selectize', self);\n\t\t\t\t$input.addClass('selectized');\n\t\t\t\tself.trigger('initialize');\n\t\t\n\t\t\t\t// preload options\n\t\t\t\tif (settings.preload === true) {\n\t\t\t\t\tself.onSearchChange('');\n\t\t\t\t}\n\t\t\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Sets up default rendering functions.\n\t\t\t */\n\t\t\tsetupTemplates: function() {\n\t\t\t\tvar self = this;\n\t\t\t\tvar field_label = self.settings.labelField;\n\t\t\t\tvar field_optgroup = self.settings.optgroupLabelField;\n\t\t\n\t\t\t\tvar templates = {\n\t\t\t\t\t'optgroup': function(data) {\n\t\t\t\t\t\treturn '<div class=\"optgroup\">' + data.html + '</div>';\n\t\t\t\t\t},\n\t\t\t\t\t'optgroup_header': function(data, escape) {\n\t\t\t\t\t\treturn '<div class=\"optgroup-header\">' + escape(data[field_optgroup]) + '</div>';\n\t\t\t\t\t},\n\t\t\t\t\t'option': function(data, escape) {\n\t\t\t\t\t\treturn '<div class=\"option\">' + escape(data[field_label]) + '</div>';\n\t\t\t\t\t},\n\t\t\t\t\t'item': function(data, escape) {\n\t\t\t\t\t\treturn '<div class=\"item\">' + escape(data[field_label]) + '</div>';\n\t\t\t\t\t},\n\t\t\t\t\t'option_create': function(data, escape) {\n\t\t\t\t\t\treturn '<div class=\"create\">Add <strong>' + escape(data.input) + '</strong>&hellip;</div>';\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\n\t\t\t\tself.settings.render = $.extend({}, templates, self.settings.render);\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Maps fired events to callbacks provided\n\t\t\t * in the settings used when creating the control.\n\t\t\t */\n\t\t\tsetupCallbacks: function() {\n\t\t\t\tvar key, fn, callbacks = {\n\t\t\t\t\t'initialize'      : 'onInitialize',\n\t\t\t\t\t'change'          : 'onChange',\n\t\t\t\t\t'item_add'        : 'onItemAdd',\n\t\t\t\t\t'item_remove'     : 'onItemRemove',\n\t\t\t\t\t'clear'           : 'onClear',\n\t\t\t\t\t'option_add'      : 'onOptionAdd',\n\t\t\t\t\t'option_remove'   : 'onOptionRemove',\n\t\t\t\t\t'option_clear'    : 'onOptionClear',\n\t\t\t\t\t'optgroup_add'    : 'onOptionGroupAdd',\n\t\t\t\t\t'optgroup_remove' : 'onOptionGroupRemove',\n\t\t\t\t\t'optgroup_clear'  : 'onOptionGroupClear',\n\t\t\t\t\t'dropdown_open'   : 'onDropdownOpen',\n\t\t\t\t\t'dropdown_close'  : 'onDropdownClose',\n\t\t\t\t\t'type'            : 'onType',\n\t\t\t\t\t'load'            : 'onLoad',\n\t\t\t\t\t'focus'           : 'onFocus',\n\t\t\t\t\t'blur'            : 'onBlur'\n\t\t\t\t};\n\t\t\n\t\t\t\tfor (key in callbacks) {\n\t\t\t\t\tif (callbacks.hasOwnProperty(key)) {\n\t\t\t\t\t\tfn = this.settings[callbacks[key]];\n\t\t\t\t\t\tif (fn) this.on(key, fn);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Triggered when the main control element\n\t\t\t * has a click event.\n\t\t\t *\n\t\t\t * @param {object} e\n\t\t\t * @return {boolean}\n\t\t\t */\n\t\t\tonClick: function(e) {\n\t\t\t\tvar self = this;\n\t\t\n\t\t\t\t// necessary for mobile webkit devices (manual focus triggering\n\t\t\t\t// is ignored unless invoked within a click event)\n\t\t\t\tif (!self.isFocused) {\n\t\t\t\t\tself.focus();\n\t\t\t\t\te.preventDefault();\n\t\t\t\t}\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Triggered when the main control element\n\t\t\t * has a mouse down event.\n\t\t\t *\n\t\t\t * @param {object} e\n\t\t\t * @return {boolean}\n\t\t\t */\n\t\t\tonMouseDown: function(e) {\n\t\t\t\tvar self = this;\n\t\t\t\tvar defaultPrevented = e.isDefaultPrevented();\n\t\t\t\tvar $target = $(e.target);\n\t\t\n\t\t\t\tif (self.isFocused) {\n\t\t\t\t\t// retain focus by preventing native handling. if the\n\t\t\t\t\t// event target is the input it should not be modified.\n\t\t\t\t\t// otherwise, text selection within the input won't work.\n\t\t\t\t\tif (e.target !== self.$control_input[0]) {\n\t\t\t\t\t\tif (self.settings.mode === 'single') {\n\t\t\t\t\t\t\t// toggle dropdown\n\t\t\t\t\t\t\tself.isOpen ? self.close() : self.open();\n\t\t\t\t\t\t} else if (!defaultPrevented) {\n\t\t\t\t\t\t\tself.setActiveItem(null);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// give control focus\n\t\t\t\t\tif (!defaultPrevented) {\n\t\t\t\t\t\twindow.setTimeout(function() {\n\t\t\t\t\t\t\tself.focus();\n\t\t\t\t\t\t}, 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Triggered when the value of the control has been changed.\n\t\t\t * This should propagate the event to the original DOM\n\t\t\t * input / select element.\n\t\t\t */\n\t\t\tonChange: function() {\n\t\t\t\tthis.$input.trigger('change');\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Triggered on <input> paste.\n\t\t\t *\n\t\t\t * @param {object} e\n\t\t\t * @returns {boolean}\n\t\t\t */\n\t\t\tonPaste: function(e) {\n\t\t\t\tvar self = this;\n\t\t\t\tif (self.isFull() || self.isInputHidden || self.isLocked) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t} else {\n\t\t\t\t\t// If a regex or string is included, this will split the pasted\n\t\t\t\t\t// input and create Items for each separate value\n\t\t\t\t\tif (self.settings.splitOn) {\n\t\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\t\tvar splitInput = $.trim(self.$control_input.val() || '').split(self.settings.splitOn);\n\t\t\t\t\t\t\tfor (var i = 0, n = splitInput.length; i < n; i++) {\n\t\t\t\t\t\t\t\tself.createItem(splitInput[i]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Triggered on <input> keypress.\n\t\t\t *\n\t\t\t * @param {object} e\n\t\t\t * @returns {boolean}\n\t\t\t */\n\t\t\tonKeyPress: function(e) {\n\t\t\t\tif (this.isLocked) return e && e.preventDefault();\n\t\t\t\tvar character = String.fromCharCode(e.keyCode || e.which);\n\t\t\t\tif (this.settings.create && this.settings.mode === 'multi' && character === this.settings.delimiter) {\n\t\t\t\t\tthis.createItem();\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Triggered on <input> keydown.\n\t\t\t *\n\t\t\t * @param {object} e\n\t\t\t * @returns {boolean}\n\t\t\t */\n\t\t\tonKeyDown: function(e) {\n\t\t\t\tvar isInput = e.target === this.$control_input[0];\n\t\t\t\tvar self = this;\n\t\t\n\t\t\t\tif (self.isLocked) {\n\t\t\t\t\tif (e.keyCode !== KEY_TAB) {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\n\t\t\t\tswitch (e.keyCode) {\n\t\t\t\t\tcase KEY_A:\n\t\t\t\t\t\tif (self.isCmdDown) {\n\t\t\t\t\t\t\tself.selectAll();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase KEY_ESC:\n\t\t\t\t\t\tif (self.isOpen) {\n\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\t\tself.close();\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase KEY_N:\n\t\t\t\t\t\tif (!e.ctrlKey || e.altKey) break;\n\t\t\t\t\tcase KEY_DOWN:\n\t\t\t\t\t\tif (!self.isOpen && self.hasOptions) {\n\t\t\t\t\t\t\tself.open();\n\t\t\t\t\t\t} else if (self.$activeOption) {\n\t\t\t\t\t\t\tself.ignoreHover = true;\n\t\t\t\t\t\t\tvar $next = self.getAdjacentOption(self.$activeOption, 1);\n\t\t\t\t\t\t\tif ($next.length) self.setActiveOption($next, true, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase KEY_P:\n\t\t\t\t\t\tif (!e.ctrlKey || e.altKey) break;\n\t\t\t\t\tcase KEY_UP:\n\t\t\t\t\t\tif (self.$activeOption) {\n\t\t\t\t\t\t\tself.ignoreHover = true;\n\t\t\t\t\t\t\tvar $prev = self.getAdjacentOption(self.$activeOption, -1);\n\t\t\t\t\t\t\tif ($prev.length) self.setActiveOption($prev, true, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase KEY_RETURN:\n\t\t\t\t\t\tif (self.isOpen && self.$activeOption) {\n\t\t\t\t\t\t\tself.onOptionSelect({currentTarget: self.$activeOption});\n\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase KEY_LEFT:\n\t\t\t\t\t\tself.advanceSelection(-1, e);\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase KEY_RIGHT:\n\t\t\t\t\t\tself.advanceSelection(1, e);\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase KEY_TAB:\n\t\t\t\t\t\tif (self.settings.selectOnTab && self.isOpen && self.$activeOption) {\n\t\t\t\t\t\t\tself.onOptionSelect({currentTarget: self.$activeOption});\n\t\t\n\t\t\t\t\t\t\t// Default behaviour is to jump to the next field, we only want this\n\t\t\t\t\t\t\t// if the current field doesn't accept any more entries\n\t\t\t\t\t\t\tif (!self.isFull()) {\n\t\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (self.settings.create && self.createItem()) {\n\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase KEY_BACKSPACE:\n\t\t\t\t\tcase KEY_DELETE:\n\t\t\t\t\t\tself.deleteSelection(e);\n\t\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\n\t\t\t\tif ((self.isFull() || self.isInputHidden) && !(IS_MAC ? e.metaKey : e.ctrlKey)) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Triggered on <input> keyup.\n\t\t\t *\n\t\t\t * @param {object} e\n\t\t\t * @returns {boolean}\n\t\t\t */\n\t\t\tonKeyUp: function(e) {\n\t\t\t\tvar self = this;\n\t\t\n\t\t\t\tif (self.isLocked) return e && e.preventDefault();\n\t\t\t\tvar value = self.$control_input.val() || '';\n\t\t\t\tif (self.lastValue !== value) {\n\t\t\t\t\tself.lastValue = value;\n\t\t\t\t\tself.onSearchChange(value);\n\t\t\t\t\tself.refreshOptions();\n\t\t\t\t\tself.trigger('type', value);\n\t\t\t\t}\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Invokes the user-provide option provider / loader.\n\t\t\t *\n\t\t\t * Note: this function is debounced in the Selectize\n\t\t\t * constructor (by `settings.loadDelay` milliseconds)\n\t\t\t *\n\t\t\t * @param {string} value\n\t\t\t */\n\t\t\tonSearchChange: function(value) {\n\t\t\t\tvar self = this;\n\t\t\t\tvar fn = self.settings.load;\n\t\t\t\tif (!fn) return;\n\t\t\t\tif (self.loadedSearches.hasOwnProperty(value)) return;\n\t\t\t\tself.loadedSearches[value] = true;\n\t\t\t\tself.load(function(callback) {\n\t\t\t\t\tfn.apply(self, [value, callback]);\n\t\t\t\t});\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Triggered on <input> focus.\n\t\t\t *\n\t\t\t * @param {object} e (optional)\n\t\t\t * @returns {boolean}\n\t\t\t */\n\t\t\tonFocus: function(e) {\n\t\t\t\tvar self = this;\n\t\t\t\tvar wasFocused = self.isFocused;\n\t\t\n\t\t\t\tif (self.isDisabled) {\n\t\t\t\t\tself.blur();\n\t\t\t\t\te && e.preventDefault();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\n\t\t\t\tif (self.ignoreFocus) return;\n\t\t\t\tself.isFocused = true;\n\t\t\t\tif (self.settings.preload === 'focus') self.onSearchChange('');\n\t\t\n\t\t\t\tif (!wasFocused) self.trigger('focus');\n\t\t\n\t\t\t\tif (!self.$activeItems.length) {\n\t\t\t\t\tself.showInput();\n\t\t\t\t\tself.setActiveItem(null);\n\t\t\t\t\tself.refreshOptions(!!self.settings.openOnFocus);\n\t\t\t\t}\n\t\t\n\t\t\t\tself.refreshState();\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Triggered on <input> blur.\n\t\t\t *\n\t\t\t * @param {object} e\n\t\t\t * @param {Element} dest\n\t\t\t */\n\t\t\tonBlur: function(e, dest) {\n\t\t\t\tvar self = this;\n\t\t\t\tif (!self.isFocused) return;\n\t\t\t\tself.isFocused = false;\n\t\t\n\t\t\t\tif (self.ignoreFocus) {\n\t\t\t\t\treturn;\n\t\t\t\t} else if (!self.ignoreBlur && document.activeElement === self.$dropdown_content[0]) {\n\t\t\t\t\t// necessary to prevent IE closing the dropdown when the scrollbar is clicked\n\t\t\t\t\tself.ignoreBlur = true;\n\t\t\t\t\tself.onFocus(e);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\n\t\t\t\tvar deactivate = function() {\n\t\t\t\t\tself.close();\n\t\t\t\t\tself.setTextboxValue('');\n\t\t\t\t\tself.setActiveItem(null);\n\t\t\t\t\tself.setActiveOption(null);\n\t\t\t\t\tself.setCaret(self.items.length);\n\t\t\t\t\tself.refreshState();\n\t\t\n\t\t\t\t\t// IE11 bug: element still marked as active\n\t\t\t\t\t(dest || document.body).focus();\n\t\t\n\t\t\t\t\tself.ignoreFocus = false;\n\t\t\t\t\tself.trigger('blur');\n\t\t\t\t};\n\t\t\n\t\t\t\tself.ignoreFocus = true;\n\t\t\t\tif (self.settings.create && self.settings.createOnBlur) {\n\t\t\t\t\tself.createItem(null, false, deactivate);\n\t\t\t\t} else {\n\t\t\t\t\tdeactivate();\n\t\t\t\t}\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Triggered when the user rolls over\n\t\t\t * an option in the autocomplete dropdown menu.\n\t\t\t *\n\t\t\t * @param {object} e\n\t\t\t * @returns {boolean}\n\t\t\t */\n\t\t\tonOptionHover: function(e) {\n\t\t\t\tif (this.ignoreHover) return;\n\t\t\t\tthis.setActiveOption(e.currentTarget, false);\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Triggered when the user clicks on an option\n\t\t\t * in the autocomplete dropdown menu.\n\t\t\t *\n\t\t\t * @param {object} e\n\t\t\t * @returns {boolean}\n\t\t\t */\n\t\t\tonOptionSelect: function(e) {\n\t\t\t\tvar value, $target, $option, self = this;\n\t\t\n\t\t\t\tif (e.preventDefault) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t}\n\t\t\n\t\t\t\t$target = $(e.currentTarget);\n\t\t\t\tif ($target.hasClass('create')) {\n\t\t\t\t\tself.createItem(null, function() {\n\t\t\t\t\t\tif (self.settings.closeAfterSelect) {\n\t\t\t\t\t\t\tself.close();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tvalue = $target.attr('data-value');\n\t\t\t\t\tif (typeof value !== 'undefined') {\n\t\t\t\t\t\tself.lastQuery = null;\n\t\t\t\t\t\tself.setTextboxValue('');\n\t\t\t\t\t\tself.addItem(value);\n\t\t\t\t\t\tif (self.settings.closeAfterSelect) {\n\t\t\t\t\t\t\tself.close();\n\t\t\t\t\t\t} else if (!self.settings.hideSelected && e.type && /mouse/.test(e.type)) {\n\t\t\t\t\t\t\tself.setActiveOption(self.getOption(value));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Triggered when the user clicks on an item\n\t\t\t * that has been selected.\n\t\t\t *\n\t\t\t * @param {object} e\n\t\t\t * @returns {boolean}\n\t\t\t */\n\t\t\tonItemSelect: function(e) {\n\t\t\t\tvar self = this;\n\t\t\n\t\t\t\tif (self.isLocked) return;\n\t\t\t\tif (self.settings.mode === 'multi') {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tself.setActiveItem(e.currentTarget, e);\n\t\t\t\t}\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Invokes the provided method that provides\n\t\t\t * results to a callback---which are then added\n\t\t\t * as options to the control.\n\t\t\t *\n\t\t\t * @param {function} fn\n\t\t\t */\n\t\t\tload: function(fn) {\n\t\t\t\tvar self = this;\n\t\t\t\tvar $wrapper = self.$wrapper.addClass(self.settings.loadingClass);\n\t\t\n\t\t\t\tself.loading++;\n\t\t\t\tfn.apply(self, [function(results) {\n\t\t\t\t\tself.loading = Math.max(self.loading - 1, 0);\n\t\t\t\t\tif (results && results.length) {\n\t\t\t\t\t\tself.addOption(results);\n\t\t\t\t\t\tself.refreshOptions(self.isFocused && !self.isInputHidden);\n\t\t\t\t\t}\n\t\t\t\t\tif (!self.loading) {\n\t\t\t\t\t\t$wrapper.removeClass(self.settings.loadingClass);\n\t\t\t\t\t}\n\t\t\t\t\tself.trigger('load', results);\n\t\t\t\t}]);\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Sets the input field of the control to the specified value.\n\t\t\t *\n\t\t\t * @param {string} value\n\t\t\t */\n\t\t\tsetTextboxValue: function(value) {\n\t\t\t\tvar $input = this.$control_input;\n\t\t\t\tvar changed = $input.val() !== value;\n\t\t\t\tif (changed) {\n\t\t\t\t\t$input.val(value).triggerHandler('update');\n\t\t\t\t\tthis.lastValue = value;\n\t\t\t\t}\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Returns the value of the control. If multiple items\n\t\t\t * can be selected (e.g. <select multiple>), this returns\n\t\t\t * an array. If only one item can be selected, this\n\t\t\t * returns a string.\n\t\t\t *\n\t\t\t * @returns {mixed}\n\t\t\t */\n\t\t\tgetValue: function() {\n\t\t\t\tif (this.tagType === TAG_SELECT && this.$input.attr('multiple')) {\n\t\t\t\t\treturn this.items;\n\t\t\t\t} else {\n\t\t\t\t\treturn this.items.join(this.settings.delimiter);\n\t\t\t\t}\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Resets the selected items to the given value.\n\t\t\t *\n\t\t\t * @param {mixed} value\n\t\t\t */\n\t\t\tsetValue: function(value, silent) {\n\t\t\t\tvar events = silent ? [] : ['change'];\n\t\t\n\t\t\t\tdebounce_events(this, events, function() {\n\t\t\t\t\tthis.clear(silent);\n\t\t\t\t\tthis.addItems(value, silent);\n\t\t\t\t});\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Sets the selected item.\n\t\t\t *\n\t\t\t * @param {object} $item\n\t\t\t * @param {object} e (optional)\n\t\t\t */\n\t\t\tsetActiveItem: function($item, e) {\n\t\t\t\tvar self = this;\n\t\t\t\tvar eventName;\n\t\t\t\tvar i, idx, begin, end, item, swap;\n\t\t\t\tvar $last;\n\t\t\n\t\t\t\tif (self.settings.mode === 'single') return;\n\t\t\t\t$item = $($item);\n\t\t\n\t\t\t\t// clear the active selection\n\t\t\t\tif (!$item.length) {\n\t\t\t\t\t$(self.$activeItems).removeClass('active');\n\t\t\t\t\tself.$activeItems = [];\n\t\t\t\t\tif (self.isFocused) {\n\t\t\t\t\t\tself.showInput();\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\n\t\t\t\t// modify selection\n\t\t\t\teventName = e && e.type.toLowerCase();\n\t\t\n\t\t\t\tif (eventName === 'mousedown' && self.isShiftDown && self.$activeItems.length) {\n\t\t\t\t\t$last = self.$control.children('.active:last');\n\t\t\t\t\tbegin = Array.prototype.indexOf.apply(self.$control[0].childNodes, [$last[0]]);\n\t\t\t\t\tend   = Array.prototype.indexOf.apply(self.$control[0].childNodes, [$item[0]]);\n\t\t\t\t\tif (begin > end) {\n\t\t\t\t\t\tswap  = begin;\n\t\t\t\t\t\tbegin = end;\n\t\t\t\t\t\tend   = swap;\n\t\t\t\t\t}\n\t\t\t\t\tfor (i = begin; i <= end; i++) {\n\t\t\t\t\t\titem = self.$control[0].childNodes[i];\n\t\t\t\t\t\tif (self.$activeItems.indexOf(item) === -1) {\n\t\t\t\t\t\t\t$(item).addClass('active');\n\t\t\t\t\t\t\tself.$activeItems.push(item);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\te.preventDefault();\n\t\t\t\t} else if ((eventName === 'mousedown' && self.isCtrlDown) || (eventName === 'keydown' && this.isShiftDown)) {\n\t\t\t\t\tif ($item.hasClass('active')) {\n\t\t\t\t\t\tidx = self.$activeItems.indexOf($item[0]);\n\t\t\t\t\t\tself.$activeItems.splice(idx, 1);\n\t\t\t\t\t\t$item.removeClass('active');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.$activeItems.push($item.addClass('active')[0]);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$(self.$activeItems).removeClass('active');\n\t\t\t\t\tself.$activeItems = [$item.addClass('active')[0]];\n\t\t\t\t}\n\t\t\n\t\t\t\t// ensure control has focus\n\t\t\t\tself.hideInput();\n\t\t\t\tif (!this.isFocused) {\n\t\t\t\t\tself.focus();\n\t\t\t\t}\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Sets the selected item in the dropdown menu\n\t\t\t * of available options.\n\t\t\t *\n\t\t\t * @param {object} $object\n\t\t\t * @param {boolean} scroll\n\t\t\t * @param {boolean} animate\n\t\t\t */\n\t\t\tsetActiveOption: function($option, scroll, animate) {\n\t\t\t\tvar height_menu, height_item, y;\n\t\t\t\tvar scroll_top, scroll_bottom;\n\t\t\t\tvar self = this;\n\t\t\n\t\t\t\tif (self.$activeOption) self.$activeOption.removeClass('active');\n\t\t\t\tself.$activeOption = null;\n\t\t\n\t\t\t\t$option = $($option);\n\t\t\t\tif (!$option.length) return;\n\t\t\n\t\t\t\tself.$activeOption = $option.addClass('active');\n\t\t\n\t\t\t\tif (scroll || !isset(scroll)) {\n\t\t\n\t\t\t\t\theight_menu   = self.$dropdown_content.height();\n\t\t\t\t\theight_item   = self.$activeOption.outerHeight(true);\n\t\t\t\t\tscroll        = self.$dropdown_content.scrollTop() || 0;\n\t\t\t\t\ty             = self.$activeOption.offset().top - self.$dropdown_content.offset().top + scroll;\n\t\t\t\t\tscroll_top    = y;\n\t\t\t\t\tscroll_bottom = y - height_menu + height_item;\n\t\t\n\t\t\t\t\tif (y + height_item > height_menu + scroll) {\n\t\t\t\t\t\tself.$dropdown_content.stop().animate({scrollTop: scroll_bottom}, animate ? self.settings.scrollDuration : 0);\n\t\t\t\t\t} else if (y < scroll) {\n\t\t\t\t\t\tself.$dropdown_content.stop().animate({scrollTop: scroll_top}, animate ? self.settings.scrollDuration : 0);\n\t\t\t\t\t}\n\t\t\n\t\t\t\t}\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Selects all items (CTRL + A).\n\t\t\t */\n\t\t\tselectAll: function() {\n\t\t\t\tvar self = this;\n\t\t\t\tif (self.settings.mode === 'single') return;\n\t\t\n\t\t\t\tself.$activeItems = Array.prototype.slice.apply(self.$control.children(':not(input)').addClass('active'));\n\t\t\t\tif (self.$activeItems.length) {\n\t\t\t\t\tself.hideInput();\n\t\t\t\t\tself.close();\n\t\t\t\t}\n\t\t\t\tself.focus();\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Hides the input element out of view, while\n\t\t\t * retaining its focus.\n\t\t\t */\n\t\t\thideInput: function() {\n\t\t\t\tvar self = this;\n\t\t\n\t\t\t\tself.setTextboxValue('');\n\t\t\t\tself.$control_input.css({opacity: 0, position: 'absolute', left: self.rtl ? 10000 : -10000});\n\t\t\t\tself.isInputHidden = true;\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Restores input visibility.\n\t\t\t */\n\t\t\tshowInput: function() {\n\t\t\t\tthis.$control_input.css({opacity: 1, position: 'relative', left: 0});\n\t\t\t\tthis.isInputHidden = false;\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Gives the control focus.\n\t\t\t */\n\t\t\tfocus: function() {\n\t\t\t\tvar self = this;\n\t\t\t\tif (self.isDisabled) return;\n\t\t\n\t\t\t\tself.ignoreFocus = true;\n\t\t\t\tself.$control_input[0].focus();\n\t\t\t\twindow.setTimeout(function() {\n\t\t\t\t\tself.ignoreFocus = false;\n\t\t\t\t\tself.onFocus();\n\t\t\t\t}, 0);\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Forces the control out of focus.\n\t\t\t *\n\t\t\t * @param {Element} dest\n\t\t\t */\n\t\t\tblur: function(dest) {\n\t\t\t\tthis.$control_input[0].blur();\n\t\t\t\tthis.onBlur(null, dest);\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Returns a function that scores an object\n\t\t\t * to show how good of a match it is to the\n\t\t\t * provided query.\n\t\t\t *\n\t\t\t * @param {string} query\n\t\t\t * @param {object} options\n\t\t\t * @return {function}\n\t\t\t */\n\t\t\tgetScoreFunction: function(query) {\n\t\t\t\treturn this.sifter.getScoreFunction(query, this.getSearchOptions());\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Returns search options for sifter (the system\n\t\t\t * for scoring and sorting results).\n\t\t\t *\n\t\t\t * @see https://github.com/brianreavis/sifter.js\n\t\t\t * @return {object}\n\t\t\t */\n\t\t\tgetSearchOptions: function() {\n\t\t\t\tvar settings = this.settings;\n\t\t\t\tvar sort = settings.sortField;\n\t\t\t\tif (typeof sort === 'string') {\n\t\t\t\t\tsort = [{field: sort}];\n\t\t\t\t}\n\t\t\n\t\t\t\treturn {\n\t\t\t\t\tfields      : settings.searchField,\n\t\t\t\t\tconjunction : settings.searchConjunction,\n\t\t\t\t\tsort        : sort\n\t\t\t\t};\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Searches through available options and returns\n\t\t\t * a sorted array of matches.\n\t\t\t *\n\t\t\t * Returns an object containing:\n\t\t\t *\n\t\t\t *   - query {string}\n\t\t\t *   - tokens {array}\n\t\t\t *   - total {int}\n\t\t\t *   - items {array}\n\t\t\t *\n\t\t\t * @param {string} query\n\t\t\t * @returns {object}\n\t\t\t */\n\t\t\tsearch: function(query) {\n\t\t\t\tvar i, value, score, result, calculateScore;\n\t\t\t\tvar self     = this;\n\t\t\t\tvar settings = self.settings;\n\t\t\t\tvar options  = this.getSearchOptions();\n\t\t\n\t\t\t\t// validate user-provided result scoring function\n\t\t\t\tif (settings.score) {\n\t\t\t\t\tcalculateScore = self.settings.score.apply(this, [query]);\n\t\t\t\t\tif (typeof calculateScore !== 'function') {\n\t\t\t\t\t\tthrow new Error('Selectize \"score\" setting must be a function that returns a function');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\t// perform search\n\t\t\t\tif (query !== self.lastQuery) {\n\t\t\t\t\tself.lastQuery = query;\n\t\t\t\t\tresult = self.sifter.search(query, $.extend(options, {score: calculateScore}));\n\t\t\t\t\tself.currentResults = result;\n\t\t\t\t} else {\n\t\t\t\t\tresult = $.extend(true, {}, self.currentResults);\n\t\t\t\t}\n\t\t\n\t\t\t\t// filter out selected items\n\t\t\t\tif (settings.hideSelected) {\n\t\t\t\t\tfor (i = result.items.length - 1; i >= 0; i--) {\n\t\t\t\t\t\tif (self.items.indexOf(hash_key(result.items[i].id)) !== -1) {\n\t\t\t\t\t\t\tresult.items.splice(i, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\treturn result;\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Refreshes the list of available options shown\n\t\t\t * in the autocomplete dropdown menu.\n\t\t\t *\n\t\t\t * @param {boolean} triggerDropdown\n\t\t\t */\n\t\t\trefreshOptions: function(triggerDropdown) {\n\t\t\t\tvar i, j, k, n, groups, groups_order, option, option_html, optgroup, optgroups, html, html_children, has_create_option;\n\t\t\t\tvar $active, $active_before, $create;\n\t\t\n\t\t\t\tif (typeof triggerDropdown === 'undefined') {\n\t\t\t\t\ttriggerDropdown = true;\n\t\t\t\t}\n\t\t\n\t\t\t\tvar self              = this;\n\t\t\t\tvar query             = $.trim(self.$control_input.val());\n\t\t\t\tvar results           = self.search(query);\n\t\t\t\tvar $dropdown_content = self.$dropdown_content;\n\t\t\t\tvar active_before     = self.$activeOption && hash_key(self.$activeOption.attr('data-value'));\n\t\t\n\t\t\t\t// build markup\n\t\t\t\tn = results.items.length;\n\t\t\t\tif (typeof self.settings.maxOptions === 'number') {\n\t\t\t\t\tn = Math.min(n, self.settings.maxOptions);\n\t\t\t\t}\n\t\t\n\t\t\t\t// render and group available options individually\n\t\t\t\tgroups = {};\n\t\t\t\tgroups_order = [];\n\t\t\n\t\t\t\tfor (i = 0; i < n; i++) {\n\t\t\t\t\toption      = self.options[results.items[i].id];\n\t\t\t\t\toption_html = self.render('option', option);\n\t\t\t\t\toptgroup    = option[self.settings.optgroupField] || '';\n\t\t\t\t\toptgroups   = $.isArray(optgroup) ? optgroup : [optgroup];\n\t\t\n\t\t\t\t\tfor (j = 0, k = optgroups && optgroups.length; j < k; j++) {\n\t\t\t\t\t\toptgroup = optgroups[j];\n\t\t\t\t\t\tif (!self.optgroups.hasOwnProperty(optgroup)) {\n\t\t\t\t\t\t\toptgroup = '';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!groups.hasOwnProperty(optgroup)) {\n\t\t\t\t\t\t\tgroups[optgroup] = [];\n\t\t\t\t\t\t\tgroups_order.push(optgroup);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tgroups[optgroup].push(option_html);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\t// sort optgroups\n\t\t\t\tif (this.settings.lockOptgroupOrder) {\n\t\t\t\t\tgroups_order.sort(function(a, b) {\n\t\t\t\t\t\tvar a_order = self.optgroups[a].$order || 0;\n\t\t\t\t\t\tvar b_order = self.optgroups[b].$order || 0;\n\t\t\t\t\t\treturn a_order - b_order;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\n\t\t\t\t// render optgroup headers & join groups\n\t\t\t\thtml = [];\n\t\t\t\tfor (i = 0, n = groups_order.length; i < n; i++) {\n\t\t\t\t\toptgroup = groups_order[i];\n\t\t\t\t\tif (self.optgroups.hasOwnProperty(optgroup) && groups[optgroup].length) {\n\t\t\t\t\t\t// render the optgroup header and options within it,\n\t\t\t\t\t\t// then pass it to the wrapper template\n\t\t\t\t\t\thtml_children = self.render('optgroup_header', self.optgroups[optgroup]) || '';\n\t\t\t\t\t\thtml_children += groups[optgroup].join('');\n\t\t\t\t\t\thtml.push(self.render('optgroup', $.extend({}, self.optgroups[optgroup], {\n\t\t\t\t\t\t\thtml: html_children\n\t\t\t\t\t\t})));\n\t\t\t\t\t} else {\n\t\t\t\t\t\thtml.push(groups[optgroup].join(''));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\t$dropdown_content.html(html.join(''));\n\t\t\n\t\t\t\t// highlight matching terms inline\n\t\t\t\tif (self.settings.highlight && results.query.length && results.tokens.length) {\n\t\t\t\t\tfor (i = 0, n = results.tokens.length; i < n; i++) {\n\t\t\t\t\t\thighlight($dropdown_content, results.tokens[i].regex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\t// add \"selected\" class to selected options\n\t\t\t\tif (!self.settings.hideSelected) {\n\t\t\t\t\tfor (i = 0, n = self.items.length; i < n; i++) {\n\t\t\t\t\t\tself.getOption(self.items[i]).addClass('selected');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\t// add create option\n\t\t\t\thas_create_option = self.canCreate(query);\n\t\t\t\tif (has_create_option) {\n\t\t\t\t\t$dropdown_content.prepend(self.render('option_create', {input: query}));\n\t\t\t\t\t$create = $($dropdown_content[0].childNodes[0]);\n\t\t\t\t}\n\t\t\n\t\t\t\t// activate\n\t\t\t\tself.hasOptions = results.items.length > 0 || has_create_option;\n\t\t\t\tif (self.hasOptions) {\n\t\t\t\t\tif (results.items.length > 0) {\n\t\t\t\t\t\t$active_before = active_before && self.getOption(active_before);\n\t\t\t\t\t\tif ($active_before && $active_before.length) {\n\t\t\t\t\t\t\t$active = $active_before;\n\t\t\t\t\t\t} else if (self.settings.mode === 'single' && self.items.length) {\n\t\t\t\t\t\t\t$active = self.getOption(self.items[0]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!$active || !$active.length) {\n\t\t\t\t\t\t\tif ($create && !self.settings.addPrecedence) {\n\t\t\t\t\t\t\t\t$active = self.getAdjacentOption($create, 1);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$active = $dropdown_content.find('[data-selectable]:first');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$active = $create;\n\t\t\t\t\t}\n\t\t\t\t\tself.setActiveOption($active);\n\t\t\t\t\tif (triggerDropdown && !self.isOpen) { self.open(); }\n\t\t\t\t} else {\n\t\t\t\t\tself.setActiveOption(null);\n\t\t\t\t\tif (triggerDropdown && self.isOpen) { self.close(); }\n\t\t\t\t}\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Adds an available option. If it already exists,\n\t\t\t * nothing will happen. Note: this does not refresh\n\t\t\t * the options list dropdown (use `refreshOptions`\n\t\t\t * for that).\n\t\t\t *\n\t\t\t * Usage:\n\t\t\t *\n\t\t\t *   this.addOption(data)\n\t\t\t *\n\t\t\t * @param {object|array} data\n\t\t\t */\n\t\t\taddOption: function(data) {\n\t\t\t\tvar i, n, value, self = this;\n\t\t\n\t\t\t\tif ($.isArray(data)) {\n\t\t\t\t\tfor (i = 0, n = data.length; i < n; i++) {\n\t\t\t\t\t\tself.addOption(data[i]);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\n\t\t\t\tif (value = self.registerOption(data)) {\n\t\t\t\t\tself.userOptions[value] = true;\n\t\t\t\t\tself.lastQuery = null;\n\t\t\t\t\tself.trigger('option_add', value, data);\n\t\t\t\t}\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Registers an option to the pool of options.\n\t\t\t *\n\t\t\t * @param {object} data\n\t\t\t * @return {boolean|string}\n\t\t\t */\n\t\t\tregisterOption: function(data) {\n\t\t\t\tvar key = hash_key(data[this.settings.valueField]);\n\t\t\t\tif (!key || this.options.hasOwnProperty(key)) return false;\n\t\t\t\tdata.$order = data.$order || ++this.order;\n\t\t\t\tthis.options[key] = data;\n\t\t\t\treturn key;\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Registers an option group to the pool of option groups.\n\t\t\t *\n\t\t\t * @param {object} data\n\t\t\t * @return {boolean|string}\n\t\t\t */\n\t\t\tregisterOptionGroup: function(data) {\n\t\t\t\tvar key = hash_key(data[this.settings.optgroupValueField]);\n\t\t\t\tif (!key) return false;\n\t\t\n\t\t\t\tdata.$order = data.$order || ++this.order;\n\t\t\t\tthis.optgroups[key] = data;\n\t\t\t\treturn key;\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Registers a new optgroup for options\n\t\t\t * to be bucketed into.\n\t\t\t *\n\t\t\t * @param {string} id\n\t\t\t * @param {object} data\n\t\t\t */\n\t\t\taddOptionGroup: function(id, data) {\n\t\t\t\tdata[this.settings.optgroupValueField] = id;\n\t\t\t\tif (id = this.registerOptionGroup(data)) {\n\t\t\t\t\tthis.trigger('optgroup_add', id, data);\n\t\t\t\t}\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Removes an existing option group.\n\t\t\t *\n\t\t\t * @param {string} id\n\t\t\t */\n\t\t\tremoveOptionGroup: function(id) {\n\t\t\t\tif (this.optgroups.hasOwnProperty(id)) {\n\t\t\t\t\tdelete this.optgroups[id];\n\t\t\t\t\tthis.renderCache = {};\n\t\t\t\t\tthis.trigger('optgroup_remove', id);\n\t\t\t\t}\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Clears all existing option groups.\n\t\t\t */\n\t\t\tclearOptionGroups: function() {\n\t\t\t\tthis.optgroups = {};\n\t\t\t\tthis.renderCache = {};\n\t\t\t\tthis.trigger('optgroup_clear');\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Updates an option available for selection. If\n\t\t\t * it is visible in the selected items or options\n\t\t\t * dropdown, it will be re-rendered automatically.\n\t\t\t *\n\t\t\t * @param {string} value\n\t\t\t * @param {object} data\n\t\t\t */\n\t\t\tupdateOption: function(value, data) {\n\t\t\t\tvar self = this;\n\t\t\t\tvar $item, $item_new;\n\t\t\t\tvar value_new, index_item, cache_items, cache_options, order_old;\n\t\t\n\t\t\t\tvalue     = hash_key(value);\n\t\t\t\tvalue_new = hash_key(data[self.settings.valueField]);\n\t\t\n\t\t\t\t// sanity checks\n\t\t\t\tif (value === null) return;\n\t\t\t\tif (!self.options.hasOwnProperty(value)) return;\n\t\t\t\tif (typeof value_new !== 'string') throw new Error('Value must be set in option data');\n\t\t\n\t\t\t\torder_old = self.options[value].$order;\n\t\t\n\t\t\t\t// update references\n\t\t\t\tif (value_new !== value) {\n\t\t\t\t\tdelete self.options[value];\n\t\t\t\t\tindex_item = self.items.indexOf(value);\n\t\t\t\t\tif (index_item !== -1) {\n\t\t\t\t\t\tself.items.splice(index_item, 1, value_new);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdata.$order = data.$order || order_old;\n\t\t\t\tself.options[value_new] = data;\n\t\t\n\t\t\t\t// invalidate render cache\n\t\t\t\tcache_items = self.renderCache['item'];\n\t\t\t\tcache_options = self.renderCache['option'];\n\t\t\n\t\t\t\tif (cache_items) {\n\t\t\t\t\tdelete cache_items[value];\n\t\t\t\t\tdelete cache_items[value_new];\n\t\t\t\t}\n\t\t\t\tif (cache_options) {\n\t\t\t\t\tdelete cache_options[value];\n\t\t\t\t\tdelete cache_options[value_new];\n\t\t\t\t}\n\t\t\n\t\t\t\t// update the item if it's selected\n\t\t\t\tif (self.items.indexOf(value_new) !== -1) {\n\t\t\t\t\t$item = self.getItem(value);\n\t\t\t\t\t$item_new = $(self.render('item', data));\n\t\t\t\t\tif ($item.hasClass('active')) $item_new.addClass('active');\n\t\t\t\t\t$item.replaceWith($item_new);\n\t\t\t\t}\n\t\t\n\t\t\t\t// invalidate last query because we might have updated the sortField\n\t\t\t\tself.lastQuery = null;\n\t\t\n\t\t\t\t// update dropdown contents\n\t\t\t\tif (self.isOpen) {\n\t\t\t\t\tself.refreshOptions(false);\n\t\t\t\t}\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Removes a single option.\n\t\t\t *\n\t\t\t * @param {string} value\n\t\t\t * @param {boolean} silent\n\t\t\t */\n\t\t\tremoveOption: function(value, silent) {\n\t\t\t\tvar self = this;\n\t\t\t\tvalue = hash_key(value);\n\t\t\n\t\t\t\tvar cache_items = self.renderCache['item'];\n\t\t\t\tvar cache_options = self.renderCache['option'];\n\t\t\t\tif (cache_items) delete cache_items[value];\n\t\t\t\tif (cache_options) delete cache_options[value];\n\t\t\n\t\t\t\tdelete self.userOptions[value];\n\t\t\t\tdelete self.options[value];\n\t\t\t\tself.lastQuery = null;\n\t\t\t\tself.trigger('option_remove', value);\n\t\t\t\tself.removeItem(value, silent);\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Clears all options.\n\t\t\t */\n\t\t\tclearOptions: function() {\n\t\t\t\tvar self = this;\n\t\t\n\t\t\t\tself.loadedSearches = {};\n\t\t\t\tself.userOptions = {};\n\t\t\t\tself.renderCache = {};\n\t\t\t\tself.options = self.sifter.items = {};\n\t\t\t\tself.lastQuery = null;\n\t\t\t\tself.trigger('option_clear');\n\t\t\t\tself.clear();\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Returns the jQuery element of the option\n\t\t\t * matching the given value.\n\t\t\t *\n\t\t\t * @param {string} value\n\t\t\t * @returns {object}\n\t\t\t */\n\t\t\tgetOption: function(value) {\n\t\t\t\treturn this.getElementWithValue(value, this.$dropdown_content.find('[data-selectable]'));\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Returns the jQuery element of the next or\n\t\t\t * previous selectable option.\n\t\t\t *\n\t\t\t * @param {object} $option\n\t\t\t * @param {int} direction  can be 1 for next or -1 for previous\n\t\t\t * @return {object}\n\t\t\t */\n\t\t\tgetAdjacentOption: function($option, direction) {\n\t\t\t\tvar $options = this.$dropdown.find('[data-selectable]');\n\t\t\t\tvar index    = $options.index($option) + direction;\n\t\t\n\t\t\t\treturn index >= 0 && index < $options.length ? $options.eq(index) : $();\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Finds the first element with a \"data-value\" attribute\n\t\t\t * that matches the given value.\n\t\t\t *\n\t\t\t * @param {mixed} value\n\t\t\t * @param {object} $els\n\t\t\t * @return {object}\n\t\t\t */\n\t\t\tgetElementWithValue: function(value, $els) {\n\t\t\t\tvalue = hash_key(value);\n\t\t\n\t\t\t\tif (typeof value !== 'undefined' && value !== null) {\n\t\t\t\t\tfor (var i = 0, n = $els.length; i < n; i++) {\n\t\t\t\t\t\tif ($els[i].getAttribute('data-value') === value) {\n\t\t\t\t\t\t\treturn $($els[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\treturn $();\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Returns the jQuery element of the item\n\t\t\t * matching the given value.\n\t\t\t *\n\t\t\t * @param {string} value\n\t\t\t * @returns {object}\n\t\t\t */\n\t\t\tgetItem: function(value) {\n\t\t\t\treturn this.getElementWithValue(value, this.$control.children());\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * \"Selects\" multiple items at once. Adds them to the list\n\t\t\t * at the current caret position.\n\t\t\t *\n\t\t\t * @param {string} value\n\t\t\t * @param {boolean} silent\n\t\t\t */\n\t\t\taddItems: function(values, silent) {\n\t\t\t\tvar items = $.isArray(values) ? values : [values];\n\t\t\t\tfor (var i = 0, n = items.length; i < n; i++) {\n\t\t\t\t\tthis.isPending = (i < n - 1);\n\t\t\t\t\tthis.addItem(items[i], silent);\n\t\t\t\t}\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * \"Selects\" an item. Adds it to the list\n\t\t\t * at the current caret position.\n\t\t\t *\n\t\t\t * @param {string} value\n\t\t\t * @param {boolean} silent\n\t\t\t */\n\t\t\taddItem: function(value, silent) {\n\t\t\t\tvar events = silent ? [] : ['change'];\n\t\t\n\t\t\t\tdebounce_events(this, events, function() {\n\t\t\t\t\tvar $item, $option, $options;\n\t\t\t\t\tvar self = this;\n\t\t\t\t\tvar inputMode = self.settings.mode;\n\t\t\t\t\tvar i, active, value_next, wasFull;\n\t\t\t\t\tvalue = hash_key(value);\n\t\t\n\t\t\t\t\tif (self.items.indexOf(value) !== -1) {\n\t\t\t\t\t\tif (inputMode === 'single') self.close();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\tif (!self.options.hasOwnProperty(value)) return;\n\t\t\t\t\tif (inputMode === 'single') self.clear(silent);\n\t\t\t\t\tif (inputMode === 'multi' && self.isFull()) return;\n\t\t\n\t\t\t\t\t$item = $(self.render('item', self.options[value]));\n\t\t\t\t\twasFull = self.isFull();\n\t\t\t\t\tself.items.splice(self.caretPos, 0, value);\n\t\t\t\t\tself.insertAtCaret($item);\n\t\t\t\t\tif (!self.isPending || (!wasFull && self.isFull())) {\n\t\t\t\t\t\tself.refreshState();\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\tif (self.isSetup) {\n\t\t\t\t\t\t$options = self.$dropdown_content.find('[data-selectable]');\n\t\t\n\t\t\t\t\t\t// update menu / remove the option (if this is not one item being added as part of series)\n\t\t\t\t\t\tif (!self.isPending) {\n\t\t\t\t\t\t\t$option = self.getOption(value);\n\t\t\t\t\t\t\tvalue_next = self.getAdjacentOption($option, 1).attr('data-value');\n\t\t\t\t\t\t\tself.refreshOptions(self.isFocused && inputMode !== 'single');\n\t\t\t\t\t\t\tif (value_next) {\n\t\t\t\t\t\t\t\tself.setActiveOption(self.getOption(value_next));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\t// hide the menu if the maximum number of items have been selected or no options are left\n\t\t\t\t\t\tif (!$options.length || self.isFull()) {\n\t\t\t\t\t\t\tself.close();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tself.positionDropdown();\n\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\tself.updatePlaceholder();\n\t\t\t\t\t\tself.trigger('item_add', value, $item);\n\t\t\t\t\t\tself.updateOriginalInput({silent: silent});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Removes the selected item matching\n\t\t\t * the provided value.\n\t\t\t *\n\t\t\t * @param {string} value\n\t\t\t */\n\t\t\tremoveItem: function(value, silent) {\n\t\t\t\tvar self = this;\n\t\t\t\tvar $item, i, idx;\n\t\t\n\t\t\t\t$item = (typeof value === 'object') ? value : self.getItem(value);\n\t\t\t\tvalue = hash_key($item.attr('data-value'));\n\t\t\t\ti = self.items.indexOf(value);\n\t\t\n\t\t\t\tif (i !== -1) {\n\t\t\t\t\t$item.remove();\n\t\t\t\t\tif ($item.hasClass('active')) {\n\t\t\t\t\t\tidx = self.$activeItems.indexOf($item[0]);\n\t\t\t\t\t\tself.$activeItems.splice(idx, 1);\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\tself.items.splice(i, 1);\n\t\t\t\t\tself.lastQuery = null;\n\t\t\t\t\tif (!self.settings.persist && self.userOptions.hasOwnProperty(value)) {\n\t\t\t\t\t\tself.removeOption(value, silent);\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\tif (i < self.caretPos) {\n\t\t\t\t\t\tself.setCaret(self.caretPos - 1);\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\tself.refreshState();\n\t\t\t\t\tself.updatePlaceholder();\n\t\t\t\t\tself.updateOriginalInput({silent: silent});\n\t\t\t\t\tself.positionDropdown();\n\t\t\t\t\tself.trigger('item_remove', value, $item);\n\t\t\t\t}\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Invokes the `create` method provided in the\n\t\t\t * selectize options that should provide the data\n\t\t\t * for the new item, given the user input.\n\t\t\t *\n\t\t\t * Once this completes, it will be added\n\t\t\t * to the item list.\n\t\t\t *\n\t\t\t * @param {string} value\n\t\t\t * @param {boolean} [triggerDropdown]\n\t\t\t * @param {function} [callback]\n\t\t\t * @return {boolean}\n\t\t\t */\n\t\t\tcreateItem: function(input, triggerDropdown) {\n\t\t\t\tvar self  = this;\n\t\t\t\tvar caret = self.caretPos;\n\t\t\t\tinput = input || $.trim(self.$control_input.val() || '');\n\t\t\n\t\t\t\tvar callback = arguments[arguments.length - 1];\n\t\t\t\tif (typeof callback !== 'function') callback = function() {};\n\t\t\n\t\t\t\tif (typeof triggerDropdown !== 'boolean') {\n\t\t\t\t\ttriggerDropdown = true;\n\t\t\t\t}\n\t\t\n\t\t\t\tif (!self.canCreate(input)) {\n\t\t\t\t\tcallback();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\n\t\t\t\tself.lock();\n\t\t\n\t\t\t\tvar setup = (typeof self.settings.create === 'function') ? this.settings.create : function(input) {\n\t\t\t\t\tvar data = {};\n\t\t\t\t\tdata[self.settings.labelField] = input;\n\t\t\t\t\tdata[self.settings.valueField] = input;\n\t\t\t\t\treturn data;\n\t\t\t\t};\n\t\t\n\t\t\t\tvar create = once(function(data) {\n\t\t\t\t\tself.unlock();\n\t\t\n\t\t\t\t\tif (!data || typeof data !== 'object') return callback();\n\t\t\t\t\tvar value = hash_key(data[self.settings.valueField]);\n\t\t\t\t\tif (typeof value !== 'string') return callback();\n\t\t\n\t\t\t\t\tself.setTextboxValue('');\n\t\t\t\t\tself.addOption(data);\n\t\t\t\t\tself.setCaret(caret);\n\t\t\t\t\tself.addItem(value);\n\t\t\t\t\tself.refreshOptions(triggerDropdown && self.settings.mode !== 'single');\n\t\t\t\t\tcallback(data);\n\t\t\t\t});\n\t\t\n\t\t\t\tvar output = setup.apply(this, [input, create]);\n\t\t\t\tif (typeof output !== 'undefined') {\n\t\t\t\t\tcreate(output);\n\t\t\t\t}\n\t\t\n\t\t\t\treturn true;\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Re-renders the selected item lists.\n\t\t\t */\n\t\t\trefreshItems: function() {\n\t\t\t\tthis.lastQuery = null;\n\t\t\n\t\t\t\tif (this.isSetup) {\n\t\t\t\t\tthis.addItem(this.items);\n\t\t\t\t}\n\t\t\n\t\t\t\tthis.refreshState();\n\t\t\t\tthis.updateOriginalInput();\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Updates all state-dependent attributes\n\t\t\t * and CSS classes.\n\t\t\t */\n\t\t\trefreshState: function() {\n\t\t\t\tvar invalid, self = this;\n\t\t\t\tif (self.isRequired) {\n\t\t\t\t\tif (self.items.length) self.isInvalid = false;\n\t\t\t\t\tself.$control_input.prop('required', invalid);\n\t\t\t\t}\n\t\t\t\tself.refreshClasses();\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Updates all state-dependent CSS classes.\n\t\t\t */\n\t\t\trefreshClasses: function() {\n\t\t\t\tvar self     = this;\n\t\t\t\tvar isFull   = self.isFull();\n\t\t\t\tvar isLocked = self.isLocked;\n\t\t\n\t\t\t\tself.$wrapper\n\t\t\t\t\t.toggleClass('rtl', self.rtl);\n\t\t\n\t\t\t\tself.$control\n\t\t\t\t\t.toggleClass('focus', self.isFocused)\n\t\t\t\t\t.toggleClass('disabled', self.isDisabled)\n\t\t\t\t\t.toggleClass('required', self.isRequired)\n\t\t\t\t\t.toggleClass('invalid', self.isInvalid)\n\t\t\t\t\t.toggleClass('locked', isLocked)\n\t\t\t\t\t.toggleClass('full', isFull).toggleClass('not-full', !isFull)\n\t\t\t\t\t.toggleClass('input-active', self.isFocused && !self.isInputHidden)\n\t\t\t\t\t.toggleClass('dropdown-active', self.isOpen)\n\t\t\t\t\t.toggleClass('has-options', !$.isEmptyObject(self.options))\n\t\t\t\t\t.toggleClass('has-items', self.items.length > 0);\n\t\t\n\t\t\t\tself.$control_input.data('grow', !isFull && !isLocked);\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Determines whether or not more items can be added\n\t\t\t * to the control without exceeding the user-defined maximum.\n\t\t\t *\n\t\t\t * @returns {boolean}\n\t\t\t */\n\t\t\tisFull: function() {\n\t\t\t\treturn this.settings.maxItems !== null && this.items.length >= this.settings.maxItems;\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Refreshes the original <select> or <input>\n\t\t\t * element to reflect the current state.\n\t\t\t */\n\t\t\tupdateOriginalInput: function(opts) {\n\t\t\t\tvar i, n, options, label, self = this;\n\t\t\t\topts = opts || {};\n\t\t\n\t\t\t\tif (self.tagType === TAG_SELECT) {\n\t\t\t\t\toptions = [];\n\t\t\t\t\tfor (i = 0, n = self.items.length; i < n; i++) {\n\t\t\t\t\t\tlabel = self.options[self.items[i]][self.settings.labelField] || '';\n\t\t\t\t\t\toptions.push('<option value=\"' + escape_html(self.items[i]) + '\" selected=\"selected\">' + escape_html(label) + '</option>');\n\t\t\t\t\t}\n\t\t\t\t\tif (!options.length && !this.$input.attr('multiple')) {\n\t\t\t\t\t\toptions.push('<option value=\"\" selected=\"selected\"></option>');\n\t\t\t\t\t}\n\t\t\t\t\tself.$input.html(options.join(''));\n\t\t\t\t} else {\n\t\t\t\t\tself.$input.val(self.getValue());\n\t\t\t\t\tself.$input.attr('value',self.$input.val());\n\t\t\t\t}\n\t\t\n\t\t\t\tif (self.isSetup) {\n\t\t\t\t\tif (!opts.silent) {\n\t\t\t\t\t\tself.trigger('change', self.$input.val());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Shows/hide the input placeholder depending\n\t\t\t * on if there items in the list already.\n\t\t\t */\n\t\t\tupdatePlaceholder: function() {\n\t\t\t\tif (!this.settings.placeholder) return;\n\t\t\t\tvar $input = this.$control_input;\n\t\t\n\t\t\t\tif (this.items.length) {\n\t\t\t\t\t$input.removeAttr('placeholder');\n\t\t\t\t} else {\n\t\t\t\t\t$input.attr('placeholder', this.settings.placeholder);\n\t\t\t\t}\n\t\t\t\t$input.triggerHandler('update', {force: true});\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Shows the autocomplete dropdown containing\n\t\t\t * the available options.\n\t\t\t */\n\t\t\topen: function() {\n\t\t\t\tvar self = this;\n\t\t\n\t\t\t\tif (self.isLocked || self.isOpen || (self.settings.mode === 'multi' && self.isFull())) return;\n\t\t\t\tself.focus();\n\t\t\t\tself.isOpen = true;\n\t\t\t\tself.refreshState();\n\t\t\t\tself.$dropdown.css({visibility: 'hidden', display: 'block'});\n\t\t\t\tself.positionDropdown();\n\t\t\t\tself.$dropdown.css({visibility: 'visible'});\n\t\t\t\tself.trigger('dropdown_open', self.$dropdown);\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Closes the autocomplete dropdown menu.\n\t\t\t */\n\t\t\tclose: function() {\n\t\t\t\tvar self = this;\n\t\t\t\tvar trigger = self.isOpen;\n\t\t\n\t\t\t\tif (self.settings.mode === 'single' && self.items.length) {\n\t\t\t\t\tself.hideInput();\n\t\t\t\t}\n\t\t\n\t\t\t\tself.isOpen = false;\n\t\t\t\tself.$dropdown.hide();\n\t\t\t\tself.setActiveOption(null);\n\t\t\t\tself.refreshState();\n\t\t\n\t\t\t\tif (trigger) self.trigger('dropdown_close', self.$dropdown);\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Calculates and applies the appropriate\n\t\t\t * position of the dropdown.\n\t\t\t */\n\t\t\tpositionDropdown: function() {\n\t\t\t\tvar $control = this.$control;\n\t\t\t\tvar offset = this.settings.dropdownParent === 'body' ? $control.offset() : $control.position();\n\t\t\t\toffset.top += $control.outerHeight(true);\n\t\t\n\t\t\t\tthis.$dropdown.css({\n\t\t\t\t\twidth : $control.outerWidth(),\n\t\t\t\t\ttop   : offset.top,\n\t\t\t\t\tleft  : offset.left\n\t\t\t\t});\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Resets / clears all selected items\n\t\t\t * from the control.\n\t\t\t *\n\t\t\t * @param {boolean} silent\n\t\t\t */\n\t\t\tclear: function(silent) {\n\t\t\t\tvar self = this;\n\t\t\n\t\t\t\tif (!self.items.length) return;\n\t\t\t\tself.$control.children(':not(input)').remove();\n\t\t\t\tself.items = [];\n\t\t\t\tself.lastQuery = null;\n\t\t\t\tself.setCaret(0);\n\t\t\t\tself.setActiveItem(null);\n\t\t\t\tself.updatePlaceholder();\n\t\t\t\tself.updateOriginalInput({silent: silent});\n\t\t\t\tself.refreshState();\n\t\t\t\tself.showInput();\n\t\t\t\tself.trigger('clear');\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * A helper method for inserting an element\n\t\t\t * at the current caret position.\n\t\t\t *\n\t\t\t * @param {object} $el\n\t\t\t */\n\t\t\tinsertAtCaret: function($el) {\n\t\t\t\tvar caret = Math.min(this.caretPos, this.items.length);\n\t\t\t\tif (caret === 0) {\n\t\t\t\t\tthis.$control.prepend($el);\n\t\t\t\t} else {\n\t\t\t\t\t$(this.$control[0].childNodes[caret]).before($el);\n\t\t\t\t}\n\t\t\t\tthis.setCaret(caret + 1);\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Removes the current selected item(s).\n\t\t\t *\n\t\t\t * @param {object} e (optional)\n\t\t\t * @returns {boolean}\n\t\t\t */\n\t\t\tdeleteSelection: function(e) {\n\t\t\t\tvar i, n, direction, selection, values, caret, option_select, $option_select, $tail;\n\t\t\t\tvar self = this;\n\t\t\n\t\t\t\tdirection = (e && e.keyCode === KEY_BACKSPACE) ? -1 : 1;\n\t\t\t\tselection = getSelection(self.$control_input[0]);\n\t\t\n\t\t\t\tif (self.$activeOption && !self.settings.hideSelected) {\n\t\t\t\t\toption_select = self.getAdjacentOption(self.$activeOption, -1).attr('data-value');\n\t\t\t\t}\n\t\t\n\t\t\t\t// determine items that will be removed\n\t\t\t\tvalues = [];\n\t\t\n\t\t\t\tif (self.$activeItems.length) {\n\t\t\t\t\t$tail = self.$control.children('.active:' + (direction > 0 ? 'last' : 'first'));\n\t\t\t\t\tcaret = self.$control.children(':not(input)').index($tail);\n\t\t\t\t\tif (direction > 0) { caret++; }\n\t\t\n\t\t\t\t\tfor (i = 0, n = self.$activeItems.length; i < n; i++) {\n\t\t\t\t\t\tvalues.push($(self.$activeItems[i]).attr('data-value'));\n\t\t\t\t\t}\n\t\t\t\t\tif (e) {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t}\n\t\t\t\t} else if ((self.isFocused || self.settings.mode === 'single') && self.items.length) {\n\t\t\t\t\tif (direction < 0 && selection.start === 0 && selection.length === 0) {\n\t\t\t\t\t\tvalues.push(self.items[self.caretPos - 1]);\n\t\t\t\t\t} else if (direction > 0 && selection.start === self.$control_input.val().length) {\n\t\t\t\t\t\tvalues.push(self.items[self.caretPos]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\t// allow the callback to abort\n\t\t\t\tif (!values.length || (typeof self.settings.onDelete === 'function' && self.settings.onDelete.apply(self, [values]) === false)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\n\t\t\t\t// perform removal\n\t\t\t\tif (typeof caret !== 'undefined') {\n\t\t\t\t\tself.setCaret(caret);\n\t\t\t\t}\n\t\t\t\twhile (values.length) {\n\t\t\t\t\tself.removeItem(values.pop());\n\t\t\t\t}\n\t\t\n\t\t\t\tself.showInput();\n\t\t\t\tself.positionDropdown();\n\t\t\t\tself.refreshOptions(true);\n\t\t\n\t\t\t\t// select previous option\n\t\t\t\tif (option_select) {\n\t\t\t\t\t$option_select = self.getOption(option_select);\n\t\t\t\t\tif ($option_select.length) {\n\t\t\t\t\t\tself.setActiveOption($option_select);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\treturn true;\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Selects the previous / next item (depending\n\t\t\t * on the `direction` argument).\n\t\t\t *\n\t\t\t * > 0 - right\n\t\t\t * < 0 - left\n\t\t\t *\n\t\t\t * @param {int} direction\n\t\t\t * @param {object} e (optional)\n\t\t\t */\n\t\t\tadvanceSelection: function(direction, e) {\n\t\t\t\tvar tail, selection, idx, valueLength, cursorAtEdge, $tail;\n\t\t\t\tvar self = this;\n\t\t\n\t\t\t\tif (direction === 0) return;\n\t\t\t\tif (self.rtl) direction *= -1;\n\t\t\n\t\t\t\ttail = direction > 0 ? 'last' : 'first';\n\t\t\t\tselection = getSelection(self.$control_input[0]);\n\t\t\n\t\t\t\tif (self.isFocused && !self.isInputHidden) {\n\t\t\t\t\tvalueLength = self.$control_input.val().length;\n\t\t\t\t\tcursorAtEdge = direction < 0\n\t\t\t\t\t\t? selection.start === 0 && selection.length === 0\n\t\t\t\t\t\t: selection.start === valueLength;\n\t\t\n\t\t\t\t\tif (cursorAtEdge && !valueLength) {\n\t\t\t\t\t\tself.advanceCaret(direction, e);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$tail = self.$control.children('.active:' + tail);\n\t\t\t\t\tif ($tail.length) {\n\t\t\t\t\t\tidx = self.$control.children(':not(input)').index($tail);\n\t\t\t\t\t\tself.setActiveItem(null);\n\t\t\t\t\t\tself.setCaret(direction > 0 ? idx + 1 : idx);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Moves the caret left / right.\n\t\t\t *\n\t\t\t * @param {int} direction\n\t\t\t * @param {object} e (optional)\n\t\t\t */\n\t\t\tadvanceCaret: function(direction, e) {\n\t\t\t\tvar self = this, fn, $adj;\n\t\t\n\t\t\t\tif (direction === 0) return;\n\t\t\n\t\t\t\tfn = direction > 0 ? 'next' : 'prev';\n\t\t\t\tif (self.isShiftDown) {\n\t\t\t\t\t$adj = self.$control_input[fn]();\n\t\t\t\t\tif ($adj.length) {\n\t\t\t\t\t\tself.hideInput();\n\t\t\t\t\t\tself.setActiveItem($adj);\n\t\t\t\t\t\te && e.preventDefault();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tself.setCaret(self.caretPos + direction);\n\t\t\t\t}\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Moves the caret to the specified index.\n\t\t\t *\n\t\t\t * @param {int} i\n\t\t\t */\n\t\t\tsetCaret: function(i) {\n\t\t\t\tvar self = this;\n\t\t\n\t\t\t\tif (self.settings.mode === 'single') {\n\t\t\t\t\ti = self.items.length;\n\t\t\t\t} else {\n\t\t\t\t\ti = Math.max(0, Math.min(self.items.length, i));\n\t\t\t\t}\n\t\t\n\t\t\t\tif(!self.isPending) {\n\t\t\t\t\t// the input must be moved by leaving it in place and moving the\n\t\t\t\t\t// siblings, due to the fact that focus cannot be restored once lost\n\t\t\t\t\t// on mobile webkit devices\n\t\t\t\t\tvar j, n, fn, $children, $child;\n\t\t\t\t\t$children = self.$control.children(':not(input)');\n\t\t\t\t\tfor (j = 0, n = $children.length; j < n; j++) {\n\t\t\t\t\t\t$child = $($children[j]).detach();\n\t\t\t\t\t\tif (j <  i) {\n\t\t\t\t\t\t\tself.$control_input.before($child);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tself.$control.append($child);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\tself.caretPos = i;\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Disables user input on the control. Used while\n\t\t\t * items are being asynchronously created.\n\t\t\t */\n\t\t\tlock: function() {\n\t\t\t\tthis.close();\n\t\t\t\tthis.isLocked = true;\n\t\t\t\tthis.refreshState();\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Re-enables user input on the control.\n\t\t\t */\n\t\t\tunlock: function() {\n\t\t\t\tthis.isLocked = false;\n\t\t\t\tthis.refreshState();\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Disables user input on the control completely.\n\t\t\t * While disabled, it cannot receive focus.\n\t\t\t */\n\t\t\tdisable: function() {\n\t\t\t\tvar self = this;\n\t\t\t\tself.$input.prop('disabled', true);\n\t\t\t\tself.$control_input.prop('disabled', true).prop('tabindex', -1);\n\t\t\t\tself.isDisabled = true;\n\t\t\t\tself.lock();\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Enables the control so that it can respond\n\t\t\t * to focus and user input.\n\t\t\t */\n\t\t\tenable: function() {\n\t\t\t\tvar self = this;\n\t\t\t\tself.$input.prop('disabled', false);\n\t\t\t\tself.$control_input.prop('disabled', false).prop('tabindex', self.tabIndex);\n\t\t\t\tself.isDisabled = false;\n\t\t\t\tself.unlock();\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Completely destroys the control and\n\t\t\t * unbinds all event listeners so that it can\n\t\t\t * be garbage collected.\n\t\t\t */\n\t\t\tdestroy: function() {\n\t\t\t\tvar self = this;\n\t\t\t\tvar eventNS = self.eventNS;\n\t\t\t\tvar revertSettings = self.revertSettings;\n\t\t\n\t\t\t\tself.trigger('destroy');\n\t\t\t\tself.off();\n\t\t\t\tself.$wrapper.remove();\n\t\t\t\tself.$dropdown.remove();\n\t\t\n\t\t\t\tself.$input\n\t\t\t\t\t.html('')\n\t\t\t\t\t.append(revertSettings.$children)\n\t\t\t\t\t.removeAttr('tabindex')\n\t\t\t\t\t.removeClass('selectized')\n\t\t\t\t\t.attr({tabindex: revertSettings.tabindex})\n\t\t\t\t\t.show();\n\t\t\n\t\t\t\tself.$control_input.removeData('grow');\n\t\t\t\tself.$input.removeData('selectize');\n\t\t\n\t\t\t\t$(window).off(eventNS);\n\t\t\t\t$(document).off(eventNS);\n\t\t\t\t$(document.body).off(eventNS);\n\t\t\n\t\t\t\tdelete self.$input[0].selectize;\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * A helper method for rendering \"item\" and\n\t\t\t * \"option\" templates, given the data.\n\t\t\t *\n\t\t\t * @param {string} templateName\n\t\t\t * @param {object} data\n\t\t\t * @returns {string}\n\t\t\t */\n\t\t\trender: function(templateName, data) {\n\t\t\t\tvar value, id, label;\n\t\t\t\tvar html = '';\n\t\t\t\tvar cache = false;\n\t\t\t\tvar self = this;\n\t\t\t\tvar regex_tag = /^[\\t \\r\\n]*<([a-z][a-z0-9\\-_]*(?:\\:[a-z][a-z0-9\\-_]*)?)/i;\n\t\t\n\t\t\t\tif (templateName === 'option' || templateName === 'item') {\n\t\t\t\t\tvalue = hash_key(data[self.settings.valueField]);\n\t\t\t\t\tcache = !!value;\n\t\t\t\t}\n\t\t\n\t\t\t\t// pull markup from cache if it exists\n\t\t\t\tif (cache) {\n\t\t\t\t\tif (!isset(self.renderCache[templateName])) {\n\t\t\t\t\t\tself.renderCache[templateName] = {};\n\t\t\t\t\t}\n\t\t\t\t\tif (self.renderCache[templateName].hasOwnProperty(value)) {\n\t\t\t\t\t\treturn self.renderCache[templateName][value];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\t// render markup\n\t\t\t\thtml = self.settings.render[templateName].apply(this, [data, escape_html]);\n\t\t\n\t\t\t\t// add mandatory attributes\n\t\t\t\tif (templateName === 'option' || templateName === 'option_create') {\n\t\t\t\t\thtml = html.replace(regex_tag, '<$1 data-selectable');\n\t\t\t\t}\n\t\t\t\tif (templateName === 'optgroup') {\n\t\t\t\t\tid = data[self.settings.optgroupValueField] || '';\n\t\t\t\t\thtml = html.replace(regex_tag, '<$1 data-group=\"' + escape_replace(escape_html(id)) + '\"');\n\t\t\t\t}\n\t\t\t\tif (templateName === 'option' || templateName === 'item') {\n\t\t\t\t\thtml = html.replace(regex_tag, '<$1 data-value=\"' + escape_replace(escape_html(value || '')) + '\"');\n\t\t\t\t}\n\t\t\n\t\t\t\t// update cache\n\t\t\t\tif (cache) {\n\t\t\t\t\tself.renderCache[templateName][value] = html;\n\t\t\t\t}\n\t\t\n\t\t\t\treturn html;\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Clears the render cache for a template. If\n\t\t\t * no template is given, clears all render\n\t\t\t * caches.\n\t\t\t *\n\t\t\t * @param {string} templateName\n\t\t\t */\n\t\t\tclearCache: function(templateName) {\n\t\t\t\tvar self = this;\n\t\t\t\tif (typeof templateName === 'undefined') {\n\t\t\t\t\tself.renderCache = {};\n\t\t\t\t} else {\n\t\t\t\t\tdelete self.renderCache[templateName];\n\t\t\t\t}\n\t\t\t},\n\t\t\n\t\t\t/**\n\t\t\t * Determines whether or not to display the\n\t\t\t * create item prompt, given a user input.\n\t\t\t *\n\t\t\t * @param {string} input\n\t\t\t * @return {boolean}\n\t\t\t */\n\t\t\tcanCreate: function(input) {\n\t\t\t\tvar self = this;\n\t\t\t\tif (!self.settings.create) return false;\n\t\t\t\tvar filter = self.settings.createFilter;\n\t\t\t\treturn input.length\n\t\t\t\t\t&& (typeof filter !== 'function' || filter.apply(self, [input]))\n\t\t\t\t\t&& (typeof filter !== 'string' || new RegExp(filter).test(input))\n\t\t\t\t\t&& (!(filter instanceof RegExp) || filter.test(input));\n\t\t\t}\n\t\t\n\t\t});\n\t\t\n\t\t\n\t\tSelectize.count = 0;\n\t\tSelectize.defaults = {\n\t\t\toptions: [],\n\t\t\toptgroups: [],\n\t\t\n\t\t\tplugins: [],\n\t\t\tdelimiter: ',',\n\t\t\tsplitOn: null, // regexp or string for splitting up values from a paste command\n\t\t\tpersist: true,\n\t\t\tdiacritics: true,\n\t\t\tcreate: false,\n\t\t\tcreateOnBlur: false,\n\t\t\tcreateFilter: null,\n\t\t\thighlight: true,\n\t\t\topenOnFocus: true,\n\t\t\tmaxOptions: 1000,\n\t\t\tmaxItems: null,\n\t\t\thideSelected: null,\n\t\t\taddPrecedence: false,\n\t\t\tselectOnTab: false,\n\t\t\tpreload: false,\n\t\t\tallowEmptyOption: false,\n\t\t\tcloseAfterSelect: false,\n\t\t\n\t\t\tscrollDuration: 60,\n\t\t\tloadThrottle: 300,\n\t\t\tloadingClass: 'loading',\n\t\t\n\t\t\tdataAttr: 'data-data',\n\t\t\toptgroupField: 'optgroup',\n\t\t\tvalueField: 'value',\n\t\t\tlabelField: 'text',\n\t\t\toptgroupLabelField: 'label',\n\t\t\toptgroupValueField: 'value',\n\t\t\tlockOptgroupOrder: false,\n\t\t\n\t\t\tsortField: '$order',\n\t\t\tsearchField: ['text'],\n\t\t\tsearchConjunction: 'and',\n\t\t\n\t\t\tmode: null,\n\t\t\twrapperClass: 'selectize-control',\n\t\t\tinputClass: 'selectize-input',\n\t\t\tdropdownClass: 'selectize-dropdown',\n\t\t\tdropdownContentClass: 'selectize-dropdown-content',\n\t\t\n\t\t\tdropdownParent: null,\n\t\t\n\t\t\tcopyClassesToDropdown: true,\n\t\t\n\t\t\t/*\n\t\t\tload                 : null, // function(query, callback) { ... }\n\t\t\tscore                : null, // function(search) { ... }\n\t\t\tonInitialize         : null, // function() { ... }\n\t\t\tonChange             : null, // function(value) { ... }\n\t\t\tonItemAdd            : null, // function(value, $item) { ... }\n\t\t\tonItemRemove         : null, // function(value) { ... }\n\t\t\tonClear              : null, // function() { ... }\n\t\t\tonOptionAdd          : null, // function(value, data) { ... }\n\t\t\tonOptionRemove       : null, // function(value) { ... }\n\t\t\tonOptionClear        : null, // function() { ... }\n\t\t\tonOptionGroupAdd     : null, // function(id, data) { ... }\n\t\t\tonOptionGroupRemove  : null, // function(id) { ... }\n\t\t\tonOptionGroupClear   : null, // function() { ... }\n\t\t\tonDropdownOpen       : null, // function($dropdown) { ... }\n\t\t\tonDropdownClose      : null, // function($dropdown) { ... }\n\t\t\tonType               : null, // function(str) { ... }\n\t\t\tonDelete             : null, // function(values) { ... }\n\t\t\t*/\n\t\t\n\t\t\trender: {\n\t\t\t\t/*\n\t\t\t\titem: null,\n\t\t\t\toptgroup: null,\n\t\t\t\toptgroup_header: null,\n\t\t\t\toption: null,\n\t\t\t\toption_create: null\n\t\t\t\t*/\n\t\t\t}\n\t\t};\n\t\t\n\t\t\n\t\t$.fn.selectize = function(settings_user) {\n\t\t\tvar defaults             = $.fn.selectize.defaults;\n\t\t\tvar settings             = $.extend({}, defaults, settings_user);\n\t\t\tvar attr_data            = settings.dataAttr;\n\t\t\tvar field_label          = settings.labelField;\n\t\t\tvar field_value          = settings.valueField;\n\t\t\tvar field_optgroup       = settings.optgroupField;\n\t\t\tvar field_optgroup_label = settings.optgroupLabelField;\n\t\t\tvar field_optgroup_value = settings.optgroupValueField;\n\t\t\n\t\t\t/**\n\t\t\t * Initializes selectize from a <input type=\"text\"> element.\n\t\t\t *\n\t\t\t * @param {object} $input\n\t\t\t * @param {object} settings_element\n\t\t\t */\n\t\t\tvar init_textbox = function($input, settings_element) {\n\t\t\t\tvar i, n, values, option;\n\t\t\n\t\t\t\tvar data_raw = $input.attr(attr_data);\n\t\t\n\t\t\t\tif (!data_raw) {\n\t\t\t\t\tvar value = $.trim($input.val() || '');\n\t\t\t\t\tif (!settings.allowEmptyOption && !value.length) return;\n\t\t\t\t\tvalues = value.split(settings.delimiter);\n\t\t\t\t\tfor (i = 0, n = values.length; i < n; i++) {\n\t\t\t\t\t\toption = {};\n\t\t\t\t\t\toption[field_label] = values[i];\n\t\t\t\t\t\toption[field_value] = values[i];\n\t\t\t\t\t\tsettings_element.options.push(option);\n\t\t\t\t\t}\n\t\t\t\t\tsettings_element.items = values;\n\t\t\t\t} else {\n\t\t\t\t\tsettings_element.options = JSON.parse(data_raw);\n\t\t\t\t\tfor (i = 0, n = settings_element.options.length; i < n; i++) {\n\t\t\t\t\t\tsettings_element.items.push(settings_element.options[i][field_value]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\n\t\t\t/**\n\t\t\t * Initializes selectize from a <select> element.\n\t\t\t *\n\t\t\t * @param {object} $input\n\t\t\t * @param {object} settings_element\n\t\t\t */\n\t\t\tvar init_select = function($input, settings_element) {\n\t\t\t\tvar i, n, tagName, $children, order = 0;\n\t\t\t\tvar options = settings_element.options;\n\t\t\t\tvar optionsMap = {};\n\t\t\n\t\t\t\tvar readData = function($el) {\n\t\t\t\t\tvar data = attr_data && $el.attr(attr_data);\n\t\t\t\t\tif (typeof data === 'string' && data.length) {\n\t\t\t\t\t\treturn JSON.parse(data);\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t};\n\t\t\n\t\t\t\tvar addOption = function($option, group) {\n\t\t\t\t\t$option = $($option);\n\t\t\n\t\t\t\t\tvar value = hash_key($option.attr('value'));\n\t\t\t\t\tif (!value && !settings.allowEmptyOption) return;\n\t\t\n\t\t\t\t\t// if the option already exists, it's probably been\n\t\t\t\t\t// duplicated in another optgroup. in this case, push\n\t\t\t\t\t// the current group to the \"optgroup\" property on the\n\t\t\t\t\t// existing option so that it's rendered in both places.\n\t\t\t\t\tif (optionsMap.hasOwnProperty(value)) {\n\t\t\t\t\t\tif (group) {\n\t\t\t\t\t\t\tvar arr = optionsMap[value][field_optgroup];\n\t\t\t\t\t\t\tif (!arr) {\n\t\t\t\t\t\t\t\toptionsMap[value][field_optgroup] = group;\n\t\t\t\t\t\t\t} else if (!$.isArray(arr)) {\n\t\t\t\t\t\t\t\toptionsMap[value][field_optgroup] = [arr, group];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tarr.push(group);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\tvar option             = readData($option) || {};\n\t\t\t\t\toption[field_label]    = option[field_label] || $option.text();\n\t\t\t\t\toption[field_value]    = option[field_value] || value;\n\t\t\t\t\toption[field_optgroup] = option[field_optgroup] || group;\n\t\t\n\t\t\t\t\toptionsMap[value] = option;\n\t\t\t\t\toptions.push(option);\n\t\t\n\t\t\t\t\tif ($option.is(':selected')) {\n\t\t\t\t\t\tsettings_element.items.push(value);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\n\t\t\t\tvar addGroup = function($optgroup) {\n\t\t\t\t\tvar i, n, id, optgroup, $options;\n\t\t\n\t\t\t\t\t$optgroup = $($optgroup);\n\t\t\t\t\tid = $optgroup.attr('label');\n\t\t\n\t\t\t\t\tif (id) {\n\t\t\t\t\t\toptgroup = readData($optgroup) || {};\n\t\t\t\t\t\toptgroup[field_optgroup_label] = id;\n\t\t\t\t\t\toptgroup[field_optgroup_value] = id;\n\t\t\t\t\t\tsettings_element.optgroups.push(optgroup);\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\t$options = $('option', $optgroup);\n\t\t\t\t\tfor (i = 0, n = $options.length; i < n; i++) {\n\t\t\t\t\t\taddOption($options[i], id);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\n\t\t\t\tsettings_element.maxItems = $input.attr('multiple') ? null : 1;\n\t\t\n\t\t\t\t$children = $input.children();\n\t\t\t\tfor (i = 0, n = $children.length; i < n; i++) {\n\t\t\t\t\ttagName = $children[i].tagName.toLowerCase();\n\t\t\t\t\tif (tagName === 'optgroup') {\n\t\t\t\t\t\taddGroup($children[i]);\n\t\t\t\t\t} else if (tagName === 'option') {\n\t\t\t\t\t\taddOption($children[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\n\t\t\treturn this.each(function() {\n\t\t\t\tif (this.selectize) return;\n\t\t\n\t\t\t\tvar instance;\n\t\t\t\tvar $input = $(this);\n\t\t\t\tvar tag_name = this.tagName.toLowerCase();\n\t\t\t\tvar placeholder = $input.attr('placeholder') || $input.attr('data-placeholder');\n\t\t\t\tif (!placeholder && !settings.allowEmptyOption) {\n\t\t\t\t\tplaceholder = $input.children('option[value=\"\"]').text();\n\t\t\t\t}\n\t\t\n\t\t\t\tvar settings_element = {\n\t\t\t\t\t'placeholder' : placeholder,\n\t\t\t\t\t'options'     : [],\n\t\t\t\t\t'optgroups'   : [],\n\t\t\t\t\t'items'       : []\n\t\t\t\t};\n\t\t\n\t\t\t\tif (tag_name === 'select') {\n\t\t\t\t\tinit_select($input, settings_element);\n\t\t\t\t} else {\n\t\t\t\t\tinit_textbox($input, settings_element);\n\t\t\t\t}\n\t\t\n\t\t\t\tinstance = new Selectize($input, $.extend(true, {}, defaults, settings_element, settings_user));\n\t\t\t});\n\t\t};\n\t\t\n\t\t$.fn.selectize.defaults = Selectize.defaults;\n\t\t$.fn.selectize.support = {\n\t\t\tvalidity: SUPPORTS_VALIDITY_API\n\t\t};\n\t\t\n\t\t\n\t\tSelectize.define('drag_drop', function(options) {\n\t\t\tif (!$.fn.sortable) throw new Error('The \"drag_drop\" plugin requires jQuery UI \"sortable\".');\n\t\t\tif (this.settings.mode !== 'multi') return;\n\t\t\tvar self = this;\n\t\t\n\t\t\tself.lock = (function() {\n\t\t\t\tvar original = self.lock;\n\t\t\t\treturn function() {\n\t\t\t\t\tvar sortable = self.$control.data('sortable');\n\t\t\t\t\tif (sortable) sortable.disable();\n\t\t\t\t\treturn original.apply(self, arguments);\n\t\t\t\t};\n\t\t\t})();\n\t\t\n\t\t\tself.unlock = (function() {\n\t\t\t\tvar original = self.unlock;\n\t\t\t\treturn function() {\n\t\t\t\t\tvar sortable = self.$control.data('sortable');\n\t\t\t\t\tif (sortable) sortable.enable();\n\t\t\t\t\treturn original.apply(self, arguments);\n\t\t\t\t};\n\t\t\t})();\n\t\t\n\t\t\tself.setup = (function() {\n\t\t\t\tvar original = self.setup;\n\t\t\t\treturn function() {\n\t\t\t\t\toriginal.apply(this, arguments);\n\t\t\n\t\t\t\t\tvar $control = self.$control.sortable({\n\t\t\t\t\t\titems: '[data-value]',\n\t\t\t\t\t\tforcePlaceholderSize: true,\n\t\t\t\t\t\tdisabled: self.isLocked,\n\t\t\t\t\t\tstart: function(e, ui) {\n\t\t\t\t\t\t\tui.placeholder.css('width', ui.helper.css('width'));\n\t\t\t\t\t\t\t$control.css({overflow: 'visible'});\n\t\t\t\t\t\t},\n\t\t\t\t\t\tstop: function() {\n\t\t\t\t\t\t\t$control.css({overflow: 'hidden'});\n\t\t\t\t\t\t\tvar active = self.$activeItems ? self.$activeItems.slice() : null;\n\t\t\t\t\t\t\tvar values = [];\n\t\t\t\t\t\t\t$control.children('[data-value]').each(function() {\n\t\t\t\t\t\t\t\tvalues.push($(this).attr('data-value'));\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tself.setValue(values);\n\t\t\t\t\t\t\tself.setActiveItem(active);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t})();\n\t\t\n\t\t});\n\t\t\n\t\tSelectize.define('dropdown_header', function(options) {\n\t\t\tvar self = this;\n\t\t\n\t\t\toptions = $.extend({\n\t\t\t\ttitle         : 'Untitled',\n\t\t\t\theaderClass   : 'selectize-dropdown-header',\n\t\t\t\ttitleRowClass : 'selectize-dropdown-header-title',\n\t\t\t\tlabelClass    : 'selectize-dropdown-header-label',\n\t\t\t\tcloseClass    : 'selectize-dropdown-header-close',\n\t\t\n\t\t\t\thtml: function(data) {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t'<div class=\"' + data.headerClass + '\">' +\n\t\t\t\t\t\t\t'<div class=\"' + data.titleRowClass + '\">' +\n\t\t\t\t\t\t\t\t'<span class=\"' + data.labelClass + '\">' + data.title + '</span>' +\n\t\t\t\t\t\t\t\t'<a href=\"javascript:void(0)\" class=\"' + data.closeClass + '\">&times;</a>' +\n\t\t\t\t\t\t\t'</div>' +\n\t\t\t\t\t\t'</div>'\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}, options);\n\t\t\n\t\t\tself.setup = (function() {\n\t\t\t\tvar original = self.setup;\n\t\t\t\treturn function() {\n\t\t\t\t\toriginal.apply(self, arguments);\n\t\t\t\t\tself.$dropdown_header = $(options.html(options));\n\t\t\t\t\tself.$dropdown.prepend(self.$dropdown_header);\n\t\t\t\t};\n\t\t\t})();\n\t\t\n\t\t});\n\t\t\n\t\tSelectize.define('optgroup_columns', function(options) {\n\t\t\tvar self = this;\n\t\t\n\t\t\toptions = $.extend({\n\t\t\t\tequalizeWidth  : true,\n\t\t\t\tequalizeHeight : true\n\t\t\t}, options);\n\t\t\n\t\t\tthis.getAdjacentOption = function($option, direction) {\n\t\t\t\tvar $options = $option.closest('[data-group]').find('[data-selectable]');\n\t\t\t\tvar index    = $options.index($option) + direction;\n\t\t\n\t\t\t\treturn index >= 0 && index < $options.length ? $options.eq(index) : $();\n\t\t\t};\n\t\t\n\t\t\tthis.onKeyDown = (function() {\n\t\t\t\tvar original = self.onKeyDown;\n\t\t\t\treturn function(e) {\n\t\t\t\t\tvar index, $option, $options, $optgroup;\n\t\t\n\t\t\t\t\tif (this.isOpen && (e.keyCode === KEY_LEFT || e.keyCode === KEY_RIGHT)) {\n\t\t\t\t\t\tself.ignoreHover = true;\n\t\t\t\t\t\t$optgroup = this.$activeOption.closest('[data-group]');\n\t\t\t\t\t\tindex = $optgroup.find('[data-selectable]').index(this.$activeOption);\n\t\t\n\t\t\t\t\t\tif(e.keyCode === KEY_LEFT) {\n\t\t\t\t\t\t\t$optgroup = $optgroup.prev('[data-group]');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$optgroup = $optgroup.next('[data-group]');\n\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\t$options = $optgroup.find('[data-selectable]');\n\t\t\t\t\t\t$option  = $options.eq(Math.min($options.length - 1, index));\n\t\t\t\t\t\tif ($option.length) {\n\t\t\t\t\t\t\tthis.setActiveOption($option);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\treturn original.apply(this, arguments);\n\t\t\t\t};\n\t\t\t})();\n\t\t\n\t\t\tvar getScrollbarWidth = function() {\n\t\t\t\tvar div;\n\t\t\t\tvar width = getScrollbarWidth.width;\n\t\t\t\tvar doc = document;\n\t\t\n\t\t\t\tif (typeof width === 'undefined') {\n\t\t\t\t\tdiv = doc.createElement('div');\n\t\t\t\t\tdiv.innerHTML = '<div style=\"width:50px;height:50px;position:absolute;left:-50px;top:-50px;overflow:auto;\"><div style=\"width:1px;height:100px;\"></div></div>';\n\t\t\t\t\tdiv = div.firstChild;\n\t\t\t\t\tdoc.body.appendChild(div);\n\t\t\t\t\twidth = getScrollbarWidth.width = div.offsetWidth - div.clientWidth;\n\t\t\t\t\tdoc.body.removeChild(div);\n\t\t\t\t}\n\t\t\t\treturn width;\n\t\t\t};\n\t\t\n\t\t\tvar equalizeSizes = function() {\n\t\t\t\tvar i, n, height_max, width, width_last, width_parent, $optgroups;\n\t\t\n\t\t\t\t$optgroups = $('[data-group]', self.$dropdown_content);\n\t\t\t\tn = $optgroups.length;\n\t\t\t\tif (!n || !self.$dropdown_content.width()) return;\n\t\t\n\t\t\t\tif (options.equalizeHeight) {\n\t\t\t\t\theight_max = 0;\n\t\t\t\t\tfor (i = 0; i < n; i++) {\n\t\t\t\t\t\theight_max = Math.max(height_max, $optgroups.eq(i).height());\n\t\t\t\t\t}\n\t\t\t\t\t$optgroups.css({height: height_max});\n\t\t\t\t}\n\t\t\n\t\t\t\tif (options.equalizeWidth) {\n\t\t\t\t\twidth_parent = self.$dropdown_content.innerWidth() - getScrollbarWidth();\n\t\t\t\t\twidth = Math.round(width_parent / n);\n\t\t\t\t\t$optgroups.css({width: width});\n\t\t\t\t\tif (n > 1) {\n\t\t\t\t\t\twidth_last = width_parent - width * (n - 1);\n\t\t\t\t\t\t$optgroups.eq(n - 1).css({width: width_last});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\n\t\t\tif (options.equalizeHeight || options.equalizeWidth) {\n\t\t\t\thook.after(this, 'positionDropdown', equalizeSizes);\n\t\t\t\thook.after(this, 'refreshOptions', equalizeSizes);\n\t\t\t}\n\t\t\n\t\t\n\t\t});\n\t\t\n\t\tSelectize.define('remove_button', function(options) {\n\t\t\tif (this.settings.mode === 'single') return;\n\t\t\n\t\t\toptions = $.extend({\n\t\t\t\tlabel     : '&times;',\n\t\t\t\ttitle     : 'Remove',\n\t\t\t\tclassName : 'remove',\n\t\t\t\tappend    : true\n\t\t\t}, options);\n\t\t\n\t\t\tvar self = this;\n\t\t\tvar html = '<a href=\"javascript:void(0)\" class=\"' + options.className + '\" tabindex=\"-1\" title=\"' + escape_html(options.title) + '\">' + options.label + '</a>';\n\t\t\n\t\t\t/**\n\t\t\t * Appends an element as a child (with raw HTML).\n\t\t\t *\n\t\t\t * @param {string} html_container\n\t\t\t * @param {string} html_element\n\t\t\t * @return {string}\n\t\t\t */\n\t\t\tvar append = function(html_container, html_element) {\n\t\t\t\tvar pos = html_container.search(/(<\\/[^>]+>\\s*)$/);\n\t\t\t\treturn html_container.substring(0, pos) + html_element + html_container.substring(pos);\n\t\t\t};\n\t\t\n\t\t\tthis.setup = (function() {\n\t\t\t\tvar original = self.setup;\n\t\t\t\treturn function() {\n\t\t\t\t\t// override the item rendering method to add the button to each\n\t\t\t\t\tif (options.append) {\n\t\t\t\t\t\tvar render_item = self.settings.render.item;\n\t\t\t\t\t\tself.settings.render.item = function(data) {\n\t\t\t\t\t\t\treturn append(render_item.apply(this, arguments), html);\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\toriginal.apply(this, arguments);\n\t\t\n\t\t\t\t\t// add event listener\n\t\t\t\t\tthis.$control.on('click', '.' + options.className, function(e) {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tif (self.isLocked) return;\n\t\t\n\t\t\t\t\t\tvar $item = $(e.currentTarget).parent();\n\t\t\t\t\t\tself.setActiveItem($item);\n\t\t\t\t\t\tif (self.deleteSelection()) {\n\t\t\t\t\t\t\tself.setCaret(self.items.length);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\n\t\t\t\t};\n\t\t\t})();\n\t\t\n\t\t});\n\t\t\n\t\tSelectize.define('restore_on_backspace', function(options) {\n\t\t\tvar self = this;\n\t\t\n\t\t\toptions.text = options.text || function(option) {\n\t\t\t\treturn option[this.settings.labelField];\n\t\t\t};\n\t\t\n\t\t\tthis.onKeyDown = (function() {\n\t\t\t\tvar original = self.onKeyDown;\n\t\t\t\treturn function(e) {\n\t\t\t\t\tvar index, option;\n\t\t\t\t\tif (e.keyCode === KEY_BACKSPACE && this.$control_input.val() === '' && !this.$activeItems.length) {\n\t\t\t\t\t\tindex = this.caretPos - 1;\n\t\t\t\t\t\tif (index >= 0 && index < this.items.length) {\n\t\t\t\t\t\t\toption = this.options[this.items[index]];\n\t\t\t\t\t\t\tif (this.deleteSelection(e)) {\n\t\t\t\t\t\t\t\tthis.setTextboxValue(options.text.apply(this, [option]));\n\t\t\t\t\t\t\t\tthis.refreshOptions(true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn original.apply(this, arguments);\n\t\t\t\t};\n\t\t\t})();\n\t\t});\n\t\t\n\t\n\t\treturn Selectize;\n\t}));\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * sifter.js\n\t * Copyright (c) 2013 Brian Reavis & contributors\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n\t * file except in compliance with the License. You may obtain a copy of the License at:\n\t * http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software distributed under\n\t * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n\t * ANY KIND, either express or implied. See the License for the specific language\n\t * governing permissions and limitations under the License.\n\t *\n\t * @author Brian Reavis <brian@thirdroute.com>\n\t */\n\t\n\t(function(root, factory) {\n\t\tif (true) {\n\t\t\t!(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\t} else if (typeof exports === 'object') {\n\t\t\tmodule.exports = factory();\n\t\t} else {\n\t\t\troot.Sifter = factory();\n\t\t}\n\t}(this, function() {\n\t\n\t\t/**\n\t\t * Textually searches arrays and hashes of objects\n\t\t * by property (or multiple properties). Designed\n\t\t * specifically for autocomplete.\n\t\t *\n\t\t * @constructor\n\t\t * @param {array|object} items\n\t\t * @param {object} items\n\t\t */\n\t\tvar Sifter = function(items, settings) {\n\t\t\tthis.items = items;\n\t\t\tthis.settings = settings || {diacritics: true};\n\t\t};\n\t\n\t\t/**\n\t\t * Splits a search string into an array of individual\n\t\t * regexps to be used to match results.\n\t\t *\n\t\t * @param {string} query\n\t\t * @returns {array}\n\t\t */\n\t\tSifter.prototype.tokenize = function(query) {\n\t\t\tquery = trim(String(query || '').toLowerCase());\n\t\t\tif (!query || !query.length) return [];\n\t\n\t\t\tvar i, n, regex, letter;\n\t\t\tvar tokens = [];\n\t\t\tvar words = query.split(/ +/);\n\t\n\t\t\tfor (i = 0, n = words.length; i < n; i++) {\n\t\t\t\tregex = escape_regex(words[i]);\n\t\t\t\tif (this.settings.diacritics) {\n\t\t\t\t\tfor (letter in DIACRITICS) {\n\t\t\t\t\t\tif (DIACRITICS.hasOwnProperty(letter)) {\n\t\t\t\t\t\t\tregex = regex.replace(new RegExp(letter, 'g'), DIACRITICS[letter]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttokens.push({\n\t\t\t\t\tstring : words[i],\n\t\t\t\t\tregex  : new RegExp(regex, 'i')\n\t\t\t\t});\n\t\t\t}\n\t\n\t\t\treturn tokens;\n\t\t};\n\t\n\t\t/**\n\t\t * Iterates over arrays and hashes.\n\t\t *\n\t\t * ```\n\t\t * this.iterator(this.items, function(item, id) {\n\t\t *    // invoked for each item\n\t\t * });\n\t\t * ```\n\t\t *\n\t\t * @param {array|object} object\n\t\t */\n\t\tSifter.prototype.iterator = function(object, callback) {\n\t\t\tvar iterator;\n\t\t\tif (is_array(object)) {\n\t\t\t\titerator = Array.prototype.forEach || function(callback) {\n\t\t\t\t\tfor (var i = 0, n = this.length; i < n; i++) {\n\t\t\t\t\t\tcallback(this[i], i, this);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\titerator = function(callback) {\n\t\t\t\t\tfor (var key in this) {\n\t\t\t\t\t\tif (this.hasOwnProperty(key)) {\n\t\t\t\t\t\t\tcallback(this[key], key, this);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\n\t\t\titerator.apply(object, [callback]);\n\t\t};\n\t\n\t\t/**\n\t\t * Returns a function to be used to score individual results.\n\t\t *\n\t\t * Good matches will have a higher score than poor matches.\n\t\t * If an item is not a match, 0 will be returned by the function.\n\t\t *\n\t\t * @param {object|string} search\n\t\t * @param {object} options (optional)\n\t\t * @returns {function}\n\t\t */\n\t\tSifter.prototype.getScoreFunction = function(search, options) {\n\t\t\tvar self, fields, tokens, token_count;\n\t\n\t\t\tself        = this;\n\t\t\tsearch      = self.prepareSearch(search, options);\n\t\t\ttokens      = search.tokens;\n\t\t\tfields      = search.options.fields;\n\t\t\ttoken_count = tokens.length;\n\t\n\t\t\t/**\n\t\t\t * Calculates how close of a match the\n\t\t\t * given value is against a search token.\n\t\t\t *\n\t\t\t * @param {mixed} value\n\t\t\t * @param {object} token\n\t\t\t * @return {number}\n\t\t\t */\n\t\t\tvar scoreValue = function(value, token) {\n\t\t\t\tvar score, pos;\n\t\n\t\t\t\tif (!value) return 0;\n\t\t\t\tvalue = String(value || '');\n\t\t\t\tpos = value.search(token.regex);\n\t\t\t\tif (pos === -1) return 0;\n\t\t\t\tscore = token.string.length / value.length;\n\t\t\t\tif (pos === 0) score += 0.5;\n\t\t\t\treturn score;\n\t\t\t};\n\t\n\t\t\t/**\n\t\t\t * Calculates the score of an object\n\t\t\t * against the search query.\n\t\t\t *\n\t\t\t * @param {object} token\n\t\t\t * @param {object} data\n\t\t\t * @return {number}\n\t\t\t */\n\t\t\tvar scoreObject = (function() {\n\t\t\t\tvar field_count = fields.length;\n\t\t\t\tif (!field_count) {\n\t\t\t\t\treturn function() { return 0; };\n\t\t\t\t}\n\t\t\t\tif (field_count === 1) {\n\t\t\t\t\treturn function(token, data) {\n\t\t\t\t\t\treturn scoreValue(data[fields[0]], token);\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn function(token, data) {\n\t\t\t\t\tfor (var i = 0, sum = 0; i < field_count; i++) {\n\t\t\t\t\t\tsum += scoreValue(data[fields[i]], token);\n\t\t\t\t\t}\n\t\t\t\t\treturn sum / field_count;\n\t\t\t\t};\n\t\t\t})();\n\t\n\t\t\tif (!token_count) {\n\t\t\t\treturn function() { return 0; };\n\t\t\t}\n\t\t\tif (token_count === 1) {\n\t\t\t\treturn function(data) {\n\t\t\t\t\treturn scoreObject(tokens[0], data);\n\t\t\t\t};\n\t\t\t}\n\t\n\t\t\tif (search.options.conjunction === 'and') {\n\t\t\t\treturn function(data) {\n\t\t\t\t\tvar score;\n\t\t\t\t\tfor (var i = 0, sum = 0; i < token_count; i++) {\n\t\t\t\t\t\tscore = scoreObject(tokens[i], data);\n\t\t\t\t\t\tif (score <= 0) return 0;\n\t\t\t\t\t\tsum += score;\n\t\t\t\t\t}\n\t\t\t\t\treturn sum / token_count;\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\treturn function(data) {\n\t\t\t\t\tfor (var i = 0, sum = 0; i < token_count; i++) {\n\t\t\t\t\t\tsum += scoreObject(tokens[i], data);\n\t\t\t\t\t}\n\t\t\t\t\treturn sum / token_count;\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t\n\t\t/**\n\t\t * Returns a function that can be used to compare two\n\t\t * results, for sorting purposes. If no sorting should\n\t\t * be performed, `null` will be returned.\n\t\t *\n\t\t * @param {string|object} search\n\t\t * @param {object} options\n\t\t * @return function(a,b)\n\t\t */\n\t\tSifter.prototype.getSortFunction = function(search, options) {\n\t\t\tvar i, n, self, field, fields, fields_count, multiplier, multipliers, get_field, implicit_score, sort;\n\t\n\t\t\tself   = this;\n\t\t\tsearch = self.prepareSearch(search, options);\n\t\t\tsort   = (!search.query && options.sort_empty) || options.sort;\n\t\n\t\t\t/**\n\t\t\t * Fetches the specified sort field value\n\t\t\t * from a search result item.\n\t\t\t *\n\t\t\t * @param  {string} name\n\t\t\t * @param  {object} result\n\t\t\t * @return {mixed}\n\t\t\t */\n\t\t\tget_field = function(name, result) {\n\t\t\t\tif (name === '$score') return result.score;\n\t\t\t\treturn self.items[result.id][name];\n\t\t\t};\n\t\n\t\t\t// parse options\n\t\t\tfields = [];\n\t\t\tif (sort) {\n\t\t\t\tfor (i = 0, n = sort.length; i < n; i++) {\n\t\t\t\t\tif (search.query || sort[i].field !== '$score') {\n\t\t\t\t\t\tfields.push(sort[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// the \"$score\" field is implied to be the primary\n\t\t\t// sort field, unless it's manually specified\n\t\t\tif (search.query) {\n\t\t\t\timplicit_score = true;\n\t\t\t\tfor (i = 0, n = fields.length; i < n; i++) {\n\t\t\t\t\tif (fields[i].field === '$score') {\n\t\t\t\t\t\timplicit_score = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (implicit_score) {\n\t\t\t\t\tfields.unshift({field: '$score', direction: 'desc'});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (i = 0, n = fields.length; i < n; i++) {\n\t\t\t\t\tif (fields[i].field === '$score') {\n\t\t\t\t\t\tfields.splice(i, 1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tmultipliers = [];\n\t\t\tfor (i = 0, n = fields.length; i < n; i++) {\n\t\t\t\tmultipliers.push(fields[i].direction === 'desc' ? -1 : 1);\n\t\t\t}\n\t\n\t\t\t// build function\n\t\t\tfields_count = fields.length;\n\t\t\tif (!fields_count) {\n\t\t\t\treturn null;\n\t\t\t} else if (fields_count === 1) {\n\t\t\t\tfield = fields[0].field;\n\t\t\t\tmultiplier = multipliers[0];\n\t\t\t\treturn function(a, b) {\n\t\t\t\t\treturn multiplier * cmp(\n\t\t\t\t\t\tget_field(field, a),\n\t\t\t\t\t\tget_field(field, b)\n\t\t\t\t\t);\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\treturn function(a, b) {\n\t\t\t\t\tvar i, result, a_value, b_value, field;\n\t\t\t\t\tfor (i = 0; i < fields_count; i++) {\n\t\t\t\t\t\tfield = fields[i].field;\n\t\t\t\t\t\tresult = multipliers[i] * cmp(\n\t\t\t\t\t\t\tget_field(field, a),\n\t\t\t\t\t\t\tget_field(field, b)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (result) return result;\n\t\t\t\t\t}\n\t\t\t\t\treturn 0;\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t\n\t\t/**\n\t\t * Parses a search query and returns an object\n\t\t * with tokens and fields ready to be populated\n\t\t * with results.\n\t\t *\n\t\t * @param {string} query\n\t\t * @param {object} options\n\t\t * @returns {object}\n\t\t */\n\t\tSifter.prototype.prepareSearch = function(query, options) {\n\t\t\tif (typeof query === 'object') return query;\n\t\n\t\t\toptions = extend({}, options);\n\t\n\t\t\tvar option_fields     = options.fields;\n\t\t\tvar option_sort       = options.sort;\n\t\t\tvar option_sort_empty = options.sort_empty;\n\t\n\t\t\tif (option_fields && !is_array(option_fields)) options.fields = [option_fields];\n\t\t\tif (option_sort && !is_array(option_sort)) options.sort = [option_sort];\n\t\t\tif (option_sort_empty && !is_array(option_sort_empty)) options.sort_empty = [option_sort_empty];\n\t\n\t\t\treturn {\n\t\t\t\toptions : options,\n\t\t\t\tquery   : String(query || '').toLowerCase(),\n\t\t\t\ttokens  : this.tokenize(query),\n\t\t\t\ttotal   : 0,\n\t\t\t\titems   : []\n\t\t\t};\n\t\t};\n\t\n\t\t/**\n\t\t * Searches through all items and returns a sorted array of matches.\n\t\t *\n\t\t * The `options` parameter can contain:\n\t\t *\n\t\t *   - fields {string|array}\n\t\t *   - sort {array}\n\t\t *   - score {function}\n\t\t *   - filter {bool}\n\t\t *   - limit {integer}\n\t\t *\n\t\t * Returns an object containing:\n\t\t *\n\t\t *   - options {object}\n\t\t *   - query {string}\n\t\t *   - tokens {array}\n\t\t *   - total {int}\n\t\t *   - items {array}\n\t\t *\n\t\t * @param {string} query\n\t\t * @param {object} options\n\t\t * @returns {object}\n\t\t */\n\t\tSifter.prototype.search = function(query, options) {\n\t\t\tvar self = this, value, score, search, calculateScore;\n\t\t\tvar fn_sort;\n\t\t\tvar fn_score;\n\t\n\t\t\tsearch  = this.prepareSearch(query, options);\n\t\t\toptions = search.options;\n\t\t\tquery   = search.query;\n\t\n\t\t\t// generate result scoring function\n\t\t\tfn_score = options.score || self.getScoreFunction(search);\n\t\n\t\t\t// perform search and sort\n\t\t\tif (query.length) {\n\t\t\t\tself.iterator(self.items, function(item, id) {\n\t\t\t\t\tscore = fn_score(item);\n\t\t\t\t\tif (options.filter === false || score > 0) {\n\t\t\t\t\t\tsearch.items.push({'score': score, 'id': id});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tself.iterator(self.items, function(item, id) {\n\t\t\t\t\tsearch.items.push({'score': 1, 'id': id});\n\t\t\t\t});\n\t\t\t}\n\t\n\t\t\tfn_sort = self.getSortFunction(search, options);\n\t\t\tif (fn_sort) search.items.sort(fn_sort);\n\t\n\t\t\t// apply limits\n\t\t\tsearch.total = search.items.length;\n\t\t\tif (typeof options.limit === 'number') {\n\t\t\t\tsearch.items = search.items.slice(0, options.limit);\n\t\t\t}\n\t\n\t\t\treturn search;\n\t\t};\n\t\n\t\t// utilities\n\t\t// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\t\n\t\tvar cmp = function(a, b) {\n\t\t\tif (typeof a === 'number' && typeof b === 'number') {\n\t\t\t\treturn a > b ? 1 : (a < b ? -1 : 0);\n\t\t\t}\n\t\t\ta = asciifold(String(a || ''));\n\t\t\tb = asciifold(String(b || ''));\n\t\t\tif (a > b) return 1;\n\t\t\tif (b > a) return -1;\n\t\t\treturn 0;\n\t\t};\n\t\n\t\tvar extend = function(a, b) {\n\t\t\tvar i, n, k, object;\n\t\t\tfor (i = 1, n = arguments.length; i < n; i++) {\n\t\t\t\tobject = arguments[i];\n\t\t\t\tif (!object) continue;\n\t\t\t\tfor (k in object) {\n\t\t\t\t\tif (object.hasOwnProperty(k)) {\n\t\t\t\t\t\ta[k] = object[k];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn a;\n\t\t};\n\t\n\t\tvar trim = function(str) {\n\t\t\treturn (str + '').replace(/^\\s+|\\s+$|/g, '');\n\t\t};\n\t\n\t\tvar escape_regex = function(str) {\n\t\t\treturn (str + '').replace(/([.?*+^$[\\]\\\\(){}|-])/g, '\\\\$1');\n\t\t};\n\t\n\t\tvar is_array = Array.isArray || ($ && $.isArray) || function(object) {\n\t\t\treturn Object.prototype.toString.call(object) === '[object Array]';\n\t\t};\n\t\n\t\tvar DIACRITICS = {\n\t\t\t'a': '[aÀÁÂÃÄÅàáâãäåĀāąĄ]',\n\t\t\t'c': '[cÇçćĆčČ]',\n\t\t\t'd': '[dđĐďĎ]',\n\t\t\t'e': '[eÈÉÊËèéêëěĚĒēęĘ]',\n\t\t\t'i': '[iÌÍÎÏìíîïĪī]',\n\t\t\t'l': '[lłŁ]',\n\t\t\t'n': '[nÑñňŇńŃ]',\n\t\t\t'o': '[oÒÓÔÕÕÖØòóôõöøŌō]',\n\t\t\t'r': '[rřŘ]',\n\t\t\t's': '[sŠšśŚ]',\n\t\t\t't': '[tťŤ]',\n\t\t\t'u': '[uÙÚÛÜùúûüůŮŪū]',\n\t\t\t'y': '[yŸÿýÝ]',\n\t\t\t'z': '[zŽžżŻźŹ]'\n\t\t};\n\t\n\t\tvar asciifold = (function() {\n\t\t\tvar i, n, k, chunk;\n\t\t\tvar foreignletters = '';\n\t\t\tvar lookup = {};\n\t\t\tfor (k in DIACRITICS) {\n\t\t\t\tif (DIACRITICS.hasOwnProperty(k)) {\n\t\t\t\t\tchunk = DIACRITICS[k].substring(2, DIACRITICS[k].length - 1);\n\t\t\t\t\tforeignletters += chunk;\n\t\t\t\t\tfor (i = 0, n = chunk.length; i < n; i++) {\n\t\t\t\t\t\tlookup[chunk.charAt(i)] = k;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar regexp = new RegExp('[' +  foreignletters + ']', 'g');\n\t\t\treturn function(str) {\n\t\t\t\treturn str.replace(regexp, function(foreignletter) {\n\t\t\t\t\treturn lookup[foreignletter];\n\t\t\t\t}).toLowerCase();\n\t\t\t};\n\t\t})();\n\t\n\t\n\t\t// export\n\t\t// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\t\n\t\treturn Sifter;\n\t}));\n\t\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * microplugin.js\n\t * Copyright (c) 2013 Brian Reavis & contributors\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n\t * file except in compliance with the License. You may obtain a copy of the License at:\n\t * http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software distributed under\n\t * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n\t * ANY KIND, either express or implied. See the License for the specific language\n\t * governing permissions and limitations under the License.\n\t *\n\t * @author Brian Reavis <brian@thirdroute.com>\n\t */\n\t\n\t(function(root, factory) {\n\t\tif (true) {\n\t\t\t!(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\t} else if (typeof exports === 'object') {\n\t\t\tmodule.exports = factory();\n\t\t} else {\n\t\t\troot.MicroPlugin = factory();\n\t\t}\n\t}(this, function() {\n\t\tvar MicroPlugin = {};\n\t\n\t\tMicroPlugin.mixin = function(Interface) {\n\t\t\tInterface.plugins = {};\n\t\n\t\t\t/**\n\t\t\t * Initializes the listed plugins (with options).\n\t\t\t * Acceptable formats:\n\t\t\t *\n\t\t\t * List (without options):\n\t\t\t *   ['a', 'b', 'c']\n\t\t\t *\n\t\t\t * List (with options):\n\t\t\t *   [{'name': 'a', options: {}}, {'name': 'b', options: {}}]\n\t\t\t *\n\t\t\t * Hash (with options):\n\t\t\t *   {'a': { ... }, 'b': { ... }, 'c': { ... }}\n\t\t\t *\n\t\t\t * @param {mixed} plugins\n\t\t\t */\n\t\t\tInterface.prototype.initializePlugins = function(plugins) {\n\t\t\t\tvar i, n, key;\n\t\t\t\tvar self  = this;\n\t\t\t\tvar queue = [];\n\t\n\t\t\t\tself.plugins = {\n\t\t\t\t\tnames     : [],\n\t\t\t\t\tsettings  : {},\n\t\t\t\t\trequested : {},\n\t\t\t\t\tloaded    : {}\n\t\t\t\t};\n\t\n\t\t\t\tif (utils.isArray(plugins)) {\n\t\t\t\t\tfor (i = 0, n = plugins.length; i < n; i++) {\n\t\t\t\t\t\tif (typeof plugins[i] === 'string') {\n\t\t\t\t\t\t\tqueue.push(plugins[i]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tself.plugins.settings[plugins[i].name] = plugins[i].options;\n\t\t\t\t\t\t\tqueue.push(plugins[i].name);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (plugins) {\n\t\t\t\t\tfor (key in plugins) {\n\t\t\t\t\t\tif (plugins.hasOwnProperty(key)) {\n\t\t\t\t\t\t\tself.plugins.settings[key] = plugins[key];\n\t\t\t\t\t\t\tqueue.push(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\twhile (queue.length) {\n\t\t\t\t\tself.require(queue.shift());\n\t\t\t\t}\n\t\t\t};\n\t\n\t\t\tInterface.prototype.loadPlugin = function(name) {\n\t\t\t\tvar self    = this;\n\t\t\t\tvar plugins = self.plugins;\n\t\t\t\tvar plugin  = Interface.plugins[name];\n\t\n\t\t\t\tif (!Interface.plugins.hasOwnProperty(name)) {\n\t\t\t\t\tthrow new Error('Unable to find \"' +  name + '\" plugin');\n\t\t\t\t}\n\t\n\t\t\t\tplugins.requested[name] = true;\n\t\t\t\tplugins.loaded[name] = plugin.fn.apply(self, [self.plugins.settings[name] || {}]);\n\t\t\t\tplugins.names.push(name);\n\t\t\t};\n\t\n\t\t\t/**\n\t\t\t * Initializes a plugin.\n\t\t\t *\n\t\t\t * @param {string} name\n\t\t\t */\n\t\t\tInterface.prototype.require = function(name) {\n\t\t\t\tvar self = this;\n\t\t\t\tvar plugins = self.plugins;\n\t\n\t\t\t\tif (!self.plugins.loaded.hasOwnProperty(name)) {\n\t\t\t\t\tif (plugins.requested[name]) {\n\t\t\t\t\t\tthrow new Error('Plugin has circular dependency (\"' + name + '\")');\n\t\t\t\t\t}\n\t\t\t\t\tself.loadPlugin(name);\n\t\t\t\t}\n\t\n\t\t\t\treturn plugins.loaded[name];\n\t\t\t};\n\t\n\t\t\t/**\n\t\t\t * Registers a plugin.\n\t\t\t *\n\t\t\t * @param {string} name\n\t\t\t * @param {function} fn\n\t\t\t */\n\t\t\tInterface.define = function(name, fn) {\n\t\t\t\tInterface.plugins[name] = {\n\t\t\t\t\t'name' : name,\n\t\t\t\t\t'fn'   : fn\n\t\t\t\t};\n\t\t\t};\n\t\t};\n\t\n\t\tvar utils = {\n\t\t\tisArray: Array.isArray || function(vArg) {\n\t\t\t\treturn Object.prototype.toString.call(vArg) === '[object Array]';\n\t\t\t}\n\t\t};\n\t\n\t\treturn MicroPlugin;\n\t}));\n\n/***/ }\n]);\n\n\n/** WEBPACK FOOTER **\n ** 1.1.js\n **/","var map = {\n\t\"./dropzoneUploader\": 4,\n\t\"./dropzoneUploader.js\": 4,\n\t\"./index\": 2,\n\t\"./index.js\": 2,\n\t\"./tagger\": 6,\n\t\"./tagger.js\": 6\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\treturn map[req] || (function() { throw new Error(\"Cannot find module '\" + req + \"'.\") }());\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 3;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./asyncModules ^\\.\\/.*$\n ** module id = 3\n ** module chunks = 1\n **/","'use strict'\n\n// Dependecies\nconst $ =  require('jquery')\n\nvar module = (element) => {\n  const dropZone = $(element)\n  let $input = dropZone.find('input') // TODO: Change this selector name\n  let $altInput = dropZone.find('[data-trigger=\"file\"]')\n\n  dropZone.on({\n    dragover: cbDragOver,\n    dragleave: cbDragLeave,\n    drop: cbDrop\n  })\n\n  $input.on({\n    change: cbChangeFile\n  })\n\n  $altInput.on({\n    click: cbTriggerFile\n  })\n\n  function cbDragOver (event) {\n    console.log('Make some when file is over of element')\n    dropZone.addClass('hover')\n    return false\n  }\n\n  function cbDragLeave (event) {\n    console.log('Make some when file is leaved of element')\n    dropZone.removeClass('hover')\n    return false\n  }\n\n  function cbDrop (event) {\n    let file = event.originalEvent.dataTransfer.files[0]\n\n    event.stopPropagation()\n    event.preventDefault()\n    dropZone.removeClass('hover')\n\n    readFile(file)\n    $input.files = file\n    $input.val('')\n    return false\n  }\n\n  function cbChangeFile (event) {\n    readFile(this.files[0])\n    return false\n  }\n\n  function cbTriggerFile (event) {\n    $input.trigger('click')\n  }\n\n}\n\nvar readFile = function (file) {\n  var reader = new FileReader();\n\n  reader.onload = function(e) {\n      var image = $('<img/>')\n      .load(function() {\n          createPreview(file, getCanvasImage(this))\n      })\n      .attr('src', e.target.result);\n  }\n  reader.readAsDataURL(file);\n}\n\nvar getCanvasImage = function(image) {\n\n  let imgWidth = 500,\n      imgHeight = 500;\n\n  let canvas = document.createElement('canvas');\n  canvas.width = imgWidth;\n  canvas.height = imgHeight;\n\n  let ctx = canvas.getContext('2d');\n  ctx.drawImage(image, 0, 0, imgWidth, imgHeight);\n\n  return canvas.toDataURL('image/jpeg');\n}\n\nvar createPreview = function(file, newURL) {\n  let fileName = file.name.substr(0, file.name.lastIndexOf('.')) //subtract file extension\n  let filePath = newURL\n  let image = `<img src=\"${filePath}\" class=\"img-responsive\" alt=\"${fileName}\"/>`\n  //append new image through jQuery Template\n  $('[data-content=\"file\"]').html(image).show()\n  $('.custom-file-content').hide()\n}\n\nexport default module\n\n\n/** WEBPACK FOOTER **\n ** ./asyncModules/dropzoneUploader.js\n **/","'use strict'\n\nimport $ from 'jquery'\nrequire('selectize')\n\nconst [suggest] = [{\n    plugins: ['remove_button']\n    , maxItems: 5\n    , valueField: 'id'\n    , labelField: 'name'\n    , searchField: 'name'\n    , create: false\n    , render: {\n        item: templateItem,\n        option: templateOption\n    }\n    , load: loadUsers\n}]\n\nvar tagger = (element) => {\n    var type = $(element).data('taggerType')\n    switch (type) {\n        case 'suggest':\n            $(element).selectize(suggest)\n    }\n}\n\nfunction templateItem(item, escape) {\n    let name = item.name ? escape(item.name) : ''\n    return `<div>${name}</div>`\n}\nfunction templateOption(item, escape) {\n    let name = item.name ? escape(item.name) : ''\n    let img = item.img ? escape(item.img) : ''\n    return `<div class=\"item-float-notification\">\n    <span><img src=\"${img}\" alt=\"${name}\"></span>\n    <span>${name}</span>\n  </div>`\n}\n\nfunction loadUsers(query, callback) {\n    var options = this.$wrapper.prev().data();\n    if (!query.length) {\n        return callback()\n    }\n    $.ajax({\n        url: options.url,\n        type: 'GET',\n        data: {\n            criteria: query\n        },\n        error: function () {\n            callback()\n        },\n        success: function (res) {\n            callback(res.users);\n        }\n    })\n}\n\n\nexport default tagger\n\n\n/** WEBPACK FOOTER **\n ** ./asyncModules/tagger.js\n **/","/**\n * selectize.js (v0.12.1)\n * Copyright (c) 2013–2015 Brian Reavis & contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n * file except in compliance with the License. You may obtain a copy of the License at:\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n * ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n *\n * @author Brian Reavis <brian@thirdroute.com>\n */\n\n/*jshint curly:false */\n/*jshint browser:true */\n\n(function(root, factory) {\n\tif (typeof define === 'function' && define.amd) {\n\t\tdefine(['jquery','sifter','microplugin'], factory);\n\t} else if (typeof exports === 'object') {\n\t\tmodule.exports = factory(require('jquery'), require('sifter'), require('microplugin'));\n\t} else {\n\t\troot.Selectize = factory(root.jQuery, root.Sifter, root.MicroPlugin);\n\t}\n}(this, function($, Sifter, MicroPlugin) {\n\t'use strict';\n\n\tvar highlight = function($element, pattern) {\n\t\tif (typeof pattern === 'string' && !pattern.length) return;\n\t\tvar regex = (typeof pattern === 'string') ? new RegExp(pattern, 'i') : pattern;\n\t\n\t\tvar highlight = function(node) {\n\t\t\tvar skip = 0;\n\t\t\tif (node.nodeType === 3) {\n\t\t\t\tvar pos = node.data.search(regex);\n\t\t\t\tif (pos >= 0 && node.data.length > 0) {\n\t\t\t\t\tvar match = node.data.match(regex);\n\t\t\t\t\tvar spannode = document.createElement('span');\n\t\t\t\t\tspannode.className = 'highlight';\n\t\t\t\t\tvar middlebit = node.splitText(pos);\n\t\t\t\t\tvar endbit = middlebit.splitText(match[0].length);\n\t\t\t\t\tvar middleclone = middlebit.cloneNode(true);\n\t\t\t\t\tspannode.appendChild(middleclone);\n\t\t\t\t\tmiddlebit.parentNode.replaceChild(spannode, middlebit);\n\t\t\t\t\tskip = 1;\n\t\t\t\t}\n\t\t\t} else if (node.nodeType === 1 && node.childNodes && !/(script|style)/i.test(node.tagName)) {\n\t\t\t\tfor (var i = 0; i < node.childNodes.length; ++i) {\n\t\t\t\t\ti += highlight(node.childNodes[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn skip;\n\t\t};\n\t\n\t\treturn $element.each(function() {\n\t\t\thighlight(this);\n\t\t});\n\t};\n\t\n\tvar MicroEvent = function() {};\n\tMicroEvent.prototype = {\n\t\ton: function(event, fct){\n\t\t\tthis._events = this._events || {};\n\t\t\tthis._events[event] = this._events[event] || [];\n\t\t\tthis._events[event].push(fct);\n\t\t},\n\t\toff: function(event, fct){\n\t\t\tvar n = arguments.length;\n\t\t\tif (n === 0) return delete this._events;\n\t\t\tif (n === 1) return delete this._events[event];\n\t\n\t\t\tthis._events = this._events || {};\n\t\t\tif (event in this._events === false) return;\n\t\t\tthis._events[event].splice(this._events[event].indexOf(fct), 1);\n\t\t},\n\t\ttrigger: function(event /* , args... */){\n\t\t\tthis._events = this._events || {};\n\t\t\tif (event in this._events === false) return;\n\t\t\tfor (var i = 0; i < this._events[event].length; i++){\n\t\t\t\tthis._events[event][i].apply(this, Array.prototype.slice.call(arguments, 1));\n\t\t\t}\n\t\t}\n\t};\n\t\n\t/**\n\t * Mixin will delegate all MicroEvent.js function in the destination object.\n\t *\n\t * - MicroEvent.mixin(Foobar) will make Foobar able to use MicroEvent\n\t *\n\t * @param {object} the object which will support MicroEvent\n\t */\n\tMicroEvent.mixin = function(destObject){\n\t\tvar props = ['on', 'off', 'trigger'];\n\t\tfor (var i = 0; i < props.length; i++){\n\t\t\tdestObject.prototype[props[i]] = MicroEvent.prototype[props[i]];\n\t\t}\n\t};\n\t\n\tvar IS_MAC        = /Mac/.test(navigator.userAgent);\n\t\n\tvar KEY_A         = 65;\n\tvar KEY_COMMA     = 188;\n\tvar KEY_RETURN    = 13;\n\tvar KEY_ESC       = 27;\n\tvar KEY_LEFT      = 37;\n\tvar KEY_UP        = 38;\n\tvar KEY_P         = 80;\n\tvar KEY_RIGHT     = 39;\n\tvar KEY_DOWN      = 40;\n\tvar KEY_N         = 78;\n\tvar KEY_BACKSPACE = 8;\n\tvar KEY_DELETE    = 46;\n\tvar KEY_SHIFT     = 16;\n\tvar KEY_CMD       = IS_MAC ? 91 : 17;\n\tvar KEY_CTRL      = IS_MAC ? 18 : 17;\n\tvar KEY_TAB       = 9;\n\t\n\tvar TAG_SELECT    = 1;\n\tvar TAG_INPUT     = 2;\n\t\n\t// for now, android support in general is too spotty to support validity\n\tvar SUPPORTS_VALIDITY_API = !/android/i.test(window.navigator.userAgent) && !!document.createElement('form').validity;\n\t\n\tvar isset = function(object) {\n\t\treturn typeof object !== 'undefined';\n\t};\n\t\n\t/**\n\t * Converts a scalar to its best string representation\n\t * for hash keys and HTML attribute values.\n\t *\n\t * Transformations:\n\t *   'str'     -> 'str'\n\t *   null      -> ''\n\t *   undefined -> ''\n\t *   true      -> '1'\n\t *   false     -> '0'\n\t *   0         -> '0'\n\t *   1         -> '1'\n\t *\n\t * @param {string} value\n\t * @returns {string|null}\n\t */\n\tvar hash_key = function(value) {\n\t\tif (typeof value === 'undefined' || value === null) return null;\n\t\tif (typeof value === 'boolean') return value ? '1' : '0';\n\t\treturn value + '';\n\t};\n\t\n\t/**\n\t * Escapes a string for use within HTML.\n\t *\n\t * @param {string} str\n\t * @returns {string}\n\t */\n\tvar escape_html = function(str) {\n\t\treturn (str + '')\n\t\t\t.replace(/&/g, '&amp;')\n\t\t\t.replace(/</g, '&lt;')\n\t\t\t.replace(/>/g, '&gt;')\n\t\t\t.replace(/\"/g, '&quot;');\n\t};\n\t\n\t/**\n\t * Escapes \"$\" characters in replacement strings.\n\t *\n\t * @param {string} str\n\t * @returns {string}\n\t */\n\tvar escape_replace = function(str) {\n\t\treturn (str + '').replace(/\\$/g, '$$$$');\n\t};\n\t\n\tvar hook = {};\n\t\n\t/**\n\t * Wraps `method` on `self` so that `fn`\n\t * is invoked before the original method.\n\t *\n\t * @param {object} self\n\t * @param {string} method\n\t * @param {function} fn\n\t */\n\thook.before = function(self, method, fn) {\n\t\tvar original = self[method];\n\t\tself[method] = function() {\n\t\t\tfn.apply(self, arguments);\n\t\t\treturn original.apply(self, arguments);\n\t\t};\n\t};\n\t\n\t/**\n\t * Wraps `method` on `self` so that `fn`\n\t * is invoked after the original method.\n\t *\n\t * @param {object} self\n\t * @param {string} method\n\t * @param {function} fn\n\t */\n\thook.after = function(self, method, fn) {\n\t\tvar original = self[method];\n\t\tself[method] = function() {\n\t\t\tvar result = original.apply(self, arguments);\n\t\t\tfn.apply(self, arguments);\n\t\t\treturn result;\n\t\t};\n\t};\n\t\n\t/**\n\t * Wraps `fn` so that it can only be invoked once.\n\t *\n\t * @param {function} fn\n\t * @returns {function}\n\t */\n\tvar once = function(fn) {\n\t\tvar called = false;\n\t\treturn function() {\n\t\t\tif (called) return;\n\t\t\tcalled = true;\n\t\t\tfn.apply(this, arguments);\n\t\t};\n\t};\n\t\n\t/**\n\t * Wraps `fn` so that it can only be called once\n\t * every `delay` milliseconds (invoked on the falling edge).\n\t *\n\t * @param {function} fn\n\t * @param {int} delay\n\t * @returns {function}\n\t */\n\tvar debounce = function(fn, delay) {\n\t\tvar timeout;\n\t\treturn function() {\n\t\t\tvar self = this;\n\t\t\tvar args = arguments;\n\t\t\twindow.clearTimeout(timeout);\n\t\t\ttimeout = window.setTimeout(function() {\n\t\t\t\tfn.apply(self, args);\n\t\t\t}, delay);\n\t\t};\n\t};\n\t\n\t/**\n\t * Debounce all fired events types listed in `types`\n\t * while executing the provided `fn`.\n\t *\n\t * @param {object} self\n\t * @param {array} types\n\t * @param {function} fn\n\t */\n\tvar debounce_events = function(self, types, fn) {\n\t\tvar type;\n\t\tvar trigger = self.trigger;\n\t\tvar event_args = {};\n\t\n\t\t// override trigger method\n\t\tself.trigger = function() {\n\t\t\tvar type = arguments[0];\n\t\t\tif (types.indexOf(type) !== -1) {\n\t\t\t\tevent_args[type] = arguments;\n\t\t\t} else {\n\t\t\t\treturn trigger.apply(self, arguments);\n\t\t\t}\n\t\t};\n\t\n\t\t// invoke provided function\n\t\tfn.apply(self, []);\n\t\tself.trigger = trigger;\n\t\n\t\t// trigger queued events\n\t\tfor (type in event_args) {\n\t\t\tif (event_args.hasOwnProperty(type)) {\n\t\t\t\ttrigger.apply(self, event_args[type]);\n\t\t\t}\n\t\t}\n\t};\n\t\n\t/**\n\t * A workaround for http://bugs.jquery.com/ticket/6696\n\t *\n\t * @param {object} $parent - Parent element to listen on.\n\t * @param {string} event - Event name.\n\t * @param {string} selector - Descendant selector to filter by.\n\t * @param {function} fn - Event handler.\n\t */\n\tvar watchChildEvent = function($parent, event, selector, fn) {\n\t\t$parent.on(event, selector, function(e) {\n\t\t\tvar child = e.target;\n\t\t\twhile (child && child.parentNode !== $parent[0]) {\n\t\t\t\tchild = child.parentNode;\n\t\t\t}\n\t\t\te.currentTarget = child;\n\t\t\treturn fn.apply(this, [e]);\n\t\t});\n\t};\n\t\n\t/**\n\t * Determines the current selection within a text input control.\n\t * Returns an object containing:\n\t *   - start\n\t *   - length\n\t *\n\t * @param {object} input\n\t * @returns {object}\n\t */\n\tvar getSelection = function(input) {\n\t\tvar result = {};\n\t\tif ('selectionStart' in input) {\n\t\t\tresult.start = input.selectionStart;\n\t\t\tresult.length = input.selectionEnd - result.start;\n\t\t} else if (document.selection) {\n\t\t\tinput.focus();\n\t\t\tvar sel = document.selection.createRange();\n\t\t\tvar selLen = document.selection.createRange().text.length;\n\t\t\tsel.moveStart('character', -input.value.length);\n\t\t\tresult.start = sel.text.length - selLen;\n\t\t\tresult.length = selLen;\n\t\t}\n\t\treturn result;\n\t};\n\t\n\t/**\n\t * Copies CSS properties from one element to another.\n\t *\n\t * @param {object} $from\n\t * @param {object} $to\n\t * @param {array} properties\n\t */\n\tvar transferStyles = function($from, $to, properties) {\n\t\tvar i, n, styles = {};\n\t\tif (properties) {\n\t\t\tfor (i = 0, n = properties.length; i < n; i++) {\n\t\t\t\tstyles[properties[i]] = $from.css(properties[i]);\n\t\t\t}\n\t\t} else {\n\t\t\tstyles = $from.css();\n\t\t}\n\t\t$to.css(styles);\n\t};\n\t\n\t/**\n\t * Measures the width of a string within a\n\t * parent element (in pixels).\n\t *\n\t * @param {string} str\n\t * @param {object} $parent\n\t * @returns {int}\n\t */\n\tvar measureString = function(str, $parent) {\n\t\tif (!str) {\n\t\t\treturn 0;\n\t\t}\n\t\n\t\tvar $test = $('<test>').css({\n\t\t\tposition: 'absolute',\n\t\t\ttop: -99999,\n\t\t\tleft: -99999,\n\t\t\twidth: 'auto',\n\t\t\tpadding: 0,\n\t\t\twhiteSpace: 'pre'\n\t\t}).text(str).appendTo('body');\n\t\n\t\ttransferStyles($parent, $test, [\n\t\t\t'letterSpacing',\n\t\t\t'fontSize',\n\t\t\t'fontFamily',\n\t\t\t'fontWeight',\n\t\t\t'textTransform'\n\t\t]);\n\t\n\t\tvar width = $test.width();\n\t\t$test.remove();\n\t\n\t\treturn width;\n\t};\n\t\n\t/**\n\t * Sets up an input to grow horizontally as the user\n\t * types. If the value is changed manually, you can\n\t * trigger the \"update\" handler to resize:\n\t *\n\t * $input.trigger('update');\n\t *\n\t * @param {object} $input\n\t */\n\tvar autoGrow = function($input) {\n\t\tvar currentWidth = null;\n\t\n\t\tvar update = function(e, options) {\n\t\t\tvar value, keyCode, printable, placeholder, width;\n\t\t\tvar shift, character, selection;\n\t\t\te = e || window.event || {};\n\t\t\toptions = options || {};\n\t\n\t\t\tif (e.metaKey || e.altKey) return;\n\t\t\tif (!options.force && $input.data('grow') === false) return;\n\t\n\t\t\tvalue = $input.val();\n\t\t\tif (e.type && e.type.toLowerCase() === 'keydown') {\n\t\t\t\tkeyCode = e.keyCode;\n\t\t\t\tprintable = (\n\t\t\t\t\t(keyCode >= 97 && keyCode <= 122) || // a-z\n\t\t\t\t\t(keyCode >= 65 && keyCode <= 90)  || // A-Z\n\t\t\t\t\t(keyCode >= 48 && keyCode <= 57)  || // 0-9\n\t\t\t\t\tkeyCode === 32 // space\n\t\t\t\t);\n\t\n\t\t\t\tif (keyCode === KEY_DELETE || keyCode === KEY_BACKSPACE) {\n\t\t\t\t\tselection = getSelection($input[0]);\n\t\t\t\t\tif (selection.length) {\n\t\t\t\t\t\tvalue = value.substring(0, selection.start) + value.substring(selection.start + selection.length);\n\t\t\t\t\t} else if (keyCode === KEY_BACKSPACE && selection.start) {\n\t\t\t\t\t\tvalue = value.substring(0, selection.start - 1) + value.substring(selection.start + 1);\n\t\t\t\t\t} else if (keyCode === KEY_DELETE && typeof selection.start !== 'undefined') {\n\t\t\t\t\t\tvalue = value.substring(0, selection.start) + value.substring(selection.start + 1);\n\t\t\t\t\t}\n\t\t\t\t} else if (printable) {\n\t\t\t\t\tshift = e.shiftKey;\n\t\t\t\t\tcharacter = String.fromCharCode(e.keyCode);\n\t\t\t\t\tif (shift) character = character.toUpperCase();\n\t\t\t\t\telse character = character.toLowerCase();\n\t\t\t\t\tvalue += character;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tplaceholder = $input.attr('placeholder');\n\t\t\tif (!value && placeholder) {\n\t\t\t\tvalue = placeholder;\n\t\t\t}\n\t\n\t\t\twidth = measureString(value, $input) + 4;\n\t\t\tif (width !== currentWidth) {\n\t\t\t\tcurrentWidth = width;\n\t\t\t\t$input.width(width);\n\t\t\t\t$input.triggerHandler('resize');\n\t\t\t}\n\t\t};\n\t\n\t\t$input.on('keydown keyup update blur', update);\n\t\tupdate();\n\t};\n\t\n\tvar Selectize = function($input, settings) {\n\t\tvar key, i, n, dir, input, self = this;\n\t\tinput = $input[0];\n\t\tinput.selectize = self;\n\t\n\t\t// detect rtl environment\n\t\tvar computedStyle = window.getComputedStyle && window.getComputedStyle(input, null);\n\t\tdir = computedStyle ? computedStyle.getPropertyValue('direction') : input.currentStyle && input.currentStyle.direction;\n\t\tdir = dir || $input.parents('[dir]:first').attr('dir') || '';\n\t\n\t\t// setup default state\n\t\t$.extend(self, {\n\t\t\torder            : 0,\n\t\t\tsettings         : settings,\n\t\t\t$input           : $input,\n\t\t\ttabIndex         : $input.attr('tabindex') || '',\n\t\t\ttagType          : input.tagName.toLowerCase() === 'select' ? TAG_SELECT : TAG_INPUT,\n\t\t\trtl              : /rtl/i.test(dir),\n\t\n\t\t\teventNS          : '.selectize' + (++Selectize.count),\n\t\t\thighlightedValue : null,\n\t\t\tisOpen           : false,\n\t\t\tisDisabled       : false,\n\t\t\tisRequired       : $input.is('[required]'),\n\t\t\tisInvalid        : false,\n\t\t\tisLocked         : false,\n\t\t\tisFocused        : false,\n\t\t\tisInputHidden    : false,\n\t\t\tisSetup          : false,\n\t\t\tisShiftDown      : false,\n\t\t\tisCmdDown        : false,\n\t\t\tisCtrlDown       : false,\n\t\t\tignoreFocus      : false,\n\t\t\tignoreBlur       : false,\n\t\t\tignoreHover      : false,\n\t\t\thasOptions       : false,\n\t\t\tcurrentResults   : null,\n\t\t\tlastValue        : '',\n\t\t\tcaretPos         : 0,\n\t\t\tloading          : 0,\n\t\t\tloadedSearches   : {},\n\t\n\t\t\t$activeOption    : null,\n\t\t\t$activeItems     : [],\n\t\n\t\t\toptgroups        : {},\n\t\t\toptions          : {},\n\t\t\tuserOptions      : {},\n\t\t\titems            : [],\n\t\t\trenderCache      : {},\n\t\t\tonSearchChange   : settings.loadThrottle === null ? self.onSearchChange : debounce(self.onSearchChange, settings.loadThrottle)\n\t\t});\n\t\n\t\t// search system\n\t\tself.sifter = new Sifter(this.options, {diacritics: settings.diacritics});\n\t\n\t\t// build options table\n\t\tif (self.settings.options) {\n\t\t\tfor (i = 0, n = self.settings.options.length; i < n; i++) {\n\t\t\t\tself.registerOption(self.settings.options[i]);\n\t\t\t}\n\t\t\tdelete self.settings.options;\n\t\t}\n\t\n\t\t// build optgroup table\n\t\tif (self.settings.optgroups) {\n\t\t\tfor (i = 0, n = self.settings.optgroups.length; i < n; i++) {\n\t\t\t\tself.registerOptionGroup(self.settings.optgroups[i]);\n\t\t\t}\n\t\t\tdelete self.settings.optgroups;\n\t\t}\n\t\n\t\t// option-dependent defaults\n\t\tself.settings.mode = self.settings.mode || (self.settings.maxItems === 1 ? 'single' : 'multi');\n\t\tif (typeof self.settings.hideSelected !== 'boolean') {\n\t\t\tself.settings.hideSelected = self.settings.mode === 'multi';\n\t\t}\n\t\n\t\tself.initializePlugins(self.settings.plugins);\n\t\tself.setupCallbacks();\n\t\tself.setupTemplates();\n\t\tself.setup();\n\t};\n\t\n\t// mixins\n\t// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\t\n\tMicroEvent.mixin(Selectize);\n\tMicroPlugin.mixin(Selectize);\n\t\n\t// methods\n\t// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\t\n\t$.extend(Selectize.prototype, {\n\t\n\t\t/**\n\t\t * Creates all elements and sets up event bindings.\n\t\t */\n\t\tsetup: function() {\n\t\t\tvar self      = this;\n\t\t\tvar settings  = self.settings;\n\t\t\tvar eventNS   = self.eventNS;\n\t\t\tvar $window   = $(window);\n\t\t\tvar $document = $(document);\n\t\t\tvar $input    = self.$input;\n\t\n\t\t\tvar $wrapper;\n\t\t\tvar $control;\n\t\t\tvar $control_input;\n\t\t\tvar $dropdown;\n\t\t\tvar $dropdown_content;\n\t\t\tvar $dropdown_parent;\n\t\t\tvar inputMode;\n\t\t\tvar timeout_blur;\n\t\t\tvar timeout_focus;\n\t\t\tvar classes;\n\t\t\tvar classes_plugins;\n\t\n\t\t\tinputMode         = self.settings.mode;\n\t\t\tclasses           = $input.attr('class') || '';\n\t\n\t\t\t$wrapper          = $('<div>').addClass(settings.wrapperClass).addClass(classes).addClass(inputMode);\n\t\t\t$control          = $('<div>').addClass(settings.inputClass).addClass('items').appendTo($wrapper);\n\t\t\t$control_input    = $('<input type=\"text\" autocomplete=\"off\" />').appendTo($control).attr('tabindex', $input.is(':disabled') ? '-1' : self.tabIndex);\n\t\t\t$dropdown_parent  = $(settings.dropdownParent || $wrapper);\n\t\t\t$dropdown         = $('<div>').addClass(settings.dropdownClass).addClass(inputMode).hide().appendTo($dropdown_parent);\n\t\t\t$dropdown_content = $('<div>').addClass(settings.dropdownContentClass).appendTo($dropdown);\n\t\n\t\t\tif(self.settings.copyClassesToDropdown) {\n\t\t\t\t$dropdown.addClass(classes);\n\t\t\t}\n\t\n\t\t\t$wrapper.css({\n\t\t\t\twidth: $input[0].style.width\n\t\t\t});\n\t\n\t\t\tif (self.plugins.names.length) {\n\t\t\t\tclasses_plugins = 'plugin-' + self.plugins.names.join(' plugin-');\n\t\t\t\t$wrapper.addClass(classes_plugins);\n\t\t\t\t$dropdown.addClass(classes_plugins);\n\t\t\t}\n\t\n\t\t\tif ((settings.maxItems === null || settings.maxItems > 1) && self.tagType === TAG_SELECT) {\n\t\t\t\t$input.attr('multiple', 'multiple');\n\t\t\t}\n\t\n\t\t\tif (self.settings.placeholder) {\n\t\t\t\t$control_input.attr('placeholder', settings.placeholder);\n\t\t\t}\n\t\n\t\t\t// if splitOn was not passed in, construct it from the delimiter to allow pasting universally\n\t\t\tif (!self.settings.splitOn && self.settings.delimiter) {\n\t\t\t\tvar delimiterEscaped = self.settings.delimiter.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n\t\t\t\tself.settings.splitOn = new RegExp('\\\\s*' + delimiterEscaped + '+\\\\s*');\n\t\t\t}\n\t\n\t\t\tif ($input.attr('autocorrect')) {\n\t\t\t\t$control_input.attr('autocorrect', $input.attr('autocorrect'));\n\t\t\t}\n\t\n\t\t\tif ($input.attr('autocapitalize')) {\n\t\t\t\t$control_input.attr('autocapitalize', $input.attr('autocapitalize'));\n\t\t\t}\n\t\n\t\t\tself.$wrapper          = $wrapper;\n\t\t\tself.$control          = $control;\n\t\t\tself.$control_input    = $control_input;\n\t\t\tself.$dropdown         = $dropdown;\n\t\t\tself.$dropdown_content = $dropdown_content;\n\t\n\t\t\t$dropdown.on('mouseenter', '[data-selectable]', function() { return self.onOptionHover.apply(self, arguments); });\n\t\t\t$dropdown.on('mousedown click', '[data-selectable]', function() { return self.onOptionSelect.apply(self, arguments); });\n\t\t\twatchChildEvent($control, 'mousedown', '*:not(input)', function() { return self.onItemSelect.apply(self, arguments); });\n\t\t\tautoGrow($control_input);\n\t\n\t\t\t$control.on({\n\t\t\t\tmousedown : function() { return self.onMouseDown.apply(self, arguments); },\n\t\t\t\tclick     : function() { return self.onClick.apply(self, arguments); }\n\t\t\t});\n\t\n\t\t\t$control_input.on({\n\t\t\t\tmousedown : function(e) { e.stopPropagation(); },\n\t\t\t\tkeydown   : function() { return self.onKeyDown.apply(self, arguments); },\n\t\t\t\tkeyup     : function() { return self.onKeyUp.apply(self, arguments); },\n\t\t\t\tkeypress  : function() { return self.onKeyPress.apply(self, arguments); },\n\t\t\t\tresize    : function() { self.positionDropdown.apply(self, []); },\n\t\t\t\tblur      : function() { return self.onBlur.apply(self, arguments); },\n\t\t\t\tfocus     : function() { self.ignoreBlur = false; return self.onFocus.apply(self, arguments); },\n\t\t\t\tpaste     : function() { return self.onPaste.apply(self, arguments); }\n\t\t\t});\n\t\n\t\t\t$document.on('keydown' + eventNS, function(e) {\n\t\t\t\tself.isCmdDown = e[IS_MAC ? 'metaKey' : 'ctrlKey'];\n\t\t\t\tself.isCtrlDown = e[IS_MAC ? 'altKey' : 'ctrlKey'];\n\t\t\t\tself.isShiftDown = e.shiftKey;\n\t\t\t});\n\t\n\t\t\t$document.on('keyup' + eventNS, function(e) {\n\t\t\t\tif (e.keyCode === KEY_CTRL) self.isCtrlDown = false;\n\t\t\t\tif (e.keyCode === KEY_SHIFT) self.isShiftDown = false;\n\t\t\t\tif (e.keyCode === KEY_CMD) self.isCmdDown = false;\n\t\t\t});\n\t\n\t\t\t$document.on('mousedown' + eventNS, function(e) {\n\t\t\t\tif (self.isFocused) {\n\t\t\t\t\t// prevent events on the dropdown scrollbar from causing the control to blur\n\t\t\t\t\tif (e.target === self.$dropdown[0] || e.target.parentNode === self.$dropdown[0]) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\t// blur on click outside\n\t\t\t\t\tif (!self.$control.has(e.target).length && e.target !== self.$control[0]) {\n\t\t\t\t\t\tself.blur(e.target);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\t$window.on(['scroll' + eventNS, 'resize' + eventNS].join(' '), function() {\n\t\t\t\tif (self.isOpen) {\n\t\t\t\t\tself.positionDropdown.apply(self, arguments);\n\t\t\t\t}\n\t\t\t});\n\t\t\t$window.on('mousemove' + eventNS, function() {\n\t\t\t\tself.ignoreHover = false;\n\t\t\t});\n\t\n\t\t\t// store original children and tab index so that they can be\n\t\t\t// restored when the destroy() method is called.\n\t\t\tthis.revertSettings = {\n\t\t\t\t$children : $input.children().detach(),\n\t\t\t\ttabindex  : $input.attr('tabindex')\n\t\t\t};\n\t\n\t\t\t$input.attr('tabindex', -1).hide().after(self.$wrapper);\n\t\n\t\t\tif ($.isArray(settings.items)) {\n\t\t\t\tself.setValue(settings.items);\n\t\t\t\tdelete settings.items;\n\t\t\t}\n\t\n\t\t\t// feature detect for the validation API\n\t\t\tif (SUPPORTS_VALIDITY_API) {\n\t\t\t\t$input.on('invalid' + eventNS, function(e) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tself.isInvalid = true;\n\t\t\t\t\tself.refreshState();\n\t\t\t\t});\n\t\t\t}\n\t\n\t\t\tself.updateOriginalInput();\n\t\t\tself.refreshItems();\n\t\t\tself.refreshState();\n\t\t\tself.updatePlaceholder();\n\t\t\tself.isSetup = true;\n\t\n\t\t\tif ($input.is(':disabled')) {\n\t\t\t\tself.disable();\n\t\t\t}\n\t\n\t\t\tself.on('change', this.onChange);\n\t\n\t\t\t$input.data('selectize', self);\n\t\t\t$input.addClass('selectized');\n\t\t\tself.trigger('initialize');\n\t\n\t\t\t// preload options\n\t\t\tif (settings.preload === true) {\n\t\t\t\tself.onSearchChange('');\n\t\t\t}\n\t\n\t\t},\n\t\n\t\t/**\n\t\t * Sets up default rendering functions.\n\t\t */\n\t\tsetupTemplates: function() {\n\t\t\tvar self = this;\n\t\t\tvar field_label = self.settings.labelField;\n\t\t\tvar field_optgroup = self.settings.optgroupLabelField;\n\t\n\t\t\tvar templates = {\n\t\t\t\t'optgroup': function(data) {\n\t\t\t\t\treturn '<div class=\"optgroup\">' + data.html + '</div>';\n\t\t\t\t},\n\t\t\t\t'optgroup_header': function(data, escape) {\n\t\t\t\t\treturn '<div class=\"optgroup-header\">' + escape(data[field_optgroup]) + '</div>';\n\t\t\t\t},\n\t\t\t\t'option': function(data, escape) {\n\t\t\t\t\treturn '<div class=\"option\">' + escape(data[field_label]) + '</div>';\n\t\t\t\t},\n\t\t\t\t'item': function(data, escape) {\n\t\t\t\t\treturn '<div class=\"item\">' + escape(data[field_label]) + '</div>';\n\t\t\t\t},\n\t\t\t\t'option_create': function(data, escape) {\n\t\t\t\t\treturn '<div class=\"create\">Add <strong>' + escape(data.input) + '</strong>&hellip;</div>';\n\t\t\t\t}\n\t\t\t};\n\t\n\t\t\tself.settings.render = $.extend({}, templates, self.settings.render);\n\t\t},\n\t\n\t\t/**\n\t\t * Maps fired events to callbacks provided\n\t\t * in the settings used when creating the control.\n\t\t */\n\t\tsetupCallbacks: function() {\n\t\t\tvar key, fn, callbacks = {\n\t\t\t\t'initialize'      : 'onInitialize',\n\t\t\t\t'change'          : 'onChange',\n\t\t\t\t'item_add'        : 'onItemAdd',\n\t\t\t\t'item_remove'     : 'onItemRemove',\n\t\t\t\t'clear'           : 'onClear',\n\t\t\t\t'option_add'      : 'onOptionAdd',\n\t\t\t\t'option_remove'   : 'onOptionRemove',\n\t\t\t\t'option_clear'    : 'onOptionClear',\n\t\t\t\t'optgroup_add'    : 'onOptionGroupAdd',\n\t\t\t\t'optgroup_remove' : 'onOptionGroupRemove',\n\t\t\t\t'optgroup_clear'  : 'onOptionGroupClear',\n\t\t\t\t'dropdown_open'   : 'onDropdownOpen',\n\t\t\t\t'dropdown_close'  : 'onDropdownClose',\n\t\t\t\t'type'            : 'onType',\n\t\t\t\t'load'            : 'onLoad',\n\t\t\t\t'focus'           : 'onFocus',\n\t\t\t\t'blur'            : 'onBlur'\n\t\t\t};\n\t\n\t\t\tfor (key in callbacks) {\n\t\t\t\tif (callbacks.hasOwnProperty(key)) {\n\t\t\t\t\tfn = this.settings[callbacks[key]];\n\t\t\t\t\tif (fn) this.on(key, fn);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Triggered when the main control element\n\t\t * has a click event.\n\t\t *\n\t\t * @param {object} e\n\t\t * @return {boolean}\n\t\t */\n\t\tonClick: function(e) {\n\t\t\tvar self = this;\n\t\n\t\t\t// necessary for mobile webkit devices (manual focus triggering\n\t\t\t// is ignored unless invoked within a click event)\n\t\t\tif (!self.isFocused) {\n\t\t\t\tself.focus();\n\t\t\t\te.preventDefault();\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Triggered when the main control element\n\t\t * has a mouse down event.\n\t\t *\n\t\t * @param {object} e\n\t\t * @return {boolean}\n\t\t */\n\t\tonMouseDown: function(e) {\n\t\t\tvar self = this;\n\t\t\tvar defaultPrevented = e.isDefaultPrevented();\n\t\t\tvar $target = $(e.target);\n\t\n\t\t\tif (self.isFocused) {\n\t\t\t\t// retain focus by preventing native handling. if the\n\t\t\t\t// event target is the input it should not be modified.\n\t\t\t\t// otherwise, text selection within the input won't work.\n\t\t\t\tif (e.target !== self.$control_input[0]) {\n\t\t\t\t\tif (self.settings.mode === 'single') {\n\t\t\t\t\t\t// toggle dropdown\n\t\t\t\t\t\tself.isOpen ? self.close() : self.open();\n\t\t\t\t\t} else if (!defaultPrevented) {\n\t\t\t\t\t\tself.setActiveItem(null);\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// give control focus\n\t\t\t\tif (!defaultPrevented) {\n\t\t\t\t\twindow.setTimeout(function() {\n\t\t\t\t\t\tself.focus();\n\t\t\t\t\t}, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Triggered when the value of the control has been changed.\n\t\t * This should propagate the event to the original DOM\n\t\t * input / select element.\n\t\t */\n\t\tonChange: function() {\n\t\t\tthis.$input.trigger('change');\n\t\t},\n\t\n\t\t/**\n\t\t * Triggered on <input> paste.\n\t\t *\n\t\t * @param {object} e\n\t\t * @returns {boolean}\n\t\t */\n\t\tonPaste: function(e) {\n\t\t\tvar self = this;\n\t\t\tif (self.isFull() || self.isInputHidden || self.isLocked) {\n\t\t\t\te.preventDefault();\n\t\t\t} else {\n\t\t\t\t// If a regex or string is included, this will split the pasted\n\t\t\t\t// input and create Items for each separate value\n\t\t\t\tif (self.settings.splitOn) {\n\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\tvar splitInput = $.trim(self.$control_input.val() || '').split(self.settings.splitOn);\n\t\t\t\t\t\tfor (var i = 0, n = splitInput.length; i < n; i++) {\n\t\t\t\t\t\t\tself.createItem(splitInput[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Triggered on <input> keypress.\n\t\t *\n\t\t * @param {object} e\n\t\t * @returns {boolean}\n\t\t */\n\t\tonKeyPress: function(e) {\n\t\t\tif (this.isLocked) return e && e.preventDefault();\n\t\t\tvar character = String.fromCharCode(e.keyCode || e.which);\n\t\t\tif (this.settings.create && this.settings.mode === 'multi' && character === this.settings.delimiter) {\n\t\t\t\tthis.createItem();\n\t\t\t\te.preventDefault();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Triggered on <input> keydown.\n\t\t *\n\t\t * @param {object} e\n\t\t * @returns {boolean}\n\t\t */\n\t\tonKeyDown: function(e) {\n\t\t\tvar isInput = e.target === this.$control_input[0];\n\t\t\tvar self = this;\n\t\n\t\t\tif (self.isLocked) {\n\t\t\t\tif (e.keyCode !== KEY_TAB) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tswitch (e.keyCode) {\n\t\t\t\tcase KEY_A:\n\t\t\t\t\tif (self.isCmdDown) {\n\t\t\t\t\t\tself.selectAll();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase KEY_ESC:\n\t\t\t\t\tif (self.isOpen) {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\tself.close();\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\tcase KEY_N:\n\t\t\t\t\tif (!e.ctrlKey || e.altKey) break;\n\t\t\t\tcase KEY_DOWN:\n\t\t\t\t\tif (!self.isOpen && self.hasOptions) {\n\t\t\t\t\t\tself.open();\n\t\t\t\t\t} else if (self.$activeOption) {\n\t\t\t\t\t\tself.ignoreHover = true;\n\t\t\t\t\t\tvar $next = self.getAdjacentOption(self.$activeOption, 1);\n\t\t\t\t\t\tif ($next.length) self.setActiveOption($next, true, true);\n\t\t\t\t\t}\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\treturn;\n\t\t\t\tcase KEY_P:\n\t\t\t\t\tif (!e.ctrlKey || e.altKey) break;\n\t\t\t\tcase KEY_UP:\n\t\t\t\t\tif (self.$activeOption) {\n\t\t\t\t\t\tself.ignoreHover = true;\n\t\t\t\t\t\tvar $prev = self.getAdjacentOption(self.$activeOption, -1);\n\t\t\t\t\t\tif ($prev.length) self.setActiveOption($prev, true, true);\n\t\t\t\t\t}\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\treturn;\n\t\t\t\tcase KEY_RETURN:\n\t\t\t\t\tif (self.isOpen && self.$activeOption) {\n\t\t\t\t\t\tself.onOptionSelect({currentTarget: self.$activeOption});\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\tcase KEY_LEFT:\n\t\t\t\t\tself.advanceSelection(-1, e);\n\t\t\t\t\treturn;\n\t\t\t\tcase KEY_RIGHT:\n\t\t\t\t\tself.advanceSelection(1, e);\n\t\t\t\t\treturn;\n\t\t\t\tcase KEY_TAB:\n\t\t\t\t\tif (self.settings.selectOnTab && self.isOpen && self.$activeOption) {\n\t\t\t\t\t\tself.onOptionSelect({currentTarget: self.$activeOption});\n\t\n\t\t\t\t\t\t// Default behaviour is to jump to the next field, we only want this\n\t\t\t\t\t\t// if the current field doesn't accept any more entries\n\t\t\t\t\t\tif (!self.isFull()) {\n\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (self.settings.create && self.createItem()) {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\tcase KEY_BACKSPACE:\n\t\t\t\tcase KEY_DELETE:\n\t\t\t\t\tself.deleteSelection(e);\n\t\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tif ((self.isFull() || self.isInputHidden) && !(IS_MAC ? e.metaKey : e.ctrlKey)) {\n\t\t\t\te.preventDefault();\n\t\t\t\treturn;\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Triggered on <input> keyup.\n\t\t *\n\t\t * @param {object} e\n\t\t * @returns {boolean}\n\t\t */\n\t\tonKeyUp: function(e) {\n\t\t\tvar self = this;\n\t\n\t\t\tif (self.isLocked) return e && e.preventDefault();\n\t\t\tvar value = self.$control_input.val() || '';\n\t\t\tif (self.lastValue !== value) {\n\t\t\t\tself.lastValue = value;\n\t\t\t\tself.onSearchChange(value);\n\t\t\t\tself.refreshOptions();\n\t\t\t\tself.trigger('type', value);\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Invokes the user-provide option provider / loader.\n\t\t *\n\t\t * Note: this function is debounced in the Selectize\n\t\t * constructor (by `settings.loadDelay` milliseconds)\n\t\t *\n\t\t * @param {string} value\n\t\t */\n\t\tonSearchChange: function(value) {\n\t\t\tvar self = this;\n\t\t\tvar fn = self.settings.load;\n\t\t\tif (!fn) return;\n\t\t\tif (self.loadedSearches.hasOwnProperty(value)) return;\n\t\t\tself.loadedSearches[value] = true;\n\t\t\tself.load(function(callback) {\n\t\t\t\tfn.apply(self, [value, callback]);\n\t\t\t});\n\t\t},\n\t\n\t\t/**\n\t\t * Triggered on <input> focus.\n\t\t *\n\t\t * @param {object} e (optional)\n\t\t * @returns {boolean}\n\t\t */\n\t\tonFocus: function(e) {\n\t\t\tvar self = this;\n\t\t\tvar wasFocused = self.isFocused;\n\t\n\t\t\tif (self.isDisabled) {\n\t\t\t\tself.blur();\n\t\t\t\te && e.preventDefault();\n\t\t\t\treturn false;\n\t\t\t}\n\t\n\t\t\tif (self.ignoreFocus) return;\n\t\t\tself.isFocused = true;\n\t\t\tif (self.settings.preload === 'focus') self.onSearchChange('');\n\t\n\t\t\tif (!wasFocused) self.trigger('focus');\n\t\n\t\t\tif (!self.$activeItems.length) {\n\t\t\t\tself.showInput();\n\t\t\t\tself.setActiveItem(null);\n\t\t\t\tself.refreshOptions(!!self.settings.openOnFocus);\n\t\t\t}\n\t\n\t\t\tself.refreshState();\n\t\t},\n\t\n\t\t/**\n\t\t * Triggered on <input> blur.\n\t\t *\n\t\t * @param {object} e\n\t\t * @param {Element} dest\n\t\t */\n\t\tonBlur: function(e, dest) {\n\t\t\tvar self = this;\n\t\t\tif (!self.isFocused) return;\n\t\t\tself.isFocused = false;\n\t\n\t\t\tif (self.ignoreFocus) {\n\t\t\t\treturn;\n\t\t\t} else if (!self.ignoreBlur && document.activeElement === self.$dropdown_content[0]) {\n\t\t\t\t// necessary to prevent IE closing the dropdown when the scrollbar is clicked\n\t\t\t\tself.ignoreBlur = true;\n\t\t\t\tself.onFocus(e);\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tvar deactivate = function() {\n\t\t\t\tself.close();\n\t\t\t\tself.setTextboxValue('');\n\t\t\t\tself.setActiveItem(null);\n\t\t\t\tself.setActiveOption(null);\n\t\t\t\tself.setCaret(self.items.length);\n\t\t\t\tself.refreshState();\n\t\n\t\t\t\t// IE11 bug: element still marked as active\n\t\t\t\t(dest || document.body).focus();\n\t\n\t\t\t\tself.ignoreFocus = false;\n\t\t\t\tself.trigger('blur');\n\t\t\t};\n\t\n\t\t\tself.ignoreFocus = true;\n\t\t\tif (self.settings.create && self.settings.createOnBlur) {\n\t\t\t\tself.createItem(null, false, deactivate);\n\t\t\t} else {\n\t\t\t\tdeactivate();\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Triggered when the user rolls over\n\t\t * an option in the autocomplete dropdown menu.\n\t\t *\n\t\t * @param {object} e\n\t\t * @returns {boolean}\n\t\t */\n\t\tonOptionHover: function(e) {\n\t\t\tif (this.ignoreHover) return;\n\t\t\tthis.setActiveOption(e.currentTarget, false);\n\t\t},\n\t\n\t\t/**\n\t\t * Triggered when the user clicks on an option\n\t\t * in the autocomplete dropdown menu.\n\t\t *\n\t\t * @param {object} e\n\t\t * @returns {boolean}\n\t\t */\n\t\tonOptionSelect: function(e) {\n\t\t\tvar value, $target, $option, self = this;\n\t\n\t\t\tif (e.preventDefault) {\n\t\t\t\te.preventDefault();\n\t\t\t\te.stopPropagation();\n\t\t\t}\n\t\n\t\t\t$target = $(e.currentTarget);\n\t\t\tif ($target.hasClass('create')) {\n\t\t\t\tself.createItem(null, function() {\n\t\t\t\t\tif (self.settings.closeAfterSelect) {\n\t\t\t\t\t\tself.close();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tvalue = $target.attr('data-value');\n\t\t\t\tif (typeof value !== 'undefined') {\n\t\t\t\t\tself.lastQuery = null;\n\t\t\t\t\tself.setTextboxValue('');\n\t\t\t\t\tself.addItem(value);\n\t\t\t\t\tif (self.settings.closeAfterSelect) {\n\t\t\t\t\t\tself.close();\n\t\t\t\t\t} else if (!self.settings.hideSelected && e.type && /mouse/.test(e.type)) {\n\t\t\t\t\t\tself.setActiveOption(self.getOption(value));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Triggered when the user clicks on an item\n\t\t * that has been selected.\n\t\t *\n\t\t * @param {object} e\n\t\t * @returns {boolean}\n\t\t */\n\t\tonItemSelect: function(e) {\n\t\t\tvar self = this;\n\t\n\t\t\tif (self.isLocked) return;\n\t\t\tif (self.settings.mode === 'multi') {\n\t\t\t\te.preventDefault();\n\t\t\t\tself.setActiveItem(e.currentTarget, e);\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Invokes the provided method that provides\n\t\t * results to a callback---which are then added\n\t\t * as options to the control.\n\t\t *\n\t\t * @param {function} fn\n\t\t */\n\t\tload: function(fn) {\n\t\t\tvar self = this;\n\t\t\tvar $wrapper = self.$wrapper.addClass(self.settings.loadingClass);\n\t\n\t\t\tself.loading++;\n\t\t\tfn.apply(self, [function(results) {\n\t\t\t\tself.loading = Math.max(self.loading - 1, 0);\n\t\t\t\tif (results && results.length) {\n\t\t\t\t\tself.addOption(results);\n\t\t\t\t\tself.refreshOptions(self.isFocused && !self.isInputHidden);\n\t\t\t\t}\n\t\t\t\tif (!self.loading) {\n\t\t\t\t\t$wrapper.removeClass(self.settings.loadingClass);\n\t\t\t\t}\n\t\t\t\tself.trigger('load', results);\n\t\t\t}]);\n\t\t},\n\t\n\t\t/**\n\t\t * Sets the input field of the control to the specified value.\n\t\t *\n\t\t * @param {string} value\n\t\t */\n\t\tsetTextboxValue: function(value) {\n\t\t\tvar $input = this.$control_input;\n\t\t\tvar changed = $input.val() !== value;\n\t\t\tif (changed) {\n\t\t\t\t$input.val(value).triggerHandler('update');\n\t\t\t\tthis.lastValue = value;\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Returns the value of the control. If multiple items\n\t\t * can be selected (e.g. <select multiple>), this returns\n\t\t * an array. If only one item can be selected, this\n\t\t * returns a string.\n\t\t *\n\t\t * @returns {mixed}\n\t\t */\n\t\tgetValue: function() {\n\t\t\tif (this.tagType === TAG_SELECT && this.$input.attr('multiple')) {\n\t\t\t\treturn this.items;\n\t\t\t} else {\n\t\t\t\treturn this.items.join(this.settings.delimiter);\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Resets the selected items to the given value.\n\t\t *\n\t\t * @param {mixed} value\n\t\t */\n\t\tsetValue: function(value, silent) {\n\t\t\tvar events = silent ? [] : ['change'];\n\t\n\t\t\tdebounce_events(this, events, function() {\n\t\t\t\tthis.clear(silent);\n\t\t\t\tthis.addItems(value, silent);\n\t\t\t});\n\t\t},\n\t\n\t\t/**\n\t\t * Sets the selected item.\n\t\t *\n\t\t * @param {object} $item\n\t\t * @param {object} e (optional)\n\t\t */\n\t\tsetActiveItem: function($item, e) {\n\t\t\tvar self = this;\n\t\t\tvar eventName;\n\t\t\tvar i, idx, begin, end, item, swap;\n\t\t\tvar $last;\n\t\n\t\t\tif (self.settings.mode === 'single') return;\n\t\t\t$item = $($item);\n\t\n\t\t\t// clear the active selection\n\t\t\tif (!$item.length) {\n\t\t\t\t$(self.$activeItems).removeClass('active');\n\t\t\t\tself.$activeItems = [];\n\t\t\t\tif (self.isFocused) {\n\t\t\t\t\tself.showInput();\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\t// modify selection\n\t\t\teventName = e && e.type.toLowerCase();\n\t\n\t\t\tif (eventName === 'mousedown' && self.isShiftDown && self.$activeItems.length) {\n\t\t\t\t$last = self.$control.children('.active:last');\n\t\t\t\tbegin = Array.prototype.indexOf.apply(self.$control[0].childNodes, [$last[0]]);\n\t\t\t\tend   = Array.prototype.indexOf.apply(self.$control[0].childNodes, [$item[0]]);\n\t\t\t\tif (begin > end) {\n\t\t\t\t\tswap  = begin;\n\t\t\t\t\tbegin = end;\n\t\t\t\t\tend   = swap;\n\t\t\t\t}\n\t\t\t\tfor (i = begin; i <= end; i++) {\n\t\t\t\t\titem = self.$control[0].childNodes[i];\n\t\t\t\t\tif (self.$activeItems.indexOf(item) === -1) {\n\t\t\t\t\t\t$(item).addClass('active');\n\t\t\t\t\t\tself.$activeItems.push(item);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\te.preventDefault();\n\t\t\t} else if ((eventName === 'mousedown' && self.isCtrlDown) || (eventName === 'keydown' && this.isShiftDown)) {\n\t\t\t\tif ($item.hasClass('active')) {\n\t\t\t\t\tidx = self.$activeItems.indexOf($item[0]);\n\t\t\t\t\tself.$activeItems.splice(idx, 1);\n\t\t\t\t\t$item.removeClass('active');\n\t\t\t\t} else {\n\t\t\t\t\tself.$activeItems.push($item.addClass('active')[0]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$(self.$activeItems).removeClass('active');\n\t\t\t\tself.$activeItems = [$item.addClass('active')[0]];\n\t\t\t}\n\t\n\t\t\t// ensure control has focus\n\t\t\tself.hideInput();\n\t\t\tif (!this.isFocused) {\n\t\t\t\tself.focus();\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Sets the selected item in the dropdown menu\n\t\t * of available options.\n\t\t *\n\t\t * @param {object} $object\n\t\t * @param {boolean} scroll\n\t\t * @param {boolean} animate\n\t\t */\n\t\tsetActiveOption: function($option, scroll, animate) {\n\t\t\tvar height_menu, height_item, y;\n\t\t\tvar scroll_top, scroll_bottom;\n\t\t\tvar self = this;\n\t\n\t\t\tif (self.$activeOption) self.$activeOption.removeClass('active');\n\t\t\tself.$activeOption = null;\n\t\n\t\t\t$option = $($option);\n\t\t\tif (!$option.length) return;\n\t\n\t\t\tself.$activeOption = $option.addClass('active');\n\t\n\t\t\tif (scroll || !isset(scroll)) {\n\t\n\t\t\t\theight_menu   = self.$dropdown_content.height();\n\t\t\t\theight_item   = self.$activeOption.outerHeight(true);\n\t\t\t\tscroll        = self.$dropdown_content.scrollTop() || 0;\n\t\t\t\ty             = self.$activeOption.offset().top - self.$dropdown_content.offset().top + scroll;\n\t\t\t\tscroll_top    = y;\n\t\t\t\tscroll_bottom = y - height_menu + height_item;\n\t\n\t\t\t\tif (y + height_item > height_menu + scroll) {\n\t\t\t\t\tself.$dropdown_content.stop().animate({scrollTop: scroll_bottom}, animate ? self.settings.scrollDuration : 0);\n\t\t\t\t} else if (y < scroll) {\n\t\t\t\t\tself.$dropdown_content.stop().animate({scrollTop: scroll_top}, animate ? self.settings.scrollDuration : 0);\n\t\t\t\t}\n\t\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Selects all items (CTRL + A).\n\t\t */\n\t\tselectAll: function() {\n\t\t\tvar self = this;\n\t\t\tif (self.settings.mode === 'single') return;\n\t\n\t\t\tself.$activeItems = Array.prototype.slice.apply(self.$control.children(':not(input)').addClass('active'));\n\t\t\tif (self.$activeItems.length) {\n\t\t\t\tself.hideInput();\n\t\t\t\tself.close();\n\t\t\t}\n\t\t\tself.focus();\n\t\t},\n\t\n\t\t/**\n\t\t * Hides the input element out of view, while\n\t\t * retaining its focus.\n\t\t */\n\t\thideInput: function() {\n\t\t\tvar self = this;\n\t\n\t\t\tself.setTextboxValue('');\n\t\t\tself.$control_input.css({opacity: 0, position: 'absolute', left: self.rtl ? 10000 : -10000});\n\t\t\tself.isInputHidden = true;\n\t\t},\n\t\n\t\t/**\n\t\t * Restores input visibility.\n\t\t */\n\t\tshowInput: function() {\n\t\t\tthis.$control_input.css({opacity: 1, position: 'relative', left: 0});\n\t\t\tthis.isInputHidden = false;\n\t\t},\n\t\n\t\t/**\n\t\t * Gives the control focus.\n\t\t */\n\t\tfocus: function() {\n\t\t\tvar self = this;\n\t\t\tif (self.isDisabled) return;\n\t\n\t\t\tself.ignoreFocus = true;\n\t\t\tself.$control_input[0].focus();\n\t\t\twindow.setTimeout(function() {\n\t\t\t\tself.ignoreFocus = false;\n\t\t\t\tself.onFocus();\n\t\t\t}, 0);\n\t\t},\n\t\n\t\t/**\n\t\t * Forces the control out of focus.\n\t\t *\n\t\t * @param {Element} dest\n\t\t */\n\t\tblur: function(dest) {\n\t\t\tthis.$control_input[0].blur();\n\t\t\tthis.onBlur(null, dest);\n\t\t},\n\t\n\t\t/**\n\t\t * Returns a function that scores an object\n\t\t * to show how good of a match it is to the\n\t\t * provided query.\n\t\t *\n\t\t * @param {string} query\n\t\t * @param {object} options\n\t\t * @return {function}\n\t\t */\n\t\tgetScoreFunction: function(query) {\n\t\t\treturn this.sifter.getScoreFunction(query, this.getSearchOptions());\n\t\t},\n\t\n\t\t/**\n\t\t * Returns search options for sifter (the system\n\t\t * for scoring and sorting results).\n\t\t *\n\t\t * @see https://github.com/brianreavis/sifter.js\n\t\t * @return {object}\n\t\t */\n\t\tgetSearchOptions: function() {\n\t\t\tvar settings = this.settings;\n\t\t\tvar sort = settings.sortField;\n\t\t\tif (typeof sort === 'string') {\n\t\t\t\tsort = [{field: sort}];\n\t\t\t}\n\t\n\t\t\treturn {\n\t\t\t\tfields      : settings.searchField,\n\t\t\t\tconjunction : settings.searchConjunction,\n\t\t\t\tsort        : sort\n\t\t\t};\n\t\t},\n\t\n\t\t/**\n\t\t * Searches through available options and returns\n\t\t * a sorted array of matches.\n\t\t *\n\t\t * Returns an object containing:\n\t\t *\n\t\t *   - query {string}\n\t\t *   - tokens {array}\n\t\t *   - total {int}\n\t\t *   - items {array}\n\t\t *\n\t\t * @param {string} query\n\t\t * @returns {object}\n\t\t */\n\t\tsearch: function(query) {\n\t\t\tvar i, value, score, result, calculateScore;\n\t\t\tvar self     = this;\n\t\t\tvar settings = self.settings;\n\t\t\tvar options  = this.getSearchOptions();\n\t\n\t\t\t// validate user-provided result scoring function\n\t\t\tif (settings.score) {\n\t\t\t\tcalculateScore = self.settings.score.apply(this, [query]);\n\t\t\t\tif (typeof calculateScore !== 'function') {\n\t\t\t\t\tthrow new Error('Selectize \"score\" setting must be a function that returns a function');\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// perform search\n\t\t\tif (query !== self.lastQuery) {\n\t\t\t\tself.lastQuery = query;\n\t\t\t\tresult = self.sifter.search(query, $.extend(options, {score: calculateScore}));\n\t\t\t\tself.currentResults = result;\n\t\t\t} else {\n\t\t\t\tresult = $.extend(true, {}, self.currentResults);\n\t\t\t}\n\t\n\t\t\t// filter out selected items\n\t\t\tif (settings.hideSelected) {\n\t\t\t\tfor (i = result.items.length - 1; i >= 0; i--) {\n\t\t\t\t\tif (self.items.indexOf(hash_key(result.items[i].id)) !== -1) {\n\t\t\t\t\t\tresult.items.splice(i, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\treturn result;\n\t\t},\n\t\n\t\t/**\n\t\t * Refreshes the list of available options shown\n\t\t * in the autocomplete dropdown menu.\n\t\t *\n\t\t * @param {boolean} triggerDropdown\n\t\t */\n\t\trefreshOptions: function(triggerDropdown) {\n\t\t\tvar i, j, k, n, groups, groups_order, option, option_html, optgroup, optgroups, html, html_children, has_create_option;\n\t\t\tvar $active, $active_before, $create;\n\t\n\t\t\tif (typeof triggerDropdown === 'undefined') {\n\t\t\t\ttriggerDropdown = true;\n\t\t\t}\n\t\n\t\t\tvar self              = this;\n\t\t\tvar query             = $.trim(self.$control_input.val());\n\t\t\tvar results           = self.search(query);\n\t\t\tvar $dropdown_content = self.$dropdown_content;\n\t\t\tvar active_before     = self.$activeOption && hash_key(self.$activeOption.attr('data-value'));\n\t\n\t\t\t// build markup\n\t\t\tn = results.items.length;\n\t\t\tif (typeof self.settings.maxOptions === 'number') {\n\t\t\t\tn = Math.min(n, self.settings.maxOptions);\n\t\t\t}\n\t\n\t\t\t// render and group available options individually\n\t\t\tgroups = {};\n\t\t\tgroups_order = [];\n\t\n\t\t\tfor (i = 0; i < n; i++) {\n\t\t\t\toption      = self.options[results.items[i].id];\n\t\t\t\toption_html = self.render('option', option);\n\t\t\t\toptgroup    = option[self.settings.optgroupField] || '';\n\t\t\t\toptgroups   = $.isArray(optgroup) ? optgroup : [optgroup];\n\t\n\t\t\t\tfor (j = 0, k = optgroups && optgroups.length; j < k; j++) {\n\t\t\t\t\toptgroup = optgroups[j];\n\t\t\t\t\tif (!self.optgroups.hasOwnProperty(optgroup)) {\n\t\t\t\t\t\toptgroup = '';\n\t\t\t\t\t}\n\t\t\t\t\tif (!groups.hasOwnProperty(optgroup)) {\n\t\t\t\t\t\tgroups[optgroup] = [];\n\t\t\t\t\t\tgroups_order.push(optgroup);\n\t\t\t\t\t}\n\t\t\t\t\tgroups[optgroup].push(option_html);\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// sort optgroups\n\t\t\tif (this.settings.lockOptgroupOrder) {\n\t\t\t\tgroups_order.sort(function(a, b) {\n\t\t\t\t\tvar a_order = self.optgroups[a].$order || 0;\n\t\t\t\t\tvar b_order = self.optgroups[b].$order || 0;\n\t\t\t\t\treturn a_order - b_order;\n\t\t\t\t});\n\t\t\t}\n\t\n\t\t\t// render optgroup headers & join groups\n\t\t\thtml = [];\n\t\t\tfor (i = 0, n = groups_order.length; i < n; i++) {\n\t\t\t\toptgroup = groups_order[i];\n\t\t\t\tif (self.optgroups.hasOwnProperty(optgroup) && groups[optgroup].length) {\n\t\t\t\t\t// render the optgroup header and options within it,\n\t\t\t\t\t// then pass it to the wrapper template\n\t\t\t\t\thtml_children = self.render('optgroup_header', self.optgroups[optgroup]) || '';\n\t\t\t\t\thtml_children += groups[optgroup].join('');\n\t\t\t\t\thtml.push(self.render('optgroup', $.extend({}, self.optgroups[optgroup], {\n\t\t\t\t\t\thtml: html_children\n\t\t\t\t\t})));\n\t\t\t\t} else {\n\t\t\t\t\thtml.push(groups[optgroup].join(''));\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t$dropdown_content.html(html.join(''));\n\t\n\t\t\t// highlight matching terms inline\n\t\t\tif (self.settings.highlight && results.query.length && results.tokens.length) {\n\t\t\t\tfor (i = 0, n = results.tokens.length; i < n; i++) {\n\t\t\t\t\thighlight($dropdown_content, results.tokens[i].regex);\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// add \"selected\" class to selected options\n\t\t\tif (!self.settings.hideSelected) {\n\t\t\t\tfor (i = 0, n = self.items.length; i < n; i++) {\n\t\t\t\t\tself.getOption(self.items[i]).addClass('selected');\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// add create option\n\t\t\thas_create_option = self.canCreate(query);\n\t\t\tif (has_create_option) {\n\t\t\t\t$dropdown_content.prepend(self.render('option_create', {input: query}));\n\t\t\t\t$create = $($dropdown_content[0].childNodes[0]);\n\t\t\t}\n\t\n\t\t\t// activate\n\t\t\tself.hasOptions = results.items.length > 0 || has_create_option;\n\t\t\tif (self.hasOptions) {\n\t\t\t\tif (results.items.length > 0) {\n\t\t\t\t\t$active_before = active_before && self.getOption(active_before);\n\t\t\t\t\tif ($active_before && $active_before.length) {\n\t\t\t\t\t\t$active = $active_before;\n\t\t\t\t\t} else if (self.settings.mode === 'single' && self.items.length) {\n\t\t\t\t\t\t$active = self.getOption(self.items[0]);\n\t\t\t\t\t}\n\t\t\t\t\tif (!$active || !$active.length) {\n\t\t\t\t\t\tif ($create && !self.settings.addPrecedence) {\n\t\t\t\t\t\t\t$active = self.getAdjacentOption($create, 1);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$active = $dropdown_content.find('[data-selectable]:first');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$active = $create;\n\t\t\t\t}\n\t\t\t\tself.setActiveOption($active);\n\t\t\t\tif (triggerDropdown && !self.isOpen) { self.open(); }\n\t\t\t} else {\n\t\t\t\tself.setActiveOption(null);\n\t\t\t\tif (triggerDropdown && self.isOpen) { self.close(); }\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Adds an available option. If it already exists,\n\t\t * nothing will happen. Note: this does not refresh\n\t\t * the options list dropdown (use `refreshOptions`\n\t\t * for that).\n\t\t *\n\t\t * Usage:\n\t\t *\n\t\t *   this.addOption(data)\n\t\t *\n\t\t * @param {object|array} data\n\t\t */\n\t\taddOption: function(data) {\n\t\t\tvar i, n, value, self = this;\n\t\n\t\t\tif ($.isArray(data)) {\n\t\t\t\tfor (i = 0, n = data.length; i < n; i++) {\n\t\t\t\t\tself.addOption(data[i]);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tif (value = self.registerOption(data)) {\n\t\t\t\tself.userOptions[value] = true;\n\t\t\t\tself.lastQuery = null;\n\t\t\t\tself.trigger('option_add', value, data);\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Registers an option to the pool of options.\n\t\t *\n\t\t * @param {object} data\n\t\t * @return {boolean|string}\n\t\t */\n\t\tregisterOption: function(data) {\n\t\t\tvar key = hash_key(data[this.settings.valueField]);\n\t\t\tif (!key || this.options.hasOwnProperty(key)) return false;\n\t\t\tdata.$order = data.$order || ++this.order;\n\t\t\tthis.options[key] = data;\n\t\t\treturn key;\n\t\t},\n\t\n\t\t/**\n\t\t * Registers an option group to the pool of option groups.\n\t\t *\n\t\t * @param {object} data\n\t\t * @return {boolean|string}\n\t\t */\n\t\tregisterOptionGroup: function(data) {\n\t\t\tvar key = hash_key(data[this.settings.optgroupValueField]);\n\t\t\tif (!key) return false;\n\t\n\t\t\tdata.$order = data.$order || ++this.order;\n\t\t\tthis.optgroups[key] = data;\n\t\t\treturn key;\n\t\t},\n\t\n\t\t/**\n\t\t * Registers a new optgroup for options\n\t\t * to be bucketed into.\n\t\t *\n\t\t * @param {string} id\n\t\t * @param {object} data\n\t\t */\n\t\taddOptionGroup: function(id, data) {\n\t\t\tdata[this.settings.optgroupValueField] = id;\n\t\t\tif (id = this.registerOptionGroup(data)) {\n\t\t\t\tthis.trigger('optgroup_add', id, data);\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Removes an existing option group.\n\t\t *\n\t\t * @param {string} id\n\t\t */\n\t\tremoveOptionGroup: function(id) {\n\t\t\tif (this.optgroups.hasOwnProperty(id)) {\n\t\t\t\tdelete this.optgroups[id];\n\t\t\t\tthis.renderCache = {};\n\t\t\t\tthis.trigger('optgroup_remove', id);\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Clears all existing option groups.\n\t\t */\n\t\tclearOptionGroups: function() {\n\t\t\tthis.optgroups = {};\n\t\t\tthis.renderCache = {};\n\t\t\tthis.trigger('optgroup_clear');\n\t\t},\n\t\n\t\t/**\n\t\t * Updates an option available for selection. If\n\t\t * it is visible in the selected items or options\n\t\t * dropdown, it will be re-rendered automatically.\n\t\t *\n\t\t * @param {string} value\n\t\t * @param {object} data\n\t\t */\n\t\tupdateOption: function(value, data) {\n\t\t\tvar self = this;\n\t\t\tvar $item, $item_new;\n\t\t\tvar value_new, index_item, cache_items, cache_options, order_old;\n\t\n\t\t\tvalue     = hash_key(value);\n\t\t\tvalue_new = hash_key(data[self.settings.valueField]);\n\t\n\t\t\t// sanity checks\n\t\t\tif (value === null) return;\n\t\t\tif (!self.options.hasOwnProperty(value)) return;\n\t\t\tif (typeof value_new !== 'string') throw new Error('Value must be set in option data');\n\t\n\t\t\torder_old = self.options[value].$order;\n\t\n\t\t\t// update references\n\t\t\tif (value_new !== value) {\n\t\t\t\tdelete self.options[value];\n\t\t\t\tindex_item = self.items.indexOf(value);\n\t\t\t\tif (index_item !== -1) {\n\t\t\t\t\tself.items.splice(index_item, 1, value_new);\n\t\t\t\t}\n\t\t\t}\n\t\t\tdata.$order = data.$order || order_old;\n\t\t\tself.options[value_new] = data;\n\t\n\t\t\t// invalidate render cache\n\t\t\tcache_items = self.renderCache['item'];\n\t\t\tcache_options = self.renderCache['option'];\n\t\n\t\t\tif (cache_items) {\n\t\t\t\tdelete cache_items[value];\n\t\t\t\tdelete cache_items[value_new];\n\t\t\t}\n\t\t\tif (cache_options) {\n\t\t\t\tdelete cache_options[value];\n\t\t\t\tdelete cache_options[value_new];\n\t\t\t}\n\t\n\t\t\t// update the item if it's selected\n\t\t\tif (self.items.indexOf(value_new) !== -1) {\n\t\t\t\t$item = self.getItem(value);\n\t\t\t\t$item_new = $(self.render('item', data));\n\t\t\t\tif ($item.hasClass('active')) $item_new.addClass('active');\n\t\t\t\t$item.replaceWith($item_new);\n\t\t\t}\n\t\n\t\t\t// invalidate last query because we might have updated the sortField\n\t\t\tself.lastQuery = null;\n\t\n\t\t\t// update dropdown contents\n\t\t\tif (self.isOpen) {\n\t\t\t\tself.refreshOptions(false);\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Removes a single option.\n\t\t *\n\t\t * @param {string} value\n\t\t * @param {boolean} silent\n\t\t */\n\t\tremoveOption: function(value, silent) {\n\t\t\tvar self = this;\n\t\t\tvalue = hash_key(value);\n\t\n\t\t\tvar cache_items = self.renderCache['item'];\n\t\t\tvar cache_options = self.renderCache['option'];\n\t\t\tif (cache_items) delete cache_items[value];\n\t\t\tif (cache_options) delete cache_options[value];\n\t\n\t\t\tdelete self.userOptions[value];\n\t\t\tdelete self.options[value];\n\t\t\tself.lastQuery = null;\n\t\t\tself.trigger('option_remove', value);\n\t\t\tself.removeItem(value, silent);\n\t\t},\n\t\n\t\t/**\n\t\t * Clears all options.\n\t\t */\n\t\tclearOptions: function() {\n\t\t\tvar self = this;\n\t\n\t\t\tself.loadedSearches = {};\n\t\t\tself.userOptions = {};\n\t\t\tself.renderCache = {};\n\t\t\tself.options = self.sifter.items = {};\n\t\t\tself.lastQuery = null;\n\t\t\tself.trigger('option_clear');\n\t\t\tself.clear();\n\t\t},\n\t\n\t\t/**\n\t\t * Returns the jQuery element of the option\n\t\t * matching the given value.\n\t\t *\n\t\t * @param {string} value\n\t\t * @returns {object}\n\t\t */\n\t\tgetOption: function(value) {\n\t\t\treturn this.getElementWithValue(value, this.$dropdown_content.find('[data-selectable]'));\n\t\t},\n\t\n\t\t/**\n\t\t * Returns the jQuery element of the next or\n\t\t * previous selectable option.\n\t\t *\n\t\t * @param {object} $option\n\t\t * @param {int} direction  can be 1 for next or -1 for previous\n\t\t * @return {object}\n\t\t */\n\t\tgetAdjacentOption: function($option, direction) {\n\t\t\tvar $options = this.$dropdown.find('[data-selectable]');\n\t\t\tvar index    = $options.index($option) + direction;\n\t\n\t\t\treturn index >= 0 && index < $options.length ? $options.eq(index) : $();\n\t\t},\n\t\n\t\t/**\n\t\t * Finds the first element with a \"data-value\" attribute\n\t\t * that matches the given value.\n\t\t *\n\t\t * @param {mixed} value\n\t\t * @param {object} $els\n\t\t * @return {object}\n\t\t */\n\t\tgetElementWithValue: function(value, $els) {\n\t\t\tvalue = hash_key(value);\n\t\n\t\t\tif (typeof value !== 'undefined' && value !== null) {\n\t\t\t\tfor (var i = 0, n = $els.length; i < n; i++) {\n\t\t\t\t\tif ($els[i].getAttribute('data-value') === value) {\n\t\t\t\t\t\treturn $($els[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\treturn $();\n\t\t},\n\t\n\t\t/**\n\t\t * Returns the jQuery element of the item\n\t\t * matching the given value.\n\t\t *\n\t\t * @param {string} value\n\t\t * @returns {object}\n\t\t */\n\t\tgetItem: function(value) {\n\t\t\treturn this.getElementWithValue(value, this.$control.children());\n\t\t},\n\t\n\t\t/**\n\t\t * \"Selects\" multiple items at once. Adds them to the list\n\t\t * at the current caret position.\n\t\t *\n\t\t * @param {string} value\n\t\t * @param {boolean} silent\n\t\t */\n\t\taddItems: function(values, silent) {\n\t\t\tvar items = $.isArray(values) ? values : [values];\n\t\t\tfor (var i = 0, n = items.length; i < n; i++) {\n\t\t\t\tthis.isPending = (i < n - 1);\n\t\t\t\tthis.addItem(items[i], silent);\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * \"Selects\" an item. Adds it to the list\n\t\t * at the current caret position.\n\t\t *\n\t\t * @param {string} value\n\t\t * @param {boolean} silent\n\t\t */\n\t\taddItem: function(value, silent) {\n\t\t\tvar events = silent ? [] : ['change'];\n\t\n\t\t\tdebounce_events(this, events, function() {\n\t\t\t\tvar $item, $option, $options;\n\t\t\t\tvar self = this;\n\t\t\t\tvar inputMode = self.settings.mode;\n\t\t\t\tvar i, active, value_next, wasFull;\n\t\t\t\tvalue = hash_key(value);\n\t\n\t\t\t\tif (self.items.indexOf(value) !== -1) {\n\t\t\t\t\tif (inputMode === 'single') self.close();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\tif (!self.options.hasOwnProperty(value)) return;\n\t\t\t\tif (inputMode === 'single') self.clear(silent);\n\t\t\t\tif (inputMode === 'multi' && self.isFull()) return;\n\t\n\t\t\t\t$item = $(self.render('item', self.options[value]));\n\t\t\t\twasFull = self.isFull();\n\t\t\t\tself.items.splice(self.caretPos, 0, value);\n\t\t\t\tself.insertAtCaret($item);\n\t\t\t\tif (!self.isPending || (!wasFull && self.isFull())) {\n\t\t\t\t\tself.refreshState();\n\t\t\t\t}\n\t\n\t\t\t\tif (self.isSetup) {\n\t\t\t\t\t$options = self.$dropdown_content.find('[data-selectable]');\n\t\n\t\t\t\t\t// update menu / remove the option (if this is not one item being added as part of series)\n\t\t\t\t\tif (!self.isPending) {\n\t\t\t\t\t\t$option = self.getOption(value);\n\t\t\t\t\t\tvalue_next = self.getAdjacentOption($option, 1).attr('data-value');\n\t\t\t\t\t\tself.refreshOptions(self.isFocused && inputMode !== 'single');\n\t\t\t\t\t\tif (value_next) {\n\t\t\t\t\t\t\tself.setActiveOption(self.getOption(value_next));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// hide the menu if the maximum number of items have been selected or no options are left\n\t\t\t\t\tif (!$options.length || self.isFull()) {\n\t\t\t\t\t\tself.close();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.positionDropdown();\n\t\t\t\t\t}\n\t\n\t\t\t\t\tself.updatePlaceholder();\n\t\t\t\t\tself.trigger('item_add', value, $item);\n\t\t\t\t\tself.updateOriginalInput({silent: silent});\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\n\t\t/**\n\t\t * Removes the selected item matching\n\t\t * the provided value.\n\t\t *\n\t\t * @param {string} value\n\t\t */\n\t\tremoveItem: function(value, silent) {\n\t\t\tvar self = this;\n\t\t\tvar $item, i, idx;\n\t\n\t\t\t$item = (typeof value === 'object') ? value : self.getItem(value);\n\t\t\tvalue = hash_key($item.attr('data-value'));\n\t\t\ti = self.items.indexOf(value);\n\t\n\t\t\tif (i !== -1) {\n\t\t\t\t$item.remove();\n\t\t\t\tif ($item.hasClass('active')) {\n\t\t\t\t\tidx = self.$activeItems.indexOf($item[0]);\n\t\t\t\t\tself.$activeItems.splice(idx, 1);\n\t\t\t\t}\n\t\n\t\t\t\tself.items.splice(i, 1);\n\t\t\t\tself.lastQuery = null;\n\t\t\t\tif (!self.settings.persist && self.userOptions.hasOwnProperty(value)) {\n\t\t\t\t\tself.removeOption(value, silent);\n\t\t\t\t}\n\t\n\t\t\t\tif (i < self.caretPos) {\n\t\t\t\t\tself.setCaret(self.caretPos - 1);\n\t\t\t\t}\n\t\n\t\t\t\tself.refreshState();\n\t\t\t\tself.updatePlaceholder();\n\t\t\t\tself.updateOriginalInput({silent: silent});\n\t\t\t\tself.positionDropdown();\n\t\t\t\tself.trigger('item_remove', value, $item);\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Invokes the `create` method provided in the\n\t\t * selectize options that should provide the data\n\t\t * for the new item, given the user input.\n\t\t *\n\t\t * Once this completes, it will be added\n\t\t * to the item list.\n\t\t *\n\t\t * @param {string} value\n\t\t * @param {boolean} [triggerDropdown]\n\t\t * @param {function} [callback]\n\t\t * @return {boolean}\n\t\t */\n\t\tcreateItem: function(input, triggerDropdown) {\n\t\t\tvar self  = this;\n\t\t\tvar caret = self.caretPos;\n\t\t\tinput = input || $.trim(self.$control_input.val() || '');\n\t\n\t\t\tvar callback = arguments[arguments.length - 1];\n\t\t\tif (typeof callback !== 'function') callback = function() {};\n\t\n\t\t\tif (typeof triggerDropdown !== 'boolean') {\n\t\t\t\ttriggerDropdown = true;\n\t\t\t}\n\t\n\t\t\tif (!self.canCreate(input)) {\n\t\t\t\tcallback();\n\t\t\t\treturn false;\n\t\t\t}\n\t\n\t\t\tself.lock();\n\t\n\t\t\tvar setup = (typeof self.settings.create === 'function') ? this.settings.create : function(input) {\n\t\t\t\tvar data = {};\n\t\t\t\tdata[self.settings.labelField] = input;\n\t\t\t\tdata[self.settings.valueField] = input;\n\t\t\t\treturn data;\n\t\t\t};\n\t\n\t\t\tvar create = once(function(data) {\n\t\t\t\tself.unlock();\n\t\n\t\t\t\tif (!data || typeof data !== 'object') return callback();\n\t\t\t\tvar value = hash_key(data[self.settings.valueField]);\n\t\t\t\tif (typeof value !== 'string') return callback();\n\t\n\t\t\t\tself.setTextboxValue('');\n\t\t\t\tself.addOption(data);\n\t\t\t\tself.setCaret(caret);\n\t\t\t\tself.addItem(value);\n\t\t\t\tself.refreshOptions(triggerDropdown && self.settings.mode !== 'single');\n\t\t\t\tcallback(data);\n\t\t\t});\n\t\n\t\t\tvar output = setup.apply(this, [input, create]);\n\t\t\tif (typeof output !== 'undefined') {\n\t\t\t\tcreate(output);\n\t\t\t}\n\t\n\t\t\treturn true;\n\t\t},\n\t\n\t\t/**\n\t\t * Re-renders the selected item lists.\n\t\t */\n\t\trefreshItems: function() {\n\t\t\tthis.lastQuery = null;\n\t\n\t\t\tif (this.isSetup) {\n\t\t\t\tthis.addItem(this.items);\n\t\t\t}\n\t\n\t\t\tthis.refreshState();\n\t\t\tthis.updateOriginalInput();\n\t\t},\n\t\n\t\t/**\n\t\t * Updates all state-dependent attributes\n\t\t * and CSS classes.\n\t\t */\n\t\trefreshState: function() {\n\t\t\tvar invalid, self = this;\n\t\t\tif (self.isRequired) {\n\t\t\t\tif (self.items.length) self.isInvalid = false;\n\t\t\t\tself.$control_input.prop('required', invalid);\n\t\t\t}\n\t\t\tself.refreshClasses();\n\t\t},\n\t\n\t\t/**\n\t\t * Updates all state-dependent CSS classes.\n\t\t */\n\t\trefreshClasses: function() {\n\t\t\tvar self     = this;\n\t\t\tvar isFull   = self.isFull();\n\t\t\tvar isLocked = self.isLocked;\n\t\n\t\t\tself.$wrapper\n\t\t\t\t.toggleClass('rtl', self.rtl);\n\t\n\t\t\tself.$control\n\t\t\t\t.toggleClass('focus', self.isFocused)\n\t\t\t\t.toggleClass('disabled', self.isDisabled)\n\t\t\t\t.toggleClass('required', self.isRequired)\n\t\t\t\t.toggleClass('invalid', self.isInvalid)\n\t\t\t\t.toggleClass('locked', isLocked)\n\t\t\t\t.toggleClass('full', isFull).toggleClass('not-full', !isFull)\n\t\t\t\t.toggleClass('input-active', self.isFocused && !self.isInputHidden)\n\t\t\t\t.toggleClass('dropdown-active', self.isOpen)\n\t\t\t\t.toggleClass('has-options', !$.isEmptyObject(self.options))\n\t\t\t\t.toggleClass('has-items', self.items.length > 0);\n\t\n\t\t\tself.$control_input.data('grow', !isFull && !isLocked);\n\t\t},\n\t\n\t\t/**\n\t\t * Determines whether or not more items can be added\n\t\t * to the control without exceeding the user-defined maximum.\n\t\t *\n\t\t * @returns {boolean}\n\t\t */\n\t\tisFull: function() {\n\t\t\treturn this.settings.maxItems !== null && this.items.length >= this.settings.maxItems;\n\t\t},\n\t\n\t\t/**\n\t\t * Refreshes the original <select> or <input>\n\t\t * element to reflect the current state.\n\t\t */\n\t\tupdateOriginalInput: function(opts) {\n\t\t\tvar i, n, options, label, self = this;\n\t\t\topts = opts || {};\n\t\n\t\t\tif (self.tagType === TAG_SELECT) {\n\t\t\t\toptions = [];\n\t\t\t\tfor (i = 0, n = self.items.length; i < n; i++) {\n\t\t\t\t\tlabel = self.options[self.items[i]][self.settings.labelField] || '';\n\t\t\t\t\toptions.push('<option value=\"' + escape_html(self.items[i]) + '\" selected=\"selected\">' + escape_html(label) + '</option>');\n\t\t\t\t}\n\t\t\t\tif (!options.length && !this.$input.attr('multiple')) {\n\t\t\t\t\toptions.push('<option value=\"\" selected=\"selected\"></option>');\n\t\t\t\t}\n\t\t\t\tself.$input.html(options.join(''));\n\t\t\t} else {\n\t\t\t\tself.$input.val(self.getValue());\n\t\t\t\tself.$input.attr('value',self.$input.val());\n\t\t\t}\n\t\n\t\t\tif (self.isSetup) {\n\t\t\t\tif (!opts.silent) {\n\t\t\t\t\tself.trigger('change', self.$input.val());\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Shows/hide the input placeholder depending\n\t\t * on if there items in the list already.\n\t\t */\n\t\tupdatePlaceholder: function() {\n\t\t\tif (!this.settings.placeholder) return;\n\t\t\tvar $input = this.$control_input;\n\t\n\t\t\tif (this.items.length) {\n\t\t\t\t$input.removeAttr('placeholder');\n\t\t\t} else {\n\t\t\t\t$input.attr('placeholder', this.settings.placeholder);\n\t\t\t}\n\t\t\t$input.triggerHandler('update', {force: true});\n\t\t},\n\t\n\t\t/**\n\t\t * Shows the autocomplete dropdown containing\n\t\t * the available options.\n\t\t */\n\t\topen: function() {\n\t\t\tvar self = this;\n\t\n\t\t\tif (self.isLocked || self.isOpen || (self.settings.mode === 'multi' && self.isFull())) return;\n\t\t\tself.focus();\n\t\t\tself.isOpen = true;\n\t\t\tself.refreshState();\n\t\t\tself.$dropdown.css({visibility: 'hidden', display: 'block'});\n\t\t\tself.positionDropdown();\n\t\t\tself.$dropdown.css({visibility: 'visible'});\n\t\t\tself.trigger('dropdown_open', self.$dropdown);\n\t\t},\n\t\n\t\t/**\n\t\t * Closes the autocomplete dropdown menu.\n\t\t */\n\t\tclose: function() {\n\t\t\tvar self = this;\n\t\t\tvar trigger = self.isOpen;\n\t\n\t\t\tif (self.settings.mode === 'single' && self.items.length) {\n\t\t\t\tself.hideInput();\n\t\t\t}\n\t\n\t\t\tself.isOpen = false;\n\t\t\tself.$dropdown.hide();\n\t\t\tself.setActiveOption(null);\n\t\t\tself.refreshState();\n\t\n\t\t\tif (trigger) self.trigger('dropdown_close', self.$dropdown);\n\t\t},\n\t\n\t\t/**\n\t\t * Calculates and applies the appropriate\n\t\t * position of the dropdown.\n\t\t */\n\t\tpositionDropdown: function() {\n\t\t\tvar $control = this.$control;\n\t\t\tvar offset = this.settings.dropdownParent === 'body' ? $control.offset() : $control.position();\n\t\t\toffset.top += $control.outerHeight(true);\n\t\n\t\t\tthis.$dropdown.css({\n\t\t\t\twidth : $control.outerWidth(),\n\t\t\t\ttop   : offset.top,\n\t\t\t\tleft  : offset.left\n\t\t\t});\n\t\t},\n\t\n\t\t/**\n\t\t * Resets / clears all selected items\n\t\t * from the control.\n\t\t *\n\t\t * @param {boolean} silent\n\t\t */\n\t\tclear: function(silent) {\n\t\t\tvar self = this;\n\t\n\t\t\tif (!self.items.length) return;\n\t\t\tself.$control.children(':not(input)').remove();\n\t\t\tself.items = [];\n\t\t\tself.lastQuery = null;\n\t\t\tself.setCaret(0);\n\t\t\tself.setActiveItem(null);\n\t\t\tself.updatePlaceholder();\n\t\t\tself.updateOriginalInput({silent: silent});\n\t\t\tself.refreshState();\n\t\t\tself.showInput();\n\t\t\tself.trigger('clear');\n\t\t},\n\t\n\t\t/**\n\t\t * A helper method for inserting an element\n\t\t * at the current caret position.\n\t\t *\n\t\t * @param {object} $el\n\t\t */\n\t\tinsertAtCaret: function($el) {\n\t\t\tvar caret = Math.min(this.caretPos, this.items.length);\n\t\t\tif (caret === 0) {\n\t\t\t\tthis.$control.prepend($el);\n\t\t\t} else {\n\t\t\t\t$(this.$control[0].childNodes[caret]).before($el);\n\t\t\t}\n\t\t\tthis.setCaret(caret + 1);\n\t\t},\n\t\n\t\t/**\n\t\t * Removes the current selected item(s).\n\t\t *\n\t\t * @param {object} e (optional)\n\t\t * @returns {boolean}\n\t\t */\n\t\tdeleteSelection: function(e) {\n\t\t\tvar i, n, direction, selection, values, caret, option_select, $option_select, $tail;\n\t\t\tvar self = this;\n\t\n\t\t\tdirection = (e && e.keyCode === KEY_BACKSPACE) ? -1 : 1;\n\t\t\tselection = getSelection(self.$control_input[0]);\n\t\n\t\t\tif (self.$activeOption && !self.settings.hideSelected) {\n\t\t\t\toption_select = self.getAdjacentOption(self.$activeOption, -1).attr('data-value');\n\t\t\t}\n\t\n\t\t\t// determine items that will be removed\n\t\t\tvalues = [];\n\t\n\t\t\tif (self.$activeItems.length) {\n\t\t\t\t$tail = self.$control.children('.active:' + (direction > 0 ? 'last' : 'first'));\n\t\t\t\tcaret = self.$control.children(':not(input)').index($tail);\n\t\t\t\tif (direction > 0) { caret++; }\n\t\n\t\t\t\tfor (i = 0, n = self.$activeItems.length; i < n; i++) {\n\t\t\t\t\tvalues.push($(self.$activeItems[i]).attr('data-value'));\n\t\t\t\t}\n\t\t\t\tif (e) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t}\n\t\t\t} else if ((self.isFocused || self.settings.mode === 'single') && self.items.length) {\n\t\t\t\tif (direction < 0 && selection.start === 0 && selection.length === 0) {\n\t\t\t\t\tvalues.push(self.items[self.caretPos - 1]);\n\t\t\t\t} else if (direction > 0 && selection.start === self.$control_input.val().length) {\n\t\t\t\t\tvalues.push(self.items[self.caretPos]);\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// allow the callback to abort\n\t\t\tif (!values.length || (typeof self.settings.onDelete === 'function' && self.settings.onDelete.apply(self, [values]) === false)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\n\t\t\t// perform removal\n\t\t\tif (typeof caret !== 'undefined') {\n\t\t\t\tself.setCaret(caret);\n\t\t\t}\n\t\t\twhile (values.length) {\n\t\t\t\tself.removeItem(values.pop());\n\t\t\t}\n\t\n\t\t\tself.showInput();\n\t\t\tself.positionDropdown();\n\t\t\tself.refreshOptions(true);\n\t\n\t\t\t// select previous option\n\t\t\tif (option_select) {\n\t\t\t\t$option_select = self.getOption(option_select);\n\t\t\t\tif ($option_select.length) {\n\t\t\t\t\tself.setActiveOption($option_select);\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\treturn true;\n\t\t},\n\t\n\t\t/**\n\t\t * Selects the previous / next item (depending\n\t\t * on the `direction` argument).\n\t\t *\n\t\t * > 0 - right\n\t\t * < 0 - left\n\t\t *\n\t\t * @param {int} direction\n\t\t * @param {object} e (optional)\n\t\t */\n\t\tadvanceSelection: function(direction, e) {\n\t\t\tvar tail, selection, idx, valueLength, cursorAtEdge, $tail;\n\t\t\tvar self = this;\n\t\n\t\t\tif (direction === 0) return;\n\t\t\tif (self.rtl) direction *= -1;\n\t\n\t\t\ttail = direction > 0 ? 'last' : 'first';\n\t\t\tselection = getSelection(self.$control_input[0]);\n\t\n\t\t\tif (self.isFocused && !self.isInputHidden) {\n\t\t\t\tvalueLength = self.$control_input.val().length;\n\t\t\t\tcursorAtEdge = direction < 0\n\t\t\t\t\t? selection.start === 0 && selection.length === 0\n\t\t\t\t\t: selection.start === valueLength;\n\t\n\t\t\t\tif (cursorAtEdge && !valueLength) {\n\t\t\t\t\tself.advanceCaret(direction, e);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$tail = self.$control.children('.active:' + tail);\n\t\t\t\tif ($tail.length) {\n\t\t\t\t\tidx = self.$control.children(':not(input)').index($tail);\n\t\t\t\t\tself.setActiveItem(null);\n\t\t\t\t\tself.setCaret(direction > 0 ? idx + 1 : idx);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Moves the caret left / right.\n\t\t *\n\t\t * @param {int} direction\n\t\t * @param {object} e (optional)\n\t\t */\n\t\tadvanceCaret: function(direction, e) {\n\t\t\tvar self = this, fn, $adj;\n\t\n\t\t\tif (direction === 0) return;\n\t\n\t\t\tfn = direction > 0 ? 'next' : 'prev';\n\t\t\tif (self.isShiftDown) {\n\t\t\t\t$adj = self.$control_input[fn]();\n\t\t\t\tif ($adj.length) {\n\t\t\t\t\tself.hideInput();\n\t\t\t\t\tself.setActiveItem($adj);\n\t\t\t\t\te && e.preventDefault();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tself.setCaret(self.caretPos + direction);\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Moves the caret to the specified index.\n\t\t *\n\t\t * @param {int} i\n\t\t */\n\t\tsetCaret: function(i) {\n\t\t\tvar self = this;\n\t\n\t\t\tif (self.settings.mode === 'single') {\n\t\t\t\ti = self.items.length;\n\t\t\t} else {\n\t\t\t\ti = Math.max(0, Math.min(self.items.length, i));\n\t\t\t}\n\t\n\t\t\tif(!self.isPending) {\n\t\t\t\t// the input must be moved by leaving it in place and moving the\n\t\t\t\t// siblings, due to the fact that focus cannot be restored once lost\n\t\t\t\t// on mobile webkit devices\n\t\t\t\tvar j, n, fn, $children, $child;\n\t\t\t\t$children = self.$control.children(':not(input)');\n\t\t\t\tfor (j = 0, n = $children.length; j < n; j++) {\n\t\t\t\t\t$child = $($children[j]).detach();\n\t\t\t\t\tif (j <  i) {\n\t\t\t\t\t\tself.$control_input.before($child);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.$control.append($child);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tself.caretPos = i;\n\t\t},\n\t\n\t\t/**\n\t\t * Disables user input on the control. Used while\n\t\t * items are being asynchronously created.\n\t\t */\n\t\tlock: function() {\n\t\t\tthis.close();\n\t\t\tthis.isLocked = true;\n\t\t\tthis.refreshState();\n\t\t},\n\t\n\t\t/**\n\t\t * Re-enables user input on the control.\n\t\t */\n\t\tunlock: function() {\n\t\t\tthis.isLocked = false;\n\t\t\tthis.refreshState();\n\t\t},\n\t\n\t\t/**\n\t\t * Disables user input on the control completely.\n\t\t * While disabled, it cannot receive focus.\n\t\t */\n\t\tdisable: function() {\n\t\t\tvar self = this;\n\t\t\tself.$input.prop('disabled', true);\n\t\t\tself.$control_input.prop('disabled', true).prop('tabindex', -1);\n\t\t\tself.isDisabled = true;\n\t\t\tself.lock();\n\t\t},\n\t\n\t\t/**\n\t\t * Enables the control so that it can respond\n\t\t * to focus and user input.\n\t\t */\n\t\tenable: function() {\n\t\t\tvar self = this;\n\t\t\tself.$input.prop('disabled', false);\n\t\t\tself.$control_input.prop('disabled', false).prop('tabindex', self.tabIndex);\n\t\t\tself.isDisabled = false;\n\t\t\tself.unlock();\n\t\t},\n\t\n\t\t/**\n\t\t * Completely destroys the control and\n\t\t * unbinds all event listeners so that it can\n\t\t * be garbage collected.\n\t\t */\n\t\tdestroy: function() {\n\t\t\tvar self = this;\n\t\t\tvar eventNS = self.eventNS;\n\t\t\tvar revertSettings = self.revertSettings;\n\t\n\t\t\tself.trigger('destroy');\n\t\t\tself.off();\n\t\t\tself.$wrapper.remove();\n\t\t\tself.$dropdown.remove();\n\t\n\t\t\tself.$input\n\t\t\t\t.html('')\n\t\t\t\t.append(revertSettings.$children)\n\t\t\t\t.removeAttr('tabindex')\n\t\t\t\t.removeClass('selectized')\n\t\t\t\t.attr({tabindex: revertSettings.tabindex})\n\t\t\t\t.show();\n\t\n\t\t\tself.$control_input.removeData('grow');\n\t\t\tself.$input.removeData('selectize');\n\t\n\t\t\t$(window).off(eventNS);\n\t\t\t$(document).off(eventNS);\n\t\t\t$(document.body).off(eventNS);\n\t\n\t\t\tdelete self.$input[0].selectize;\n\t\t},\n\t\n\t\t/**\n\t\t * A helper method for rendering \"item\" and\n\t\t * \"option\" templates, given the data.\n\t\t *\n\t\t * @param {string} templateName\n\t\t * @param {object} data\n\t\t * @returns {string}\n\t\t */\n\t\trender: function(templateName, data) {\n\t\t\tvar value, id, label;\n\t\t\tvar html = '';\n\t\t\tvar cache = false;\n\t\t\tvar self = this;\n\t\t\tvar regex_tag = /^[\\t \\r\\n]*<([a-z][a-z0-9\\-_]*(?:\\:[a-z][a-z0-9\\-_]*)?)/i;\n\t\n\t\t\tif (templateName === 'option' || templateName === 'item') {\n\t\t\t\tvalue = hash_key(data[self.settings.valueField]);\n\t\t\t\tcache = !!value;\n\t\t\t}\n\t\n\t\t\t// pull markup from cache if it exists\n\t\t\tif (cache) {\n\t\t\t\tif (!isset(self.renderCache[templateName])) {\n\t\t\t\t\tself.renderCache[templateName] = {};\n\t\t\t\t}\n\t\t\t\tif (self.renderCache[templateName].hasOwnProperty(value)) {\n\t\t\t\t\treturn self.renderCache[templateName][value];\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// render markup\n\t\t\thtml = self.settings.render[templateName].apply(this, [data, escape_html]);\n\t\n\t\t\t// add mandatory attributes\n\t\t\tif (templateName === 'option' || templateName === 'option_create') {\n\t\t\t\thtml = html.replace(regex_tag, '<$1 data-selectable');\n\t\t\t}\n\t\t\tif (templateName === 'optgroup') {\n\t\t\t\tid = data[self.settings.optgroupValueField] || '';\n\t\t\t\thtml = html.replace(regex_tag, '<$1 data-group=\"' + escape_replace(escape_html(id)) + '\"');\n\t\t\t}\n\t\t\tif (templateName === 'option' || templateName === 'item') {\n\t\t\t\thtml = html.replace(regex_tag, '<$1 data-value=\"' + escape_replace(escape_html(value || '')) + '\"');\n\t\t\t}\n\t\n\t\t\t// update cache\n\t\t\tif (cache) {\n\t\t\t\tself.renderCache[templateName][value] = html;\n\t\t\t}\n\t\n\t\t\treturn html;\n\t\t},\n\t\n\t\t/**\n\t\t * Clears the render cache for a template. If\n\t\t * no template is given, clears all render\n\t\t * caches.\n\t\t *\n\t\t * @param {string} templateName\n\t\t */\n\t\tclearCache: function(templateName) {\n\t\t\tvar self = this;\n\t\t\tif (typeof templateName === 'undefined') {\n\t\t\t\tself.renderCache = {};\n\t\t\t} else {\n\t\t\t\tdelete self.renderCache[templateName];\n\t\t\t}\n\t\t},\n\t\n\t\t/**\n\t\t * Determines whether or not to display the\n\t\t * create item prompt, given a user input.\n\t\t *\n\t\t * @param {string} input\n\t\t * @return {boolean}\n\t\t */\n\t\tcanCreate: function(input) {\n\t\t\tvar self = this;\n\t\t\tif (!self.settings.create) return false;\n\t\t\tvar filter = self.settings.createFilter;\n\t\t\treturn input.length\n\t\t\t\t&& (typeof filter !== 'function' || filter.apply(self, [input]))\n\t\t\t\t&& (typeof filter !== 'string' || new RegExp(filter).test(input))\n\t\t\t\t&& (!(filter instanceof RegExp) || filter.test(input));\n\t\t}\n\t\n\t});\n\t\n\t\n\tSelectize.count = 0;\n\tSelectize.defaults = {\n\t\toptions: [],\n\t\toptgroups: [],\n\t\n\t\tplugins: [],\n\t\tdelimiter: ',',\n\t\tsplitOn: null, // regexp or string for splitting up values from a paste command\n\t\tpersist: true,\n\t\tdiacritics: true,\n\t\tcreate: false,\n\t\tcreateOnBlur: false,\n\t\tcreateFilter: null,\n\t\thighlight: true,\n\t\topenOnFocus: true,\n\t\tmaxOptions: 1000,\n\t\tmaxItems: null,\n\t\thideSelected: null,\n\t\taddPrecedence: false,\n\t\tselectOnTab: false,\n\t\tpreload: false,\n\t\tallowEmptyOption: false,\n\t\tcloseAfterSelect: false,\n\t\n\t\tscrollDuration: 60,\n\t\tloadThrottle: 300,\n\t\tloadingClass: 'loading',\n\t\n\t\tdataAttr: 'data-data',\n\t\toptgroupField: 'optgroup',\n\t\tvalueField: 'value',\n\t\tlabelField: 'text',\n\t\toptgroupLabelField: 'label',\n\t\toptgroupValueField: 'value',\n\t\tlockOptgroupOrder: false,\n\t\n\t\tsortField: '$order',\n\t\tsearchField: ['text'],\n\t\tsearchConjunction: 'and',\n\t\n\t\tmode: null,\n\t\twrapperClass: 'selectize-control',\n\t\tinputClass: 'selectize-input',\n\t\tdropdownClass: 'selectize-dropdown',\n\t\tdropdownContentClass: 'selectize-dropdown-content',\n\t\n\t\tdropdownParent: null,\n\t\n\t\tcopyClassesToDropdown: true,\n\t\n\t\t/*\n\t\tload                 : null, // function(query, callback) { ... }\n\t\tscore                : null, // function(search) { ... }\n\t\tonInitialize         : null, // function() { ... }\n\t\tonChange             : null, // function(value) { ... }\n\t\tonItemAdd            : null, // function(value, $item) { ... }\n\t\tonItemRemove         : null, // function(value) { ... }\n\t\tonClear              : null, // function() { ... }\n\t\tonOptionAdd          : null, // function(value, data) { ... }\n\t\tonOptionRemove       : null, // function(value) { ... }\n\t\tonOptionClear        : null, // function() { ... }\n\t\tonOptionGroupAdd     : null, // function(id, data) { ... }\n\t\tonOptionGroupRemove  : null, // function(id) { ... }\n\t\tonOptionGroupClear   : null, // function() { ... }\n\t\tonDropdownOpen       : null, // function($dropdown) { ... }\n\t\tonDropdownClose      : null, // function($dropdown) { ... }\n\t\tonType               : null, // function(str) { ... }\n\t\tonDelete             : null, // function(values) { ... }\n\t\t*/\n\t\n\t\trender: {\n\t\t\t/*\n\t\t\titem: null,\n\t\t\toptgroup: null,\n\t\t\toptgroup_header: null,\n\t\t\toption: null,\n\t\t\toption_create: null\n\t\t\t*/\n\t\t}\n\t};\n\t\n\t\n\t$.fn.selectize = function(settings_user) {\n\t\tvar defaults             = $.fn.selectize.defaults;\n\t\tvar settings             = $.extend({}, defaults, settings_user);\n\t\tvar attr_data            = settings.dataAttr;\n\t\tvar field_label          = settings.labelField;\n\t\tvar field_value          = settings.valueField;\n\t\tvar field_optgroup       = settings.optgroupField;\n\t\tvar field_optgroup_label = settings.optgroupLabelField;\n\t\tvar field_optgroup_value = settings.optgroupValueField;\n\t\n\t\t/**\n\t\t * Initializes selectize from a <input type=\"text\"> element.\n\t\t *\n\t\t * @param {object} $input\n\t\t * @param {object} settings_element\n\t\t */\n\t\tvar init_textbox = function($input, settings_element) {\n\t\t\tvar i, n, values, option;\n\t\n\t\t\tvar data_raw = $input.attr(attr_data);\n\t\n\t\t\tif (!data_raw) {\n\t\t\t\tvar value = $.trim($input.val() || '');\n\t\t\t\tif (!settings.allowEmptyOption && !value.length) return;\n\t\t\t\tvalues = value.split(settings.delimiter);\n\t\t\t\tfor (i = 0, n = values.length; i < n; i++) {\n\t\t\t\t\toption = {};\n\t\t\t\t\toption[field_label] = values[i];\n\t\t\t\t\toption[field_value] = values[i];\n\t\t\t\t\tsettings_element.options.push(option);\n\t\t\t\t}\n\t\t\t\tsettings_element.items = values;\n\t\t\t} else {\n\t\t\t\tsettings_element.options = JSON.parse(data_raw);\n\t\t\t\tfor (i = 0, n = settings_element.options.length; i < n; i++) {\n\t\t\t\t\tsettings_element.items.push(settings_element.options[i][field_value]);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\n\t\t/**\n\t\t * Initializes selectize from a <select> element.\n\t\t *\n\t\t * @param {object} $input\n\t\t * @param {object} settings_element\n\t\t */\n\t\tvar init_select = function($input, settings_element) {\n\t\t\tvar i, n, tagName, $children, order = 0;\n\t\t\tvar options = settings_element.options;\n\t\t\tvar optionsMap = {};\n\t\n\t\t\tvar readData = function($el) {\n\t\t\t\tvar data = attr_data && $el.attr(attr_data);\n\t\t\t\tif (typeof data === 'string' && data.length) {\n\t\t\t\t\treturn JSON.parse(data);\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t};\n\t\n\t\t\tvar addOption = function($option, group) {\n\t\t\t\t$option = $($option);\n\t\n\t\t\t\tvar value = hash_key($option.attr('value'));\n\t\t\t\tif (!value && !settings.allowEmptyOption) return;\n\t\n\t\t\t\t// if the option already exists, it's probably been\n\t\t\t\t// duplicated in another optgroup. in this case, push\n\t\t\t\t// the current group to the \"optgroup\" property on the\n\t\t\t\t// existing option so that it's rendered in both places.\n\t\t\t\tif (optionsMap.hasOwnProperty(value)) {\n\t\t\t\t\tif (group) {\n\t\t\t\t\t\tvar arr = optionsMap[value][field_optgroup];\n\t\t\t\t\t\tif (!arr) {\n\t\t\t\t\t\t\toptionsMap[value][field_optgroup] = group;\n\t\t\t\t\t\t} else if (!$.isArray(arr)) {\n\t\t\t\t\t\t\toptionsMap[value][field_optgroup] = [arr, group];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tarr.push(group);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\tvar option             = readData($option) || {};\n\t\t\t\toption[field_label]    = option[field_label] || $option.text();\n\t\t\t\toption[field_value]    = option[field_value] || value;\n\t\t\t\toption[field_optgroup] = option[field_optgroup] || group;\n\t\n\t\t\t\toptionsMap[value] = option;\n\t\t\t\toptions.push(option);\n\t\n\t\t\t\tif ($option.is(':selected')) {\n\t\t\t\t\tsettings_element.items.push(value);\n\t\t\t\t}\n\t\t\t};\n\t\n\t\t\tvar addGroup = function($optgroup) {\n\t\t\t\tvar i, n, id, optgroup, $options;\n\t\n\t\t\t\t$optgroup = $($optgroup);\n\t\t\t\tid = $optgroup.attr('label');\n\t\n\t\t\t\tif (id) {\n\t\t\t\t\toptgroup = readData($optgroup) || {};\n\t\t\t\t\toptgroup[field_optgroup_label] = id;\n\t\t\t\t\toptgroup[field_optgroup_value] = id;\n\t\t\t\t\tsettings_element.optgroups.push(optgroup);\n\t\t\t\t}\n\t\n\t\t\t\t$options = $('option', $optgroup);\n\t\t\t\tfor (i = 0, n = $options.length; i < n; i++) {\n\t\t\t\t\taddOption($options[i], id);\n\t\t\t\t}\n\t\t\t};\n\t\n\t\t\tsettings_element.maxItems = $input.attr('multiple') ? null : 1;\n\t\n\t\t\t$children = $input.children();\n\t\t\tfor (i = 0, n = $children.length; i < n; i++) {\n\t\t\t\ttagName = $children[i].tagName.toLowerCase();\n\t\t\t\tif (tagName === 'optgroup') {\n\t\t\t\t\taddGroup($children[i]);\n\t\t\t\t} else if (tagName === 'option') {\n\t\t\t\t\taddOption($children[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\n\t\treturn this.each(function() {\n\t\t\tif (this.selectize) return;\n\t\n\t\t\tvar instance;\n\t\t\tvar $input = $(this);\n\t\t\tvar tag_name = this.tagName.toLowerCase();\n\t\t\tvar placeholder = $input.attr('placeholder') || $input.attr('data-placeholder');\n\t\t\tif (!placeholder && !settings.allowEmptyOption) {\n\t\t\t\tplaceholder = $input.children('option[value=\"\"]').text();\n\t\t\t}\n\t\n\t\t\tvar settings_element = {\n\t\t\t\t'placeholder' : placeholder,\n\t\t\t\t'options'     : [],\n\t\t\t\t'optgroups'   : [],\n\t\t\t\t'items'       : []\n\t\t\t};\n\t\n\t\t\tif (tag_name === 'select') {\n\t\t\t\tinit_select($input, settings_element);\n\t\t\t} else {\n\t\t\t\tinit_textbox($input, settings_element);\n\t\t\t}\n\t\n\t\t\tinstance = new Selectize($input, $.extend(true, {}, defaults, settings_element, settings_user));\n\t\t});\n\t};\n\t\n\t$.fn.selectize.defaults = Selectize.defaults;\n\t$.fn.selectize.support = {\n\t\tvalidity: SUPPORTS_VALIDITY_API\n\t};\n\t\n\t\n\tSelectize.define('drag_drop', function(options) {\n\t\tif (!$.fn.sortable) throw new Error('The \"drag_drop\" plugin requires jQuery UI \"sortable\".');\n\t\tif (this.settings.mode !== 'multi') return;\n\t\tvar self = this;\n\t\n\t\tself.lock = (function() {\n\t\t\tvar original = self.lock;\n\t\t\treturn function() {\n\t\t\t\tvar sortable = self.$control.data('sortable');\n\t\t\t\tif (sortable) sortable.disable();\n\t\t\t\treturn original.apply(self, arguments);\n\t\t\t};\n\t\t})();\n\t\n\t\tself.unlock = (function() {\n\t\t\tvar original = self.unlock;\n\t\t\treturn function() {\n\t\t\t\tvar sortable = self.$control.data('sortable');\n\t\t\t\tif (sortable) sortable.enable();\n\t\t\t\treturn original.apply(self, arguments);\n\t\t\t};\n\t\t})();\n\t\n\t\tself.setup = (function() {\n\t\t\tvar original = self.setup;\n\t\t\treturn function() {\n\t\t\t\toriginal.apply(this, arguments);\n\t\n\t\t\t\tvar $control = self.$control.sortable({\n\t\t\t\t\titems: '[data-value]',\n\t\t\t\t\tforcePlaceholderSize: true,\n\t\t\t\t\tdisabled: self.isLocked,\n\t\t\t\t\tstart: function(e, ui) {\n\t\t\t\t\t\tui.placeholder.css('width', ui.helper.css('width'));\n\t\t\t\t\t\t$control.css({overflow: 'visible'});\n\t\t\t\t\t},\n\t\t\t\t\tstop: function() {\n\t\t\t\t\t\t$control.css({overflow: 'hidden'});\n\t\t\t\t\t\tvar active = self.$activeItems ? self.$activeItems.slice() : null;\n\t\t\t\t\t\tvar values = [];\n\t\t\t\t\t\t$control.children('[data-value]').each(function() {\n\t\t\t\t\t\t\tvalues.push($(this).attr('data-value'));\n\t\t\t\t\t\t});\n\t\t\t\t\t\tself.setValue(values);\n\t\t\t\t\t\tself.setActiveItem(active);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t};\n\t\t})();\n\t\n\t});\n\t\n\tSelectize.define('dropdown_header', function(options) {\n\t\tvar self = this;\n\t\n\t\toptions = $.extend({\n\t\t\ttitle         : 'Untitled',\n\t\t\theaderClass   : 'selectize-dropdown-header',\n\t\t\ttitleRowClass : 'selectize-dropdown-header-title',\n\t\t\tlabelClass    : 'selectize-dropdown-header-label',\n\t\t\tcloseClass    : 'selectize-dropdown-header-close',\n\t\n\t\t\thtml: function(data) {\n\t\t\t\treturn (\n\t\t\t\t\t'<div class=\"' + data.headerClass + '\">' +\n\t\t\t\t\t\t'<div class=\"' + data.titleRowClass + '\">' +\n\t\t\t\t\t\t\t'<span class=\"' + data.labelClass + '\">' + data.title + '</span>' +\n\t\t\t\t\t\t\t'<a href=\"javascript:void(0)\" class=\"' + data.closeClass + '\">&times;</a>' +\n\t\t\t\t\t\t'</div>' +\n\t\t\t\t\t'</div>'\n\t\t\t\t);\n\t\t\t}\n\t\t}, options);\n\t\n\t\tself.setup = (function() {\n\t\t\tvar original = self.setup;\n\t\t\treturn function() {\n\t\t\t\toriginal.apply(self, arguments);\n\t\t\t\tself.$dropdown_header = $(options.html(options));\n\t\t\t\tself.$dropdown.prepend(self.$dropdown_header);\n\t\t\t};\n\t\t})();\n\t\n\t});\n\t\n\tSelectize.define('optgroup_columns', function(options) {\n\t\tvar self = this;\n\t\n\t\toptions = $.extend({\n\t\t\tequalizeWidth  : true,\n\t\t\tequalizeHeight : true\n\t\t}, options);\n\t\n\t\tthis.getAdjacentOption = function($option, direction) {\n\t\t\tvar $options = $option.closest('[data-group]').find('[data-selectable]');\n\t\t\tvar index    = $options.index($option) + direction;\n\t\n\t\t\treturn index >= 0 && index < $options.length ? $options.eq(index) : $();\n\t\t};\n\t\n\t\tthis.onKeyDown = (function() {\n\t\t\tvar original = self.onKeyDown;\n\t\t\treturn function(e) {\n\t\t\t\tvar index, $option, $options, $optgroup;\n\t\n\t\t\t\tif (this.isOpen && (e.keyCode === KEY_LEFT || e.keyCode === KEY_RIGHT)) {\n\t\t\t\t\tself.ignoreHover = true;\n\t\t\t\t\t$optgroup = this.$activeOption.closest('[data-group]');\n\t\t\t\t\tindex = $optgroup.find('[data-selectable]').index(this.$activeOption);\n\t\n\t\t\t\t\tif(e.keyCode === KEY_LEFT) {\n\t\t\t\t\t\t$optgroup = $optgroup.prev('[data-group]');\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$optgroup = $optgroup.next('[data-group]');\n\t\t\t\t\t}\n\t\n\t\t\t\t\t$options = $optgroup.find('[data-selectable]');\n\t\t\t\t\t$option  = $options.eq(Math.min($options.length - 1, index));\n\t\t\t\t\tif ($option.length) {\n\t\t\t\t\t\tthis.setActiveOption($option);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\treturn original.apply(this, arguments);\n\t\t\t};\n\t\t})();\n\t\n\t\tvar getScrollbarWidth = function() {\n\t\t\tvar div;\n\t\t\tvar width = getScrollbarWidth.width;\n\t\t\tvar doc = document;\n\t\n\t\t\tif (typeof width === 'undefined') {\n\t\t\t\tdiv = doc.createElement('div');\n\t\t\t\tdiv.innerHTML = '<div style=\"width:50px;height:50px;position:absolute;left:-50px;top:-50px;overflow:auto;\"><div style=\"width:1px;height:100px;\"></div></div>';\n\t\t\t\tdiv = div.firstChild;\n\t\t\t\tdoc.body.appendChild(div);\n\t\t\t\twidth = getScrollbarWidth.width = div.offsetWidth - div.clientWidth;\n\t\t\t\tdoc.body.removeChild(div);\n\t\t\t}\n\t\t\treturn width;\n\t\t};\n\t\n\t\tvar equalizeSizes = function() {\n\t\t\tvar i, n, height_max, width, width_last, width_parent, $optgroups;\n\t\n\t\t\t$optgroups = $('[data-group]', self.$dropdown_content);\n\t\t\tn = $optgroups.length;\n\t\t\tif (!n || !self.$dropdown_content.width()) return;\n\t\n\t\t\tif (options.equalizeHeight) {\n\t\t\t\theight_max = 0;\n\t\t\t\tfor (i = 0; i < n; i++) {\n\t\t\t\t\theight_max = Math.max(height_max, $optgroups.eq(i).height());\n\t\t\t\t}\n\t\t\t\t$optgroups.css({height: height_max});\n\t\t\t}\n\t\n\t\t\tif (options.equalizeWidth) {\n\t\t\t\twidth_parent = self.$dropdown_content.innerWidth() - getScrollbarWidth();\n\t\t\t\twidth = Math.round(width_parent / n);\n\t\t\t\t$optgroups.css({width: width});\n\t\t\t\tif (n > 1) {\n\t\t\t\t\twidth_last = width_parent - width * (n - 1);\n\t\t\t\t\t$optgroups.eq(n - 1).css({width: width_last});\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\n\t\tif (options.equalizeHeight || options.equalizeWidth) {\n\t\t\thook.after(this, 'positionDropdown', equalizeSizes);\n\t\t\thook.after(this, 'refreshOptions', equalizeSizes);\n\t\t}\n\t\n\t\n\t});\n\t\n\tSelectize.define('remove_button', function(options) {\n\t\tif (this.settings.mode === 'single') return;\n\t\n\t\toptions = $.extend({\n\t\t\tlabel     : '&times;',\n\t\t\ttitle     : 'Remove',\n\t\t\tclassName : 'remove',\n\t\t\tappend    : true\n\t\t}, options);\n\t\n\t\tvar self = this;\n\t\tvar html = '<a href=\"javascript:void(0)\" class=\"' + options.className + '\" tabindex=\"-1\" title=\"' + escape_html(options.title) + '\">' + options.label + '</a>';\n\t\n\t\t/**\n\t\t * Appends an element as a child (with raw HTML).\n\t\t *\n\t\t * @param {string} html_container\n\t\t * @param {string} html_element\n\t\t * @return {string}\n\t\t */\n\t\tvar append = function(html_container, html_element) {\n\t\t\tvar pos = html_container.search(/(<\\/[^>]+>\\s*)$/);\n\t\t\treturn html_container.substring(0, pos) + html_element + html_container.substring(pos);\n\t\t};\n\t\n\t\tthis.setup = (function() {\n\t\t\tvar original = self.setup;\n\t\t\treturn function() {\n\t\t\t\t// override the item rendering method to add the button to each\n\t\t\t\tif (options.append) {\n\t\t\t\t\tvar render_item = self.settings.render.item;\n\t\t\t\t\tself.settings.render.item = function(data) {\n\t\t\t\t\t\treturn append(render_item.apply(this, arguments), html);\n\t\t\t\t\t};\n\t\t\t\t}\n\t\n\t\t\t\toriginal.apply(this, arguments);\n\t\n\t\t\t\t// add event listener\n\t\t\t\tthis.$control.on('click', '.' + options.className, function(e) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tif (self.isLocked) return;\n\t\n\t\t\t\t\tvar $item = $(e.currentTarget).parent();\n\t\t\t\t\tself.setActiveItem($item);\n\t\t\t\t\tif (self.deleteSelection()) {\n\t\t\t\t\t\tself.setCaret(self.items.length);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\n\t\t\t};\n\t\t})();\n\t\n\t});\n\t\n\tSelectize.define('restore_on_backspace', function(options) {\n\t\tvar self = this;\n\t\n\t\toptions.text = options.text || function(option) {\n\t\t\treturn option[this.settings.labelField];\n\t\t};\n\t\n\t\tthis.onKeyDown = (function() {\n\t\t\tvar original = self.onKeyDown;\n\t\t\treturn function(e) {\n\t\t\t\tvar index, option;\n\t\t\t\tif (e.keyCode === KEY_BACKSPACE && this.$control_input.val() === '' && !this.$activeItems.length) {\n\t\t\t\t\tindex = this.caretPos - 1;\n\t\t\t\t\tif (index >= 0 && index < this.items.length) {\n\t\t\t\t\t\toption = this.options[this.items[index]];\n\t\t\t\t\t\tif (this.deleteSelection(e)) {\n\t\t\t\t\t\t\tthis.setTextboxValue(options.text.apply(this, [option]));\n\t\t\t\t\t\t\tthis.refreshOptions(true);\n\t\t\t\t\t\t}\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn original.apply(this, arguments);\n\t\t\t};\n\t\t})();\n\t});\n\t\n\n\treturn Selectize;\n}));\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /projects/rede_gsti/resources/~/selectize/dist/js/selectize.js\n ** module id = 7\n ** module chunks = 1\n **/","/**\n * sifter.js\n * Copyright (c) 2013 Brian Reavis & contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n * file except in compliance with the License. You may obtain a copy of the License at:\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n * ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n *\n * @author Brian Reavis <brian@thirdroute.com>\n */\n\n(function(root, factory) {\n\tif (typeof define === 'function' && define.amd) {\n\t\tdefine(factory);\n\t} else if (typeof exports === 'object') {\n\t\tmodule.exports = factory();\n\t} else {\n\t\troot.Sifter = factory();\n\t}\n}(this, function() {\n\n\t/**\n\t * Textually searches arrays and hashes of objects\n\t * by property (or multiple properties). Designed\n\t * specifically for autocomplete.\n\t *\n\t * @constructor\n\t * @param {array|object} items\n\t * @param {object} items\n\t */\n\tvar Sifter = function(items, settings) {\n\t\tthis.items = items;\n\t\tthis.settings = settings || {diacritics: true};\n\t};\n\n\t/**\n\t * Splits a search string into an array of individual\n\t * regexps to be used to match results.\n\t *\n\t * @param {string} query\n\t * @returns {array}\n\t */\n\tSifter.prototype.tokenize = function(query) {\n\t\tquery = trim(String(query || '').toLowerCase());\n\t\tif (!query || !query.length) return [];\n\n\t\tvar i, n, regex, letter;\n\t\tvar tokens = [];\n\t\tvar words = query.split(/ +/);\n\n\t\tfor (i = 0, n = words.length; i < n; i++) {\n\t\t\tregex = escape_regex(words[i]);\n\t\t\tif (this.settings.diacritics) {\n\t\t\t\tfor (letter in DIACRITICS) {\n\t\t\t\t\tif (DIACRITICS.hasOwnProperty(letter)) {\n\t\t\t\t\t\tregex = regex.replace(new RegExp(letter, 'g'), DIACRITICS[letter]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ttokens.push({\n\t\t\t\tstring : words[i],\n\t\t\t\tregex  : new RegExp(regex, 'i')\n\t\t\t});\n\t\t}\n\n\t\treturn tokens;\n\t};\n\n\t/**\n\t * Iterates over arrays and hashes.\n\t *\n\t * ```\n\t * this.iterator(this.items, function(item, id) {\n\t *    // invoked for each item\n\t * });\n\t * ```\n\t *\n\t * @param {array|object} object\n\t */\n\tSifter.prototype.iterator = function(object, callback) {\n\t\tvar iterator;\n\t\tif (is_array(object)) {\n\t\t\titerator = Array.prototype.forEach || function(callback) {\n\t\t\t\tfor (var i = 0, n = this.length; i < n; i++) {\n\t\t\t\t\tcallback(this[i], i, this);\n\t\t\t\t}\n\t\t\t};\n\t\t} else {\n\t\t\titerator = function(callback) {\n\t\t\t\tfor (var key in this) {\n\t\t\t\t\tif (this.hasOwnProperty(key)) {\n\t\t\t\t\t\tcallback(this[key], key, this);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\titerator.apply(object, [callback]);\n\t};\n\n\t/**\n\t * Returns a function to be used to score individual results.\n\t *\n\t * Good matches will have a higher score than poor matches.\n\t * If an item is not a match, 0 will be returned by the function.\n\t *\n\t * @param {object|string} search\n\t * @param {object} options (optional)\n\t * @returns {function}\n\t */\n\tSifter.prototype.getScoreFunction = function(search, options) {\n\t\tvar self, fields, tokens, token_count;\n\n\t\tself        = this;\n\t\tsearch      = self.prepareSearch(search, options);\n\t\ttokens      = search.tokens;\n\t\tfields      = search.options.fields;\n\t\ttoken_count = tokens.length;\n\n\t\t/**\n\t\t * Calculates how close of a match the\n\t\t * given value is against a search token.\n\t\t *\n\t\t * @param {mixed} value\n\t\t * @param {object} token\n\t\t * @return {number}\n\t\t */\n\t\tvar scoreValue = function(value, token) {\n\t\t\tvar score, pos;\n\n\t\t\tif (!value) return 0;\n\t\t\tvalue = String(value || '');\n\t\t\tpos = value.search(token.regex);\n\t\t\tif (pos === -1) return 0;\n\t\t\tscore = token.string.length / value.length;\n\t\t\tif (pos === 0) score += 0.5;\n\t\t\treturn score;\n\t\t};\n\n\t\t/**\n\t\t * Calculates the score of an object\n\t\t * against the search query.\n\t\t *\n\t\t * @param {object} token\n\t\t * @param {object} data\n\t\t * @return {number}\n\t\t */\n\t\tvar scoreObject = (function() {\n\t\t\tvar field_count = fields.length;\n\t\t\tif (!field_count) {\n\t\t\t\treturn function() { return 0; };\n\t\t\t}\n\t\t\tif (field_count === 1) {\n\t\t\t\treturn function(token, data) {\n\t\t\t\t\treturn scoreValue(data[fields[0]], token);\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn function(token, data) {\n\t\t\t\tfor (var i = 0, sum = 0; i < field_count; i++) {\n\t\t\t\t\tsum += scoreValue(data[fields[i]], token);\n\t\t\t\t}\n\t\t\t\treturn sum / field_count;\n\t\t\t};\n\t\t})();\n\n\t\tif (!token_count) {\n\t\t\treturn function() { return 0; };\n\t\t}\n\t\tif (token_count === 1) {\n\t\t\treturn function(data) {\n\t\t\t\treturn scoreObject(tokens[0], data);\n\t\t\t};\n\t\t}\n\n\t\tif (search.options.conjunction === 'and') {\n\t\t\treturn function(data) {\n\t\t\t\tvar score;\n\t\t\t\tfor (var i = 0, sum = 0; i < token_count; i++) {\n\t\t\t\t\tscore = scoreObject(tokens[i], data);\n\t\t\t\t\tif (score <= 0) return 0;\n\t\t\t\t\tsum += score;\n\t\t\t\t}\n\t\t\t\treturn sum / token_count;\n\t\t\t};\n\t\t} else {\n\t\t\treturn function(data) {\n\t\t\t\tfor (var i = 0, sum = 0; i < token_count; i++) {\n\t\t\t\t\tsum += scoreObject(tokens[i], data);\n\t\t\t\t}\n\t\t\t\treturn sum / token_count;\n\t\t\t};\n\t\t}\n\t};\n\n\t/**\n\t * Returns a function that can be used to compare two\n\t * results, for sorting purposes. If no sorting should\n\t * be performed, `null` will be returned.\n\t *\n\t * @param {string|object} search\n\t * @param {object} options\n\t * @return function(a,b)\n\t */\n\tSifter.prototype.getSortFunction = function(search, options) {\n\t\tvar i, n, self, field, fields, fields_count, multiplier, multipliers, get_field, implicit_score, sort;\n\n\t\tself   = this;\n\t\tsearch = self.prepareSearch(search, options);\n\t\tsort   = (!search.query && options.sort_empty) || options.sort;\n\n\t\t/**\n\t\t * Fetches the specified sort field value\n\t\t * from a search result item.\n\t\t *\n\t\t * @param  {string} name\n\t\t * @param  {object} result\n\t\t * @return {mixed}\n\t\t */\n\t\tget_field = function(name, result) {\n\t\t\tif (name === '$score') return result.score;\n\t\t\treturn self.items[result.id][name];\n\t\t};\n\n\t\t// parse options\n\t\tfields = [];\n\t\tif (sort) {\n\t\t\tfor (i = 0, n = sort.length; i < n; i++) {\n\t\t\t\tif (search.query || sort[i].field !== '$score') {\n\t\t\t\t\tfields.push(sort[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// the \"$score\" field is implied to be the primary\n\t\t// sort field, unless it's manually specified\n\t\tif (search.query) {\n\t\t\timplicit_score = true;\n\t\t\tfor (i = 0, n = fields.length; i < n; i++) {\n\t\t\t\tif (fields[i].field === '$score') {\n\t\t\t\t\timplicit_score = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (implicit_score) {\n\t\t\t\tfields.unshift({field: '$score', direction: 'desc'});\n\t\t\t}\n\t\t} else {\n\t\t\tfor (i = 0, n = fields.length; i < n; i++) {\n\t\t\t\tif (fields[i].field === '$score') {\n\t\t\t\t\tfields.splice(i, 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tmultipliers = [];\n\t\tfor (i = 0, n = fields.length; i < n; i++) {\n\t\t\tmultipliers.push(fields[i].direction === 'desc' ? -1 : 1);\n\t\t}\n\n\t\t// build function\n\t\tfields_count = fields.length;\n\t\tif (!fields_count) {\n\t\t\treturn null;\n\t\t} else if (fields_count === 1) {\n\t\t\tfield = fields[0].field;\n\t\t\tmultiplier = multipliers[0];\n\t\t\treturn function(a, b) {\n\t\t\t\treturn multiplier * cmp(\n\t\t\t\t\tget_field(field, a),\n\t\t\t\t\tget_field(field, b)\n\t\t\t\t);\n\t\t\t};\n\t\t} else {\n\t\t\treturn function(a, b) {\n\t\t\t\tvar i, result, a_value, b_value, field;\n\t\t\t\tfor (i = 0; i < fields_count; i++) {\n\t\t\t\t\tfield = fields[i].field;\n\t\t\t\t\tresult = multipliers[i] * cmp(\n\t\t\t\t\t\tget_field(field, a),\n\t\t\t\t\t\tget_field(field, b)\n\t\t\t\t\t);\n\t\t\t\t\tif (result) return result;\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t};\n\t\t}\n\t};\n\n\t/**\n\t * Parses a search query and returns an object\n\t * with tokens and fields ready to be populated\n\t * with results.\n\t *\n\t * @param {string} query\n\t * @param {object} options\n\t * @returns {object}\n\t */\n\tSifter.prototype.prepareSearch = function(query, options) {\n\t\tif (typeof query === 'object') return query;\n\n\t\toptions = extend({}, options);\n\n\t\tvar option_fields     = options.fields;\n\t\tvar option_sort       = options.sort;\n\t\tvar option_sort_empty = options.sort_empty;\n\n\t\tif (option_fields && !is_array(option_fields)) options.fields = [option_fields];\n\t\tif (option_sort && !is_array(option_sort)) options.sort = [option_sort];\n\t\tif (option_sort_empty && !is_array(option_sort_empty)) options.sort_empty = [option_sort_empty];\n\n\t\treturn {\n\t\t\toptions : options,\n\t\t\tquery   : String(query || '').toLowerCase(),\n\t\t\ttokens  : this.tokenize(query),\n\t\t\ttotal   : 0,\n\t\t\titems   : []\n\t\t};\n\t};\n\n\t/**\n\t * Searches through all items and returns a sorted array of matches.\n\t *\n\t * The `options` parameter can contain:\n\t *\n\t *   - fields {string|array}\n\t *   - sort {array}\n\t *   - score {function}\n\t *   - filter {bool}\n\t *   - limit {integer}\n\t *\n\t * Returns an object containing:\n\t *\n\t *   - options {object}\n\t *   - query {string}\n\t *   - tokens {array}\n\t *   - total {int}\n\t *   - items {array}\n\t *\n\t * @param {string} query\n\t * @param {object} options\n\t * @returns {object}\n\t */\n\tSifter.prototype.search = function(query, options) {\n\t\tvar self = this, value, score, search, calculateScore;\n\t\tvar fn_sort;\n\t\tvar fn_score;\n\n\t\tsearch  = this.prepareSearch(query, options);\n\t\toptions = search.options;\n\t\tquery   = search.query;\n\n\t\t// generate result scoring function\n\t\tfn_score = options.score || self.getScoreFunction(search);\n\n\t\t// perform search and sort\n\t\tif (query.length) {\n\t\t\tself.iterator(self.items, function(item, id) {\n\t\t\t\tscore = fn_score(item);\n\t\t\t\tif (options.filter === false || score > 0) {\n\t\t\t\t\tsearch.items.push({'score': score, 'id': id});\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tself.iterator(self.items, function(item, id) {\n\t\t\t\tsearch.items.push({'score': 1, 'id': id});\n\t\t\t});\n\t\t}\n\n\t\tfn_sort = self.getSortFunction(search, options);\n\t\tif (fn_sort) search.items.sort(fn_sort);\n\n\t\t// apply limits\n\t\tsearch.total = search.items.length;\n\t\tif (typeof options.limit === 'number') {\n\t\t\tsearch.items = search.items.slice(0, options.limit);\n\t\t}\n\n\t\treturn search;\n\t};\n\n\t// utilities\n\t// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n\tvar cmp = function(a, b) {\n\t\tif (typeof a === 'number' && typeof b === 'number') {\n\t\t\treturn a > b ? 1 : (a < b ? -1 : 0);\n\t\t}\n\t\ta = asciifold(String(a || ''));\n\t\tb = asciifold(String(b || ''));\n\t\tif (a > b) return 1;\n\t\tif (b > a) return -1;\n\t\treturn 0;\n\t};\n\n\tvar extend = function(a, b) {\n\t\tvar i, n, k, object;\n\t\tfor (i = 1, n = arguments.length; i < n; i++) {\n\t\t\tobject = arguments[i];\n\t\t\tif (!object) continue;\n\t\t\tfor (k in object) {\n\t\t\t\tif (object.hasOwnProperty(k)) {\n\t\t\t\t\ta[k] = object[k];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn a;\n\t};\n\n\tvar trim = function(str) {\n\t\treturn (str + '').replace(/^\\s+|\\s+$|/g, '');\n\t};\n\n\tvar escape_regex = function(str) {\n\t\treturn (str + '').replace(/([.?*+^$[\\]\\\\(){}|-])/g, '\\\\$1');\n\t};\n\n\tvar is_array = Array.isArray || ($ && $.isArray) || function(object) {\n\t\treturn Object.prototype.toString.call(object) === '[object Array]';\n\t};\n\n\tvar DIACRITICS = {\n\t\t'a': '[aÀÁÂÃÄÅàáâãäåĀāąĄ]',\n\t\t'c': '[cÇçćĆčČ]',\n\t\t'd': '[dđĐďĎ]',\n\t\t'e': '[eÈÉÊËèéêëěĚĒēęĘ]',\n\t\t'i': '[iÌÍÎÏìíîïĪī]',\n\t\t'l': '[lłŁ]',\n\t\t'n': '[nÑñňŇńŃ]',\n\t\t'o': '[oÒÓÔÕÕÖØòóôõöøŌō]',\n\t\t'r': '[rřŘ]',\n\t\t's': '[sŠšśŚ]',\n\t\t't': '[tťŤ]',\n\t\t'u': '[uÙÚÛÜùúûüůŮŪū]',\n\t\t'y': '[yŸÿýÝ]',\n\t\t'z': '[zŽžżŻźŹ]'\n\t};\n\n\tvar asciifold = (function() {\n\t\tvar i, n, k, chunk;\n\t\tvar foreignletters = '';\n\t\tvar lookup = {};\n\t\tfor (k in DIACRITICS) {\n\t\t\tif (DIACRITICS.hasOwnProperty(k)) {\n\t\t\t\tchunk = DIACRITICS[k].substring(2, DIACRITICS[k].length - 1);\n\t\t\t\tforeignletters += chunk;\n\t\t\t\tfor (i = 0, n = chunk.length; i < n; i++) {\n\t\t\t\t\tlookup[chunk.charAt(i)] = k;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tvar regexp = new RegExp('[' +  foreignletters + ']', 'g');\n\t\treturn function(str) {\n\t\t\treturn str.replace(regexp, function(foreignletter) {\n\t\t\t\treturn lookup[foreignletter];\n\t\t\t}).toLowerCase();\n\t\t};\n\t})();\n\n\n\t// export\n\t// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n\treturn Sifter;\n}));\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /projects/rede_gsti/resources/~/selectize/~/sifter/sifter.js\n ** module id = 8\n ** module chunks = 1\n **/","/**\n * microplugin.js\n * Copyright (c) 2013 Brian Reavis & contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n * file except in compliance with the License. You may obtain a copy of the License at:\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n * ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n *\n * @author Brian Reavis <brian@thirdroute.com>\n */\n\n(function(root, factory) {\n\tif (typeof define === 'function' && define.amd) {\n\t\tdefine(factory);\n\t} else if (typeof exports === 'object') {\n\t\tmodule.exports = factory();\n\t} else {\n\t\troot.MicroPlugin = factory();\n\t}\n}(this, function() {\n\tvar MicroPlugin = {};\n\n\tMicroPlugin.mixin = function(Interface) {\n\t\tInterface.plugins = {};\n\n\t\t/**\n\t\t * Initializes the listed plugins (with options).\n\t\t * Acceptable formats:\n\t\t *\n\t\t * List (without options):\n\t\t *   ['a', 'b', 'c']\n\t\t *\n\t\t * List (with options):\n\t\t *   [{'name': 'a', options: {}}, {'name': 'b', options: {}}]\n\t\t *\n\t\t * Hash (with options):\n\t\t *   {'a': { ... }, 'b': { ... }, 'c': { ... }}\n\t\t *\n\t\t * @param {mixed} plugins\n\t\t */\n\t\tInterface.prototype.initializePlugins = function(plugins) {\n\t\t\tvar i, n, key;\n\t\t\tvar self  = this;\n\t\t\tvar queue = [];\n\n\t\t\tself.plugins = {\n\t\t\t\tnames     : [],\n\t\t\t\tsettings  : {},\n\t\t\t\trequested : {},\n\t\t\t\tloaded    : {}\n\t\t\t};\n\n\t\t\tif (utils.isArray(plugins)) {\n\t\t\t\tfor (i = 0, n = plugins.length; i < n; i++) {\n\t\t\t\t\tif (typeof plugins[i] === 'string') {\n\t\t\t\t\t\tqueue.push(plugins[i]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.plugins.settings[plugins[i].name] = plugins[i].options;\n\t\t\t\t\t\tqueue.push(plugins[i].name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (plugins) {\n\t\t\t\tfor (key in plugins) {\n\t\t\t\t\tif (plugins.hasOwnProperty(key)) {\n\t\t\t\t\t\tself.plugins.settings[key] = plugins[key];\n\t\t\t\t\t\tqueue.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twhile (queue.length) {\n\t\t\t\tself.require(queue.shift());\n\t\t\t}\n\t\t};\n\n\t\tInterface.prototype.loadPlugin = function(name) {\n\t\t\tvar self    = this;\n\t\t\tvar plugins = self.plugins;\n\t\t\tvar plugin  = Interface.plugins[name];\n\n\t\t\tif (!Interface.plugins.hasOwnProperty(name)) {\n\t\t\t\tthrow new Error('Unable to find \"' +  name + '\" plugin');\n\t\t\t}\n\n\t\t\tplugins.requested[name] = true;\n\t\t\tplugins.loaded[name] = plugin.fn.apply(self, [self.plugins.settings[name] || {}]);\n\t\t\tplugins.names.push(name);\n\t\t};\n\n\t\t/**\n\t\t * Initializes a plugin.\n\t\t *\n\t\t * @param {string} name\n\t\t */\n\t\tInterface.prototype.require = function(name) {\n\t\t\tvar self = this;\n\t\t\tvar plugins = self.plugins;\n\n\t\t\tif (!self.plugins.loaded.hasOwnProperty(name)) {\n\t\t\t\tif (plugins.requested[name]) {\n\t\t\t\t\tthrow new Error('Plugin has circular dependency (\"' + name + '\")');\n\t\t\t\t}\n\t\t\t\tself.loadPlugin(name);\n\t\t\t}\n\n\t\t\treturn plugins.loaded[name];\n\t\t};\n\n\t\t/**\n\t\t * Registers a plugin.\n\t\t *\n\t\t * @param {string} name\n\t\t * @param {function} fn\n\t\t */\n\t\tInterface.define = function(name, fn) {\n\t\t\tInterface.plugins[name] = {\n\t\t\t\t'name' : name,\n\t\t\t\t'fn'   : fn\n\t\t\t};\n\t\t};\n\t};\n\n\tvar utils = {\n\t\tisArray: Array.isArray || function(vArg) {\n\t\t\treturn Object.prototype.toString.call(vArg) === '[object Array]';\n\t\t}\n\t};\n\n\treturn MicroPlugin;\n}));\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /projects/rede_gsti/resources/~/selectize/~/microplugin/src/microplugin.js\n ** module id = 9\n ** module chunks = 1\n **/"],"sourceRoot":""}