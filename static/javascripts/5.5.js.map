{"version":3,"sources":["webpack:///5.5.js","webpack:///./vendor/jquery.formset.js?0ac1"],"names":["webpackJsonp","217","module","exports","__webpack_require__","jQuery","$","fn","formset","opts","options","extend","defaults","flatExtraClasses","extraClasses","join","totalForms","prefix","maxForms","minForms","childElementSelector","$$","this","applyExtraClasses","row","ndx","removeClass","addClass","length","updateElementIndex","elem","idRegex","RegExp","replacement","attr","replace","hasChildElements","find","showAddButton","val","showDeleteLinks","insertDeleteLink","delCssSelector","trim","deleteCssClass","addCssSelector","addCssClass","is","children","append","deleteText","hide","click","forms","parents","formCssClass","del","buttonRow","siblings","not","remove","i","formCount","eq","each","show","removed","before","addButton","template","hideAddButton","formTemplate","removeAttr","clone","keepFieldValues","numCols","addText","parent","filter","after","next","parseInt","get","insertBefore","added","call"],"mappings":"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","file":"5.5.js","sourcesContent":["webpackJsonp([5],{\n\n/***/ 217:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(jQuery) {/**\n\t * jQuery Formset 1.3-pre\n\t * @author Stanislaus Madueke (stan DOT madueke AT gmail DOT com)\n\t * @requires jQuery 1.2.6 or later\n\t *\n\t * Copyright (c) 2009, Stanislaus Madueke\n\t * All rights reserved.\n\t *\n\t * Licensed under the New BSD License\n\t * See: http://www.opensource.org/licenses/bsd-license.php\n\t */\n\t'use strict';\n\t\n\t;(function ($) {\n\t    $.fn.formset = function (opts) {\n\t        var options = $.extend({}, $.fn.formset.defaults, opts),\n\t            flatExtraClasses = options.extraClasses.join(' '),\n\t            totalForms = $('#id_' + options.prefix + '-TOTAL_FORMS'),\n\t            maxForms = $('#id_' + options.prefix + '-MAX_NUM_FORMS'),\n\t            minForms = $('#id_' + options.prefix + '-MIN_NUM_FORMS'),\n\t            childElementSelector = 'input,select,textarea,label,div',\n\t            $$ = $(this),\n\t            applyExtraClasses = function applyExtraClasses(row, ndx) {\n\t            if (options.extraClasses) {\n\t                row.removeClass(flatExtraClasses);\n\t                row.addClass(options.extraClasses[ndx % options.extraClasses.length]);\n\t            }\n\t        },\n\t            updateElementIndex = function updateElementIndex(elem, prefix, ndx) {\n\t            var idRegex = new RegExp(prefix + '-(\\\\d+|__prefix__)-'),\n\t                replacement = prefix + '-' + ndx + '-';\n\t            if (elem.attr(\"for\")) elem.attr(\"for\", elem.attr(\"for\").replace(idRegex, replacement));\n\t            if (elem.attr('id')) elem.attr('id', elem.attr('id').replace(idRegex, replacement));\n\t            if (elem.attr('name')) elem.attr('name', elem.attr('name').replace(idRegex, replacement));\n\t        },\n\t            hasChildElements = function hasChildElements(row) {\n\t            return row.find(childElementSelector).length > 0;\n\t        },\n\t            showAddButton = function showAddButton() {\n\t            return maxForms.length == 0 || // For Django versions pre 1.2\n\t            maxForms.val() == '' || maxForms.val() - totalForms.val() > 0;\n\t        },\n\t\n\t        /**\n\t        * Indicates whether delete link(s) can be displayed - when total forms > min forms\n\t        */\n\t        showDeleteLinks = function showDeleteLinks() {\n\t            return minForms.length == 0 || // For Django versions pre 1.7\n\t            minForms.val() == '' || totalForms.val() - minForms.val() > 0;\n\t        },\n\t            insertDeleteLink = function insertDeleteLink(row) {\n\t            var delCssSelector = $.trim(options.deleteCssClass).replace(/\\s+/g, '.'),\n\t                addCssSelector = $.trim(options.addCssClass).replace(/\\s+/g, '.');\n\t            if (row.is('TR')) {\n\t                // If the forms are laid out in table rows, insert\n\t                // the remove button into the last table cell:\n\t                row.children(':last').append('<a class=\"' + options.deleteCssClass + '\" href=\"javascript:void(0)\">' + options.deleteText + '</a>');\n\t            } else if (row.is('UL') || row.is('OL')) {\n\t                // If they're laid out as an ordered/unordered list,\n\t                // insert an <li> after the last list item:\n\t                row.append('<li><a class=\"' + options.deleteCssClass + '\" href=\"javascript:void(0)\">' + options.deleteText + '</a></li>');\n\t            } else {\n\t                // Otherwise, just insert the remove button as the\n\t                // last child element of the form's container:\n\t                row.append('<a class=\"' + options.deleteCssClass + '\" href=\"javascript:void(0)\">' + options.deleteText + '</a>');\n\t            }\n\t            // Check if we're under the minimum number of forms - not to display delete link at rendering\n\t            if (!showDeleteLinks()) {\n\t                row.find('a.' + delCssSelector).hide();\n\t            }\n\t\n\t            row.find('a.' + delCssSelector).click(function () {\n\t                var row = $(this).parents('.' + options.formCssClass),\n\t                    del = row.find('input:hidden[id $= \"-DELETE\"]'),\n\t                    buttonRow = row.siblings(\"a.\" + addCssSelector + ', .' + options.formCssClass + '-add'),\n\t                    forms;\n\t                if (del.length) {\n\t                    // We're dealing with an inline formset.\n\t                    // Rather than remove this form from the DOM, we'll mark it as deleted\n\t                    // and hide it, then let Django handle the deleting:\n\t                    del.val('on');\n\t                    row.hide();\n\t                    forms = $('.' + options.formCssClass).not(':hidden');\n\t                } else {\n\t                    row.remove();\n\t                    // Update the TOTAL_FORMS count:\n\t                    forms = $('.' + options.formCssClass).not('.formset-custom-template');\n\t                    totalForms.val(forms.length);\n\t                }\n\t                for (var i = 0, formCount = forms.length; i < formCount; i++) {\n\t                    // Apply `extraClasses` to form rows so they're nicely alternating:\n\t                    applyExtraClasses(forms.eq(i), i);\n\t                    if (!del.length) {\n\t                        // Also update names and IDs for all child controls (if this isn't\n\t                        // a delete-able inline formset) so they remain in sequence:\n\t                        forms.eq(i).find(childElementSelector).each(function () {\n\t                            updateElementIndex($(this), options.prefix, i);\n\t                        });\n\t                    }\n\t                }\n\t                // Check if we've reached the minimum number of forms - hide all delete link(s)\n\t                if (!showDeleteLinks()) {\n\t                    $('a.' + delCssSelector).each(function () {\n\t                        $(this).hide();\n\t                    });\n\t                }\n\t                // Check if we need to show the add button:\n\t                if (buttonRow.is(':hidden') && showAddButton()) buttonRow.show();\n\t                // If a post-delete callback was provided, call it with the deleted form:\n\t                if (options.removed) options.removed(row);\n\t                return false;\n\t            });\n\t        };\n\t\n\t        $$.each(function (i) {\n\t            var row = $(this),\n\t                del = row.find('input:checkbox[id $= \"-DELETE\"]');\n\t            if (del.length) {\n\t                // If you specify \"can_delete = True\" when creating an inline formset,\n\t                // Django adds a checkbox to each form in the formset.\n\t                // Replace the default checkbox with a hidden field:\n\t                if (del.is(':checked')) {\n\t                    // If an inline formset containing deleted forms fails validation, make sure\n\t                    // we keep the forms hidden (thanks for the bug report and suggested fix Mike)\n\t                    del.before('<input type=\"hidden\" name=\"' + del.attr('name') + '\" id=\"' + del.attr('id') + '\" value=\"on\" />');\n\t                    row.hide();\n\t                } else {\n\t                    del.before('<input type=\"hidden\" name=\"' + del.attr('name') + '\" id=\"' + del.attr('id') + '\" />');\n\t                }\n\t                // Hide any labels associated with the DELETE checkbox:\n\t                $('label[for=\"' + del.attr('id') + '\"]').hide();\n\t                del.remove();\n\t            }\n\t            if (hasChildElements(row)) {\n\t                row.addClass(options.formCssClass);\n\t                if (row.is(':visible')) {\n\t                    insertDeleteLink(row);\n\t                    applyExtraClasses(row, i);\n\t                }\n\t            }\n\t        });\n\t\n\t        if ($$.length) {\n\t            var hideAddButton = !showAddButton(),\n\t                addButton,\n\t                template;\n\t            if (options.formTemplate) {\n\t                // If a form template was specified, we'll clone it to generate new form instances:\n\t                template = options.formTemplate instanceof $ ? options.formTemplate : $(options.formTemplate);\n\t                template.removeAttr('id').addClass(options.formCssClass + ' formset-custom-template');\n\t                template.find(childElementSelector).each(function () {\n\t                    updateElementIndex($(this), options.prefix, '__prefix__');\n\t                });\n\t                insertDeleteLink(template);\n\t            } else {\n\t                // Otherwise, use the last form in the formset; this works much better if you've got\n\t                // extra (>= 1) forms (thnaks to justhamade for pointing this out):\n\t                template = $('.' + options.formCssClass + ':last').clone(true).removeAttr('id');\n\t                template.find('input:hidden[id $= \"-DELETE\"]').remove();\n\t                // Clear all cloned fields, except those the user wants to keep (thanks to brunogola for the suggestion):\n\t                template.find(childElementSelector).not(options.keepFieldValues).each(function () {\n\t                    var elem = $(this);\n\t                    // If this is a checkbox or radiobutton, uncheck it.\n\t                    // This fixes Issue 1, reported by Wilson.Andrew.J:\n\t                    if (elem.is('input:checkbox') || elem.is('input:radio')) {\n\t                        elem.attr('checked', false);\n\t                    } else {\n\t                        elem.val('');\n\t                    }\n\t                });\n\t            }\n\t            // FIXME: Perhaps using $.data would be a better idea?\n\t            options.formTemplate = template;\n\t\n\t            if ($$.is('TR')) {\n\t                // If forms are laid out as table rows, insert the\n\t                // \"add\" button in a new table row:\n\t                var numCols = $$.eq(0).children().length,\n\t                    // This is a bit of an assumption :|\n\t                buttonRow = $('<tr><td colspan=\"' + numCols + '\"><a class=\"' + options.addCssClass + '\" href=\"javascript:void(0)\">' + options.addText + '</a></tr>').addClass(options.formCssClass + '-add');\n\t                $$.parent().append(buttonRow);\n\t                if (hideAddButton) buttonRow.hide();\n\t                addButton = buttonRow.find('a');\n\t            } else {\n\t                // Otherwise, insert it immediately after the last form:\n\t                $$.filter(':last').after('<a class=\"' + options.addCssClass + '\" href=\"javascript:void(0)\">' + options.addText + '</a>');\n\t                addButton = $$.filter(':last').next();\n\t                if (hideAddButton) addButton.hide();\n\t            }\n\t            addButton.click(function () {\n\t                var formCount = parseInt(totalForms.val()),\n\t                    row = options.formTemplate.clone(true).removeClass('formset-custom-template'),\n\t                    buttonRow = $($(this).parents('tr.' + options.formCssClass + '-add').get(0) || this),\n\t                    delCssSelector = $.trim(options.deleteCssClass).replace(/\\s+/g, '.');\n\t                applyExtraClasses(row, formCount);\n\t                row.insertBefore(buttonRow).show();\n\t                row.find(childElementSelector).each(function () {\n\t                    updateElementIndex($(this), options.prefix, formCount);\n\t                });\n\t                totalForms.val(formCount + 1);\n\t                // Check if we're above the minimum allowed number of forms -> show all delete link(s)\n\t                if (showDeleteLinks()) {\n\t                    $('a.' + delCssSelector).each(function () {\n\t                        $(this).show();\n\t                    });\n\t                }\n\t                // Check if we've exceeded the maximum allowed number of forms:\n\t                if (!showAddButton()) buttonRow.hide();\n\t                // If a post-add callback was supplied, call it with the added form:\n\t                if (options.added) options.added(row);\n\t                return false;\n\t            });\n\t        }\n\t\n\t        return $$;\n\t    };\n\t\n\t    /* Setup plugin defaults */\n\t    $.fn.formset.defaults = {\n\t        prefix: 'form', // The form prefix for your django formset\n\t        formTemplate: null, // The jQuery selection cloned to generate new form instances\n\t        addText: 'add another', // Text for the add link\n\t        deleteText: 'remove', // Text for the delete link\n\t        addCssClass: 'add-row', // CSS class applied to the add link\n\t        deleteCssClass: 'delete-row', // CSS class applied to the delete link\n\t        formCssClass: 'dynamic-form', // CSS class applied to each form in a formset\n\t        extraClasses: [], // Additional CSS classes, which will be applied to each form in turn\n\t        keepFieldValues: '', // jQuery selector for fields whose values should be kept when the form is cloned\n\t        added: null, // Function called each time a new form is added\n\t        removed: null // Function called each time a form is deleted\n\t    };\n\t})(jQuery);\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))\n\n/***/ }\n\n});\n\n\n// WEBPACK FOOTER //\n// 5.5.js","/**\n * jQuery Formset 1.3-pre\n * @author Stanislaus Madueke (stan DOT madueke AT gmail DOT com)\n * @requires jQuery 1.2.6 or later\n *\n * Copyright (c) 2009, Stanislaus Madueke\n * All rights reserved.\n *\n * Licensed under the New BSD License\n * See: http://www.opensource.org/licenses/bsd-license.php\n */\n;(function($) {\n    $.fn.formset = function(opts)\n    {\n        var options = $.extend({}, $.fn.formset.defaults, opts),\n            flatExtraClasses = options.extraClasses.join(' '),\n            totalForms = $('#id_' + options.prefix + '-TOTAL_FORMS'),\n            maxForms = $('#id_' + options.prefix + '-MAX_NUM_FORMS'),\n            minForms = $('#id_' + options.prefix + '-MIN_NUM_FORMS'),\n            childElementSelector = 'input,select,textarea,label,div',\n            $$ = $(this),\n\n            applyExtraClasses = function(row, ndx) {\n                if (options.extraClasses) {\n                    row.removeClass(flatExtraClasses);\n                    row.addClass(options.extraClasses[ndx % options.extraClasses.length]);\n                }\n            },\n\n            updateElementIndex = function(elem, prefix, ndx) {\n                var idRegex = new RegExp(prefix + '-(\\\\d+|__prefix__)-'),\n                    replacement = prefix + '-' + ndx + '-';\n                if (elem.attr(\"for\")) elem.attr(\"for\", elem.attr(\"for\").replace(idRegex, replacement));\n                if (elem.attr('id')) elem.attr('id', elem.attr('id').replace(idRegex, replacement));\n                if (elem.attr('name')) elem.attr('name', elem.attr('name').replace(idRegex, replacement));\n            },\n\n            hasChildElements = function(row) {\n                return row.find(childElementSelector).length > 0;\n            },\n\n            showAddButton = function() {\n                return maxForms.length == 0 ||   // For Django versions pre 1.2\n                    (maxForms.val() == '' || (maxForms.val() - totalForms.val() > 0));\n            },\n\n            /**\n            * Indicates whether delete link(s) can be displayed - when total forms > min forms\n            */\n            showDeleteLinks = function() {\n                return minForms.length == 0 ||   // For Django versions pre 1.7\n                    (minForms.val() == '' || (totalForms.val() - minForms.val() > 0));\n            },\n\n            insertDeleteLink = function(row) {\n                var delCssSelector = $.trim(options.deleteCssClass).replace(/\\s+/g, '.'),\n                    addCssSelector = $.trim(options.addCssClass).replace(/\\s+/g, '.');\n                if (row.is('TR')) {\n                    // If the forms are laid out in table rows, insert\n                    // the remove button into the last table cell:\n                    row.children(':last').append('<a class=\"' + options.deleteCssClass +'\" href=\"javascript:void(0)\">' + options.deleteText + '</a>');\n                } else if (row.is('UL') || row.is('OL')) {\n                    // If they're laid out as an ordered/unordered list,\n                    // insert an <li> after the last list item:\n                    row.append('<li><a class=\"' + options.deleteCssClass + '\" href=\"javascript:void(0)\">' + options.deleteText +'</a></li>');\n                } else {\n                    // Otherwise, just insert the remove button as the\n                    // last child element of the form's container:\n                    row.append('<a class=\"' + options.deleteCssClass + '\" href=\"javascript:void(0)\">' + options.deleteText +'</a>');\n                }\n                // Check if we're under the minimum number of forms - not to display delete link at rendering\n                if (!showDeleteLinks()){\n                    row.find('a.' + delCssSelector).hide();\n                }\n\n                row.find('a.' + delCssSelector).click(function() {\n                    var row = $(this).parents('.' + options.formCssClass),\n                        del = row.find('input:hidden[id $= \"-DELETE\"]'),\n                        buttonRow = row.siblings(\"a.\" + addCssSelector + ', .' + options.formCssClass + '-add'),\n                        forms;\n                    if (del.length) {\n                        // We're dealing with an inline formset.\n                        // Rather than remove this form from the DOM, we'll mark it as deleted\n                        // and hide it, then let Django handle the deleting:\n                        del.val('on');\n                        row.hide();\n                        forms = $('.' + options.formCssClass).not(':hidden');\n                    } else {\n                        row.remove();\n                        // Update the TOTAL_FORMS count:\n                        forms = $('.' + options.formCssClass).not('.formset-custom-template');\n                        totalForms.val(forms.length);\n                    }\n                    for (var i=0, formCount=forms.length; i<formCount; i++) {\n                        // Apply `extraClasses` to form rows so they're nicely alternating:\n                        applyExtraClasses(forms.eq(i), i);\n                        if (!del.length) {\n                            // Also update names and IDs for all child controls (if this isn't\n                            // a delete-able inline formset) so they remain in sequence:\n                            forms.eq(i).find(childElementSelector).each(function() {\n                                updateElementIndex($(this), options.prefix, i);\n                            });\n                        }\n                    }\n                    // Check if we've reached the minimum number of forms - hide all delete link(s)\n                    if (!showDeleteLinks()){\n                        $('a.' + delCssSelector).each(function(){$(this).hide();});\n                    }\n                    // Check if we need to show the add button:\n                    if (buttonRow.is(':hidden') && showAddButton()) buttonRow.show();\n                    // If a post-delete callback was provided, call it with the deleted form:\n                    if (options.removed) options.removed(row);\n                    return false;\n                });\n            };\n\n        $$.each(function(i) {\n            var row = $(this),\n                del = row.find('input:checkbox[id $= \"-DELETE\"]');\n            if (del.length) {\n                // If you specify \"can_delete = True\" when creating an inline formset,\n                // Django adds a checkbox to each form in the formset.\n                // Replace the default checkbox with a hidden field:\n                if (del.is(':checked')) {\n                    // If an inline formset containing deleted forms fails validation, make sure\n                    // we keep the forms hidden (thanks for the bug report and suggested fix Mike)\n                    del.before('<input type=\"hidden\" name=\"' + del.attr('name') +'\" id=\"' + del.attr('id') +'\" value=\"on\" />');\n                    row.hide();\n                } else {\n                    del.before('<input type=\"hidden\" name=\"' + del.attr('name') +'\" id=\"' + del.attr('id') +'\" />');\n                }\n                // Hide any labels associated with the DELETE checkbox:\n                $('label[for=\"' + del.attr('id') + '\"]').hide();\n                del.remove();\n            }\n            if (hasChildElements(row)) {\n                row.addClass(options.formCssClass);\n                if (row.is(':visible')) {\n                    insertDeleteLink(row);\n                    applyExtraClasses(row, i);\n                }\n            }\n        });\n\n        if ($$.length) {\n            var hideAddButton = !showAddButton(),\n                addButton, template;\n            if (options.formTemplate) {\n                // If a form template was specified, we'll clone it to generate new form instances:\n                template = (options.formTemplate instanceof $) ? options.formTemplate : $(options.formTemplate);\n                template.removeAttr('id').addClass(options.formCssClass + ' formset-custom-template');\n                template.find(childElementSelector).each(function() {\n                    updateElementIndex($(this), options.prefix, '__prefix__');\n                });\n                insertDeleteLink(template);\n            } else {\n                // Otherwise, use the last form in the formset; this works much better if you've got\n                // extra (>= 1) forms (thnaks to justhamade for pointing this out):\n                template = $('.' + options.formCssClass + ':last').clone(true).removeAttr('id');\n                template.find('input:hidden[id $= \"-DELETE\"]').remove();\n                // Clear all cloned fields, except those the user wants to keep (thanks to brunogola for the suggestion):\n                template.find(childElementSelector).not(options.keepFieldValues).each(function() {\n                    var elem = $(this);\n                    // If this is a checkbox or radiobutton, uncheck it.\n                    // This fixes Issue 1, reported by Wilson.Andrew.J:\n                    if (elem.is('input:checkbox') || elem.is('input:radio')) {\n                        elem.attr('checked', false);\n                    } else {\n                        elem.val('');\n                    }\n                });\n            }\n            // FIXME: Perhaps using $.data would be a better idea?\n            options.formTemplate = template;\n\n            if ($$.is('TR')) {\n                // If forms are laid out as table rows, insert the\n                // \"add\" button in a new table row:\n                var numCols = $$.eq(0).children().length,   // This is a bit of an assumption :|\n                    buttonRow = $('<tr><td colspan=\"' + numCols + '\"><a class=\"' + options.addCssClass + '\" href=\"javascript:void(0)\">' + options.addText + '</a></tr>')\n                                .addClass(options.formCssClass + '-add');\n                $$.parent().append(buttonRow);\n                if (hideAddButton) buttonRow.hide();\n                addButton = buttonRow.find('a');\n            } else {\n                // Otherwise, insert it immediately after the last form:\n                $$.filter(':last').after('<a class=\"' + options.addCssClass + '\" href=\"javascript:void(0)\">' + options.addText + '</a>');\n                addButton = $$.filter(':last').next();\n                if (hideAddButton) addButton.hide();\n            }\n            addButton.click(function() {\n                var formCount = parseInt(totalForms.val()),\n                    row = options.formTemplate.clone(true).removeClass('formset-custom-template'),\n                    buttonRow = $($(this).parents('tr.' + options.formCssClass + '-add').get(0) || this),\n                    delCssSelector = $.trim(options.deleteCssClass).replace(/\\s+/g, '.');\n                applyExtraClasses(row, formCount);\n                row.insertBefore(buttonRow).show();\n                row.find(childElementSelector).each(function() {\n                    updateElementIndex($(this), options.prefix, formCount);\n                });\n                totalForms.val(formCount + 1);\n                // Check if we're above the minimum allowed number of forms -> show all delete link(s)\n                if (showDeleteLinks()){\n                    $('a.' + delCssSelector).each(function(){$(this).show();});\n                }\n                // Check if we've exceeded the maximum allowed number of forms:\n                if (!showAddButton()) buttonRow.hide();\n                // If a post-add callback was supplied, call it with the added form:\n                if (options.added) options.added(row);\n                return false;\n            });\n        }\n\n        return $$;\n    };\n\n    /* Setup plugin defaults */\n    $.fn.formset.defaults = {\n        prefix: 'form',                  // The form prefix for your django formset\n        formTemplate: null,              // The jQuery selection cloned to generate new form instances\n        addText: 'add another',          // Text for the add link\n        deleteText: 'remove',            // Text for the delete link\n        addCssClass: 'add-row',          // CSS class applied to the add link\n        deleteCssClass: 'delete-row',    // CSS class applied to the delete link\n        formCssClass: 'dynamic-form',    // CSS class applied to each form in a formset\n        extraClasses: [],                // Additional CSS classes, which will be applied to each form in turn\n        keepFieldValues: '',             // jQuery selector for fields whose values should be kept when the form is cloned\n        added: null,                     // Function called each time a new form is added\n        removed: null                    // Function called each time a form is deleted\n    };\n})(jQuery);\n\n\n\n// WEBPACK FOOTER //\n// ./vendor/jquery.formset.js"],"sourceRoot":""}